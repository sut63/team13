// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/employee"
	"github.com/team13/app/ent/predicate"
	"github.com/team13/app/ent/product"
	"github.com/team13/app/ent/stock"
	"github.com/team13/app/ent/typeproduct"
	"github.com/team13/app/ent/zoneproduct"
)

// StockUpdate is the builder for updating Stock entities.
type StockUpdate struct {
	config
	hooks      []Hook
	mutation   *StockMutation
	predicates []predicate.Stock
}

// Where adds a new predicate for the builder.
func (su *StockUpdate) Where(ps ...predicate.Stock) *StockUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetPriceproduct sets the Priceproduct field.
func (su *StockUpdate) SetPriceproduct(f float64) *StockUpdate {
	su.mutation.ResetPriceproduct()
	su.mutation.SetPriceproduct(f)
	return su
}

// AddPriceproduct adds f to Priceproduct.
func (su *StockUpdate) AddPriceproduct(f float64) *StockUpdate {
	su.mutation.AddPriceproduct(f)
	return su
}

// SetAmount sets the Amount field.
func (su *StockUpdate) SetAmount(i int) *StockUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(i)
	return su
}

// AddAmount adds i to Amount.
func (su *StockUpdate) AddAmount(i int) *StockUpdate {
	su.mutation.AddAmount(i)
	return su
}

// SetTime sets the Time field.
func (su *StockUpdate) SetTime(t time.Time) *StockUpdate {
	su.mutation.SetTime(t)
	return su
}

// SetProductID sets the product edge to Product by id.
func (su *StockUpdate) SetProductID(id int) *StockUpdate {
	su.mutation.SetProductID(id)
	return su
}

// SetProduct sets the product edge to Product.
func (su *StockUpdate) SetProduct(p *Product) *StockUpdate {
	return su.SetProductID(p.ID)
}

// SetZoneproductID sets the zoneproduct edge to Zoneproduct by id.
func (su *StockUpdate) SetZoneproductID(id int) *StockUpdate {
	su.mutation.SetZoneproductID(id)
	return su
}

// SetNillableZoneproductID sets the zoneproduct edge to Zoneproduct by id if the given value is not nil.
func (su *StockUpdate) SetNillableZoneproductID(id *int) *StockUpdate {
	if id != nil {
		su = su.SetZoneproductID(*id)
	}
	return su
}

// SetZoneproduct sets the zoneproduct edge to Zoneproduct.
func (su *StockUpdate) SetZoneproduct(z *Zoneproduct) *StockUpdate {
	return su.SetZoneproductID(z.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (su *StockUpdate) SetEmployeeID(id int) *StockUpdate {
	su.mutation.SetEmployeeID(id)
	return su
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (su *StockUpdate) SetNillableEmployeeID(id *int) *StockUpdate {
	if id != nil {
		su = su.SetEmployeeID(*id)
	}
	return su
}

// SetEmployee sets the employee edge to Employee.
func (su *StockUpdate) SetEmployee(e *Employee) *StockUpdate {
	return su.SetEmployeeID(e.ID)
}

// SetTypeproductID sets the Typeproduct edge to Typeproduct by id.
func (su *StockUpdate) SetTypeproductID(id int) *StockUpdate {
	su.mutation.SetTypeproductID(id)
	return su
}

// SetNillableTypeproductID sets the Typeproduct edge to Typeproduct by id if the given value is not nil.
func (su *StockUpdate) SetNillableTypeproductID(id *int) *StockUpdate {
	if id != nil {
		su = su.SetTypeproductID(*id)
	}
	return su
}

// SetTypeproduct sets the Typeproduct edge to Typeproduct.
func (su *StockUpdate) SetTypeproduct(t *Typeproduct) *StockUpdate {
	return su.SetTypeproductID(t.ID)
}

// Mutation returns the StockMutation object of the builder.
func (su *StockUpdate) Mutation() *StockMutation {
	return su.mutation
}

// ClearProduct clears the product edge to Product.
func (su *StockUpdate) ClearProduct() *StockUpdate {
	su.mutation.ClearProduct()
	return su
}

// ClearZoneproduct clears the zoneproduct edge to Zoneproduct.
func (su *StockUpdate) ClearZoneproduct() *StockUpdate {
	su.mutation.ClearZoneproduct()
	return su
}

// ClearEmployee clears the employee edge to Employee.
func (su *StockUpdate) ClearEmployee() *StockUpdate {
	su.mutation.ClearEmployee()
	return su
}

// ClearTypeproduct clears the Typeproduct edge to Typeproduct.
func (su *StockUpdate) ClearTypeproduct() *StockUpdate {
	su.mutation.ClearTypeproduct()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *StockUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := su.mutation.ProductID(); su.mutation.ProductCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"product\"")
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StockUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StockUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StockUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stock.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Priceproduct(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldPriceproduct,
		})
	}
	if value, ok := su.mutation.AddedPriceproduct(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldPriceproduct,
		})
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldAmount,
		})
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldAmount,
		})
	}
	if value, ok := su.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldTime,
		})
	}
	if su.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stock.ProductTable,
			Columns: []string{stock.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stock.ProductTable,
			Columns: []string{stock.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ZoneproductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ZoneproductTable,
			Columns: []string{stock.ZoneproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: zoneproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ZoneproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ZoneproductTable,
			Columns: []string{stock.ZoneproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: zoneproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TypeproductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.TypeproductTable,
			Columns: []string{stock.TypeproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TypeproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.TypeproductTable,
			Columns: []string{stock.TypeproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StockUpdateOne is the builder for updating a single Stock entity.
type StockUpdateOne struct {
	config
	hooks    []Hook
	mutation *StockMutation
}

// SetPriceproduct sets the Priceproduct field.
func (suo *StockUpdateOne) SetPriceproduct(f float64) *StockUpdateOne {
	suo.mutation.ResetPriceproduct()
	suo.mutation.SetPriceproduct(f)
	return suo
}

// AddPriceproduct adds f to Priceproduct.
func (suo *StockUpdateOne) AddPriceproduct(f float64) *StockUpdateOne {
	suo.mutation.AddPriceproduct(f)
	return suo
}

// SetAmount sets the Amount field.
func (suo *StockUpdateOne) SetAmount(i int) *StockUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(i)
	return suo
}

// AddAmount adds i to Amount.
func (suo *StockUpdateOne) AddAmount(i int) *StockUpdateOne {
	suo.mutation.AddAmount(i)
	return suo
}

// SetTime sets the Time field.
func (suo *StockUpdateOne) SetTime(t time.Time) *StockUpdateOne {
	suo.mutation.SetTime(t)
	return suo
}

// SetProductID sets the product edge to Product by id.
func (suo *StockUpdateOne) SetProductID(id int) *StockUpdateOne {
	suo.mutation.SetProductID(id)
	return suo
}

// SetProduct sets the product edge to Product.
func (suo *StockUpdateOne) SetProduct(p *Product) *StockUpdateOne {
	return suo.SetProductID(p.ID)
}

// SetZoneproductID sets the zoneproduct edge to Zoneproduct by id.
func (suo *StockUpdateOne) SetZoneproductID(id int) *StockUpdateOne {
	suo.mutation.SetZoneproductID(id)
	return suo
}

// SetNillableZoneproductID sets the zoneproduct edge to Zoneproduct by id if the given value is not nil.
func (suo *StockUpdateOne) SetNillableZoneproductID(id *int) *StockUpdateOne {
	if id != nil {
		suo = suo.SetZoneproductID(*id)
	}
	return suo
}

// SetZoneproduct sets the zoneproduct edge to Zoneproduct.
func (suo *StockUpdateOne) SetZoneproduct(z *Zoneproduct) *StockUpdateOne {
	return suo.SetZoneproductID(z.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (suo *StockUpdateOne) SetEmployeeID(id int) *StockUpdateOne {
	suo.mutation.SetEmployeeID(id)
	return suo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (suo *StockUpdateOne) SetNillableEmployeeID(id *int) *StockUpdateOne {
	if id != nil {
		suo = suo.SetEmployeeID(*id)
	}
	return suo
}

// SetEmployee sets the employee edge to Employee.
func (suo *StockUpdateOne) SetEmployee(e *Employee) *StockUpdateOne {
	return suo.SetEmployeeID(e.ID)
}

// SetTypeproductID sets the Typeproduct edge to Typeproduct by id.
func (suo *StockUpdateOne) SetTypeproductID(id int) *StockUpdateOne {
	suo.mutation.SetTypeproductID(id)
	return suo
}

// SetNillableTypeproductID sets the Typeproduct edge to Typeproduct by id if the given value is not nil.
func (suo *StockUpdateOne) SetNillableTypeproductID(id *int) *StockUpdateOne {
	if id != nil {
		suo = suo.SetTypeproductID(*id)
	}
	return suo
}

// SetTypeproduct sets the Typeproduct edge to Typeproduct.
func (suo *StockUpdateOne) SetTypeproduct(t *Typeproduct) *StockUpdateOne {
	return suo.SetTypeproductID(t.ID)
}

// Mutation returns the StockMutation object of the builder.
func (suo *StockUpdateOne) Mutation() *StockMutation {
	return suo.mutation
}

// ClearProduct clears the product edge to Product.
func (suo *StockUpdateOne) ClearProduct() *StockUpdateOne {
	suo.mutation.ClearProduct()
	return suo
}

// ClearZoneproduct clears the zoneproduct edge to Zoneproduct.
func (suo *StockUpdateOne) ClearZoneproduct() *StockUpdateOne {
	suo.mutation.ClearZoneproduct()
	return suo
}

// ClearEmployee clears the employee edge to Employee.
func (suo *StockUpdateOne) ClearEmployee() *StockUpdateOne {
	suo.mutation.ClearEmployee()
	return suo
}

// ClearTypeproduct clears the Typeproduct edge to Typeproduct.
func (suo *StockUpdateOne) ClearTypeproduct() *StockUpdateOne {
	suo.mutation.ClearTypeproduct()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *StockUpdateOne) Save(ctx context.Context) (*Stock, error) {

	if _, ok := suo.mutation.ProductID(); suo.mutation.ProductCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"product\"")
	}

	var (
		err  error
		node *Stock
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StockUpdateOne) SaveX(ctx context.Context) *Stock {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *StockUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StockUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StockUpdateOne) sqlSave(ctx context.Context) (s *Stock, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stock.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Stock.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Priceproduct(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldPriceproduct,
		})
	}
	if value, ok := suo.mutation.AddedPriceproduct(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldPriceproduct,
		})
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldAmount,
		})
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldAmount,
		})
	}
	if value, ok := suo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldTime,
		})
	}
	if suo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stock.ProductTable,
			Columns: []string{stock.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stock.ProductTable,
			Columns: []string{stock.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ZoneproductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ZoneproductTable,
			Columns: []string{stock.ZoneproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: zoneproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ZoneproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ZoneproductTable,
			Columns: []string{stock.ZoneproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: zoneproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TypeproductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.TypeproductTable,
			Columns: []string{stock.TypeproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TypeproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.TypeproductTable,
			Columns: []string{stock.TypeproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Stock{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
