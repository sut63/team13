// Code generated by entc, DO NOT EDIT.

package product

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/tanapon395/playlist-video/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NameProduct applies equality check predicate on the "NameProduct" field. It's identical to NameProductEQ.
func NameProduct(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameProduct), v))
	})
}

// BarcodeProduct applies equality check predicate on the "BarcodeProduct" field. It's identical to BarcodeProductEQ.
func BarcodeProduct(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcodeProduct), v))
	})
}

// MFG applies equality check predicate on the "MFG" field. It's identical to MFGEQ.
func MFG(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMFG), v))
	})
}

// EXP applies equality check predicate on the "EXP" field. It's identical to EXPEQ.
func EXP(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEXP), v))
	})
}

// NameProductEQ applies the EQ predicate on the "NameProduct" field.
func NameProductEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameProduct), v))
	})
}

// NameProductNEQ applies the NEQ predicate on the "NameProduct" field.
func NameProductNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameProduct), v))
	})
}

// NameProductIn applies the In predicate on the "NameProduct" field.
func NameProductIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNameProduct), v...))
	})
}

// NameProductNotIn applies the NotIn predicate on the "NameProduct" field.
func NameProductNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNameProduct), v...))
	})
}

// NameProductGT applies the GT predicate on the "NameProduct" field.
func NameProductGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameProduct), v))
	})
}

// NameProductGTE applies the GTE predicate on the "NameProduct" field.
func NameProductGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameProduct), v))
	})
}

// NameProductLT applies the LT predicate on the "NameProduct" field.
func NameProductLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameProduct), v))
	})
}

// NameProductLTE applies the LTE predicate on the "NameProduct" field.
func NameProductLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameProduct), v))
	})
}

// NameProductContains applies the Contains predicate on the "NameProduct" field.
func NameProductContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameProduct), v))
	})
}

// NameProductHasPrefix applies the HasPrefix predicate on the "NameProduct" field.
func NameProductHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameProduct), v))
	})
}

// NameProductHasSuffix applies the HasSuffix predicate on the "NameProduct" field.
func NameProductHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameProduct), v))
	})
}

// NameProductEqualFold applies the EqualFold predicate on the "NameProduct" field.
func NameProductEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameProduct), v))
	})
}

// NameProductContainsFold applies the ContainsFold predicate on the "NameProduct" field.
func NameProductContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameProduct), v))
	})
}

// BarcodeProductEQ applies the EQ predicate on the "BarcodeProduct" field.
func BarcodeProductEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductNEQ applies the NEQ predicate on the "BarcodeProduct" field.
func BarcodeProductNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductIn applies the In predicate on the "BarcodeProduct" field.
func BarcodeProductIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBarcodeProduct), v...))
	})
}

// BarcodeProductNotIn applies the NotIn predicate on the "BarcodeProduct" field.
func BarcodeProductNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBarcodeProduct), v...))
	})
}

// BarcodeProductGT applies the GT predicate on the "BarcodeProduct" field.
func BarcodeProductGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductGTE applies the GTE predicate on the "BarcodeProduct" field.
func BarcodeProductGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductLT applies the LT predicate on the "BarcodeProduct" field.
func BarcodeProductLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductLTE applies the LTE predicate on the "BarcodeProduct" field.
func BarcodeProductLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductContains applies the Contains predicate on the "BarcodeProduct" field.
func BarcodeProductContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductHasPrefix applies the HasPrefix predicate on the "BarcodeProduct" field.
func BarcodeProductHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductHasSuffix applies the HasSuffix predicate on the "BarcodeProduct" field.
func BarcodeProductHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductEqualFold applies the EqualFold predicate on the "BarcodeProduct" field.
func BarcodeProductEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBarcodeProduct), v))
	})
}

// BarcodeProductContainsFold applies the ContainsFold predicate on the "BarcodeProduct" field.
func BarcodeProductContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBarcodeProduct), v))
	})
}

// MFGEQ applies the EQ predicate on the "MFG" field.
func MFGEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMFG), v))
	})
}

// MFGNEQ applies the NEQ predicate on the "MFG" field.
func MFGNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMFG), v))
	})
}

// MFGIn applies the In predicate on the "MFG" field.
func MFGIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMFG), v...))
	})
}

// MFGNotIn applies the NotIn predicate on the "MFG" field.
func MFGNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMFG), v...))
	})
}

// MFGGT applies the GT predicate on the "MFG" field.
func MFGGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMFG), v))
	})
}

// MFGGTE applies the GTE predicate on the "MFG" field.
func MFGGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMFG), v))
	})
}

// MFGLT applies the LT predicate on the "MFG" field.
func MFGLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMFG), v))
	})
}

// MFGLTE applies the LTE predicate on the "MFG" field.
func MFGLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMFG), v))
	})
}

// MFGContains applies the Contains predicate on the "MFG" field.
func MFGContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMFG), v))
	})
}

// MFGHasPrefix applies the HasPrefix predicate on the "MFG" field.
func MFGHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMFG), v))
	})
}

// MFGHasSuffix applies the HasSuffix predicate on the "MFG" field.
func MFGHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMFG), v))
	})
}

// MFGEqualFold applies the EqualFold predicate on the "MFG" field.
func MFGEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMFG), v))
	})
}

// MFGContainsFold applies the ContainsFold predicate on the "MFG" field.
func MFGContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMFG), v))
	})
}

// EXPEQ applies the EQ predicate on the "EXP" field.
func EXPEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEXP), v))
	})
}

// EXPNEQ applies the NEQ predicate on the "EXP" field.
func EXPNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEXP), v))
	})
}

// EXPIn applies the In predicate on the "EXP" field.
func EXPIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEXP), v...))
	})
}

// EXPNotIn applies the NotIn predicate on the "EXP" field.
func EXPNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEXP), v...))
	})
}

// EXPGT applies the GT predicate on the "EXP" field.
func EXPGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEXP), v))
	})
}

// EXPGTE applies the GTE predicate on the "EXP" field.
func EXPGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEXP), v))
	})
}

// EXPLT applies the LT predicate on the "EXP" field.
func EXPLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEXP), v))
	})
}

// EXPLTE applies the LTE predicate on the "EXP" field.
func EXPLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEXP), v))
	})
}

// EXPContains applies the Contains predicate on the "EXP" field.
func EXPContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEXP), v))
	})
}

// EXPHasPrefix applies the HasPrefix predicate on the "EXP" field.
func EXPHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEXP), v))
	})
}

// EXPHasSuffix applies the HasSuffix predicate on the "EXP" field.
func EXPHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEXP), v))
	})
}

// EXPEqualFold applies the EqualFold predicate on the "EXP" field.
func EXPEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEXP), v))
	})
}

// EXPContainsFold applies the ContainsFold predicate on the "EXP" field.
func EXPContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEXP), v))
	})
}

// HasStockproduct applies the HasEdge predicate on the "stockproduct" edge.
func HasStockproduct() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StockproductTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StockproductTable, StockproductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStockproductWith applies the HasEdge predicate on the "stockproduct" edge with a given conditions (other predicates).
func HasStockproductWith(preds ...predicate.Stock) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StockproductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StockproductTable, StockproductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Orderproduct) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasForproduct applies the HasEdge predicate on the "forproduct" edge.
func HasForproduct() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ForproductTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ForproductTable, ForproductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasForproductWith applies the HasEdge predicate on the "forproduct" edge with a given conditions (other predicates).
func HasForproductWith(preds ...predicate.Promotion) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ForproductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ForproductTable, ForproductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFormproductonline applies the HasEdge predicate on the "formproductonline" edge.
func HasFormproductonline() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FormproductonlineTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FormproductonlineTable, FormproductonlineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormproductonlineWith applies the HasEdge predicate on the "formproductonline" edge with a given conditions (other predicates).
func HasFormproductonlineWith(preds ...predicate.Orderonline) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FormproductonlineInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FormproductonlineTable, FormproductonlineColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		p(s.Not())
	})
}
