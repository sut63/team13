// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team13/app/ent/beginwork"
	"github.com/team13/app/ent/day"
	"github.com/team13/app/ent/employee"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/getoffwork"
	"github.com/team13/app/ent/role"
)

// EmployeeWorkingHours is the model entity for the EmployeeWorkingHours schema.
type EmployeeWorkingHours struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CodeWork holds the value of the "CodeWork" field.
	CodeWork string `json:"CodeWork,omitempty"`
	// IDNumber holds the value of the "IDNumber" field.
	IDNumber string `json:"IDNumber,omitempty"`
	// Wages holds the value of the "Wages" field.
	Wages float64 `json:"Wages,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeWorkingHoursQuery when eager-loading is set.
	Edges                    EmployeeWorkingHoursEdges `json:"edges"`
	begin_work_whenwork      *int
	day_whatday              *int
	employee_whose           *int
	get_off_work_whenendwork *int
	role_todo                *int
}

// EmployeeWorkingHoursEdges holds the relations/edges for other nodes in the graph.
type EmployeeWorkingHoursEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Day holds the value of the day edge.
	Day *Day
	// Beginwork holds the value of the beginwork edge.
	Beginwork *BeginWork
	// Getoffwork holds the value of the getoffwork edge.
	Getoffwork *GetOffWork
	// Role holds the value of the role edge.
	Role *Role
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// DayOrErr returns the Day value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) DayOrErr() (*Day, error) {
	if e.loadedTypes[1] {
		if e.Day == nil {
			// The edge day was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: day.Label}
		}
		return e.Day, nil
	}
	return nil, &NotLoadedError{edge: "day"}
}

// BeginworkOrErr returns the Beginwork value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) BeginworkOrErr() (*BeginWork, error) {
	if e.loadedTypes[2] {
		if e.Beginwork == nil {
			// The edge beginwork was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: beginwork.Label}
		}
		return e.Beginwork, nil
	}
	return nil, &NotLoadedError{edge: "beginwork"}
}

// GetoffworkOrErr returns the Getoffwork value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) GetoffworkOrErr() (*GetOffWork, error) {
	if e.loadedTypes[3] {
		if e.Getoffwork == nil {
			// The edge getoffwork was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: getoffwork.Label}
		}
		return e.Getoffwork, nil
	}
	return nil, &NotLoadedError{edge: "getoffwork"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) RoleOrErr() (*Role, error) {
	if e.loadedTypes[4] {
		if e.Role == nil {
			// The edge role was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeWorkingHours) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // CodeWork
		&sql.NullString{},  // IDNumber
		&sql.NullFloat64{}, // Wages
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*EmployeeWorkingHours) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // begin_work_whenwork
		&sql.NullInt64{}, // day_whatday
		&sql.NullInt64{}, // employee_whose
		&sql.NullInt64{}, // get_off_work_whenendwork
		&sql.NullInt64{}, // role_todo
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeWorkingHours fields.
func (ewh *EmployeeWorkingHours) assignValues(values ...interface{}) error {
	if m, n := len(values), len(employeeworkinghours.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ewh.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CodeWork", values[0])
	} else if value.Valid {
		ewh.CodeWork = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field IDNumber", values[1])
	} else if value.Valid {
		ewh.IDNumber = value.String
	}
	if value, ok := values[2].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field Wages", values[2])
	} else if value.Valid {
		ewh.Wages = value.Float64
	}
	values = values[3:]
	if len(values) == len(employeeworkinghours.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field begin_work_whenwork", value)
		} else if value.Valid {
			ewh.begin_work_whenwork = new(int)
			*ewh.begin_work_whenwork = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field day_whatday", value)
		} else if value.Valid {
			ewh.day_whatday = new(int)
			*ewh.day_whatday = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_whose", value)
		} else if value.Valid {
			ewh.employee_whose = new(int)
			*ewh.employee_whose = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field get_off_work_whenendwork", value)
		} else if value.Valid {
			ewh.get_off_work_whenendwork = new(int)
			*ewh.get_off_work_whenendwork = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field role_todo", value)
		} else if value.Valid {
			ewh.role_todo = new(int)
			*ewh.role_todo = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the employee edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryEmployee() *EmployeeQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryEmployee(ewh)
}

// QueryDay queries the day edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryDay() *DayQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryDay(ewh)
}

// QueryBeginwork queries the beginwork edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryBeginwork() *BeginWorkQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryBeginwork(ewh)
}

// QueryGetoffwork queries the getoffwork edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryGetoffwork() *GetOffWorkQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryGetoffwork(ewh)
}

// QueryRole queries the role edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryRole() *RoleQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryRole(ewh)
}

// Update returns a builder for updating this EmployeeWorkingHours.
// Note that, you need to call EmployeeWorkingHours.Unwrap() before calling this method, if this EmployeeWorkingHours
// was returned from a transaction, and the transaction was committed or rolled back.
func (ewh *EmployeeWorkingHours) Update() *EmployeeWorkingHoursUpdateOne {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).UpdateOne(ewh)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ewh *EmployeeWorkingHours) Unwrap() *EmployeeWorkingHours {
	tx, ok := ewh.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeWorkingHours is not a transactional entity")
	}
	ewh.config.driver = tx.drv
	return ewh
}

// String implements the fmt.Stringer.
func (ewh *EmployeeWorkingHours) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeWorkingHours(")
	builder.WriteString(fmt.Sprintf("id=%v", ewh.ID))
	builder.WriteString(", CodeWork=")
	builder.WriteString(ewh.CodeWork)
	builder.WriteString(", IDNumber=")
	builder.WriteString(ewh.IDNumber)
	builder.WriteString(", Wages=")
	builder.WriteString(fmt.Sprintf("%v", ewh.Wages))
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeWorkingHoursSlice is a parsable slice of EmployeeWorkingHours.
type EmployeeWorkingHoursSlice []*EmployeeWorkingHours

func (ewh EmployeeWorkingHoursSlice) config(cfg config) {
	for _i := range ewh {
		ewh[_i].config = cfg
	}
}
