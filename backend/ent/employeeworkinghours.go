// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team13/app/ent/day"
	"github.com/team13/app/ent/employee"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/role"
	"github.com/team13/app/ent/shift"
)

// EmployeeWorkingHours is the model entity for the EmployeeWorkingHours schema.
type EmployeeWorkingHours struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeWorkingHoursQuery when eager-loading is set.
	Edges          EmployeeWorkingHoursEdges `json:"edges"`
	day_whatday    *int
	employee_whose *int
	role_todo      *int
	shift_when     *int
}

// EmployeeWorkingHoursEdges holds the relations/edges for other nodes in the graph.
type EmployeeWorkingHoursEdges struct {
	// EmployeeWorkingHours holds the value of the EmployeeWorkingHours edge.
	EmployeeWorkingHours *Employee
	// Day holds the value of the day edge.
	Day *Day
	// Shift holds the value of the shift edge.
	Shift *Shift
	// Role holds the value of the role edge.
	Role *Role
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EmployeeWorkingHoursOrErr returns the EmployeeWorkingHours value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) EmployeeWorkingHoursOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.EmployeeWorkingHours == nil {
			// The edge EmployeeWorkingHours was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.EmployeeWorkingHours, nil
	}
	return nil, &NotLoadedError{edge: "EmployeeWorkingHours"}
}

// DayOrErr returns the Day value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) DayOrErr() (*Day, error) {
	if e.loadedTypes[1] {
		if e.Day == nil {
			// The edge day was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: day.Label}
		}
		return e.Day, nil
	}
	return nil, &NotLoadedError{edge: "day"}
}

// ShiftOrErr returns the Shift value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) ShiftOrErr() (*Shift, error) {
	if e.loadedTypes[2] {
		if e.Shift == nil {
			// The edge shift was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shift.Label}
		}
		return e.Shift, nil
	}
	return nil, &NotLoadedError{edge: "shift"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeWorkingHoursEdges) RoleOrErr() (*Role, error) {
	if e.loadedTypes[3] {
		if e.Role == nil {
			// The edge role was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeWorkingHours) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*EmployeeWorkingHours) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // day_whatday
		&sql.NullInt64{}, // employee_whose
		&sql.NullInt64{}, // role_todo
		&sql.NullInt64{}, // shift_when
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeWorkingHours fields.
func (ewh *EmployeeWorkingHours) assignValues(values ...interface{}) error {
	if m, n := len(values), len(employeeworkinghours.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ewh.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(employeeworkinghours.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field day_whatday", value)
		} else if value.Valid {
			ewh.day_whatday = new(int)
			*ewh.day_whatday = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_whose", value)
		} else if value.Valid {
			ewh.employee_whose = new(int)
			*ewh.employee_whose = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field role_todo", value)
		} else if value.Valid {
			ewh.role_todo = new(int)
			*ewh.role_todo = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field shift_when", value)
		} else if value.Valid {
			ewh.shift_when = new(int)
			*ewh.shift_when = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployeeWorkingHours queries the EmployeeWorkingHours edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryEmployeeWorkingHours() *EmployeeQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryEmployeeWorkingHours(ewh)
}

// QueryDay queries the day edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryDay() *DayQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryDay(ewh)
}

// QueryShift queries the shift edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryShift() *ShiftQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryShift(ewh)
}

// QueryRole queries the role edge of the EmployeeWorkingHours.
func (ewh *EmployeeWorkingHours) QueryRole() *RoleQuery {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).QueryRole(ewh)
}

// Update returns a builder for updating this EmployeeWorkingHours.
// Note that, you need to call EmployeeWorkingHours.Unwrap() before calling this method, if this EmployeeWorkingHours
// was returned from a transaction, and the transaction was committed or rolled back.
func (ewh *EmployeeWorkingHours) Update() *EmployeeWorkingHoursUpdateOne {
	return (&EmployeeWorkingHoursClient{config: ewh.config}).UpdateOne(ewh)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ewh *EmployeeWorkingHours) Unwrap() *EmployeeWorkingHours {
	tx, ok := ewh.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeWorkingHours is not a transactional entity")
	}
	ewh.config.driver = tx.drv
	return ewh
}

// String implements the fmt.Stringer.
func (ewh *EmployeeWorkingHours) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeWorkingHours(")
	builder.WriteString(fmt.Sprintf("id=%v", ewh.ID))
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeWorkingHoursSlice is a parsable slice of EmployeeWorkingHours.
type EmployeeWorkingHoursSlice []*EmployeeWorkingHours

func (ewh EmployeeWorkingHoursSlice) config(cfg config) {
	for _i := range ewh {
		ewh[_i].config = cfg
	}
}
