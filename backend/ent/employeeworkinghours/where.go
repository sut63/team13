// Code generated by entc, DO NOT EDIT.

package employeeworkinghours

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team13/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CodeWork applies equality check predicate on the "CodeWork" field. It's identical to CodeWorkEQ.
func CodeWork(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodeWork), v))
	})
}

// IDNumber applies equality check predicate on the "IDNumber" field. It's identical to IDNumberEQ.
func IDNumber(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDNumber), v))
	})
}

// Wages applies equality check predicate on the "Wages" field. It's identical to WagesEQ.
func Wages(v float64) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWages), v))
	})
}

// CodeWorkEQ applies the EQ predicate on the "CodeWork" field.
func CodeWorkEQ(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodeWork), v))
	})
}

// CodeWorkNEQ applies the NEQ predicate on the "CodeWork" field.
func CodeWorkNEQ(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodeWork), v))
	})
}

// CodeWorkIn applies the In predicate on the "CodeWork" field.
func CodeWorkIn(vs ...string) predicate.EmployeeWorkingHours {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCodeWork), v...))
	})
}

// CodeWorkNotIn applies the NotIn predicate on the "CodeWork" field.
func CodeWorkNotIn(vs ...string) predicate.EmployeeWorkingHours {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCodeWork), v...))
	})
}

// CodeWorkGT applies the GT predicate on the "CodeWork" field.
func CodeWorkGT(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodeWork), v))
	})
}

// CodeWorkGTE applies the GTE predicate on the "CodeWork" field.
func CodeWorkGTE(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodeWork), v))
	})
}

// CodeWorkLT applies the LT predicate on the "CodeWork" field.
func CodeWorkLT(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodeWork), v))
	})
}

// CodeWorkLTE applies the LTE predicate on the "CodeWork" field.
func CodeWorkLTE(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodeWork), v))
	})
}

// CodeWorkContains applies the Contains predicate on the "CodeWork" field.
func CodeWorkContains(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodeWork), v))
	})
}

// CodeWorkHasPrefix applies the HasPrefix predicate on the "CodeWork" field.
func CodeWorkHasPrefix(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodeWork), v))
	})
}

// CodeWorkHasSuffix applies the HasSuffix predicate on the "CodeWork" field.
func CodeWorkHasSuffix(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodeWork), v))
	})
}

// CodeWorkEqualFold applies the EqualFold predicate on the "CodeWork" field.
func CodeWorkEqualFold(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodeWork), v))
	})
}

// CodeWorkContainsFold applies the ContainsFold predicate on the "CodeWork" field.
func CodeWorkContainsFold(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodeWork), v))
	})
}

// IDNumberEQ applies the EQ predicate on the "IDNumber" field.
func IDNumberEQ(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDNumber), v))
	})
}

// IDNumberNEQ applies the NEQ predicate on the "IDNumber" field.
func IDNumberNEQ(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIDNumber), v))
	})
}

// IDNumberIn applies the In predicate on the "IDNumber" field.
func IDNumberIn(vs ...string) predicate.EmployeeWorkingHours {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIDNumber), v...))
	})
}

// IDNumberNotIn applies the NotIn predicate on the "IDNumber" field.
func IDNumberNotIn(vs ...string) predicate.EmployeeWorkingHours {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIDNumber), v...))
	})
}

// IDNumberGT applies the GT predicate on the "IDNumber" field.
func IDNumberGT(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIDNumber), v))
	})
}

// IDNumberGTE applies the GTE predicate on the "IDNumber" field.
func IDNumberGTE(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIDNumber), v))
	})
}

// IDNumberLT applies the LT predicate on the "IDNumber" field.
func IDNumberLT(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIDNumber), v))
	})
}

// IDNumberLTE applies the LTE predicate on the "IDNumber" field.
func IDNumberLTE(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIDNumber), v))
	})
}

// IDNumberContains applies the Contains predicate on the "IDNumber" field.
func IDNumberContains(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIDNumber), v))
	})
}

// IDNumberHasPrefix applies the HasPrefix predicate on the "IDNumber" field.
func IDNumberHasPrefix(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIDNumber), v))
	})
}

// IDNumberHasSuffix applies the HasSuffix predicate on the "IDNumber" field.
func IDNumberHasSuffix(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIDNumber), v))
	})
}

// IDNumberEqualFold applies the EqualFold predicate on the "IDNumber" field.
func IDNumberEqualFold(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIDNumber), v))
	})
}

// IDNumberContainsFold applies the ContainsFold predicate on the "IDNumber" field.
func IDNumberContainsFold(v string) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIDNumber), v))
	})
}

// WagesEQ applies the EQ predicate on the "Wages" field.
func WagesEQ(v float64) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWages), v))
	})
}

// WagesNEQ applies the NEQ predicate on the "Wages" field.
func WagesNEQ(v float64) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWages), v))
	})
}

// WagesIn applies the In predicate on the "Wages" field.
func WagesIn(vs ...float64) predicate.EmployeeWorkingHours {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWages), v...))
	})
}

// WagesNotIn applies the NotIn predicate on the "Wages" field.
func WagesNotIn(vs ...float64) predicate.EmployeeWorkingHours {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWages), v...))
	})
}

// WagesGT applies the GT predicate on the "Wages" field.
func WagesGT(v float64) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWages), v))
	})
}

// WagesGTE applies the GTE predicate on the "Wages" field.
func WagesGTE(v float64) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWages), v))
	})
}

// WagesLT applies the LT predicate on the "Wages" field.
func WagesLT(v float64) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWages), v))
	})
}

// WagesLTE applies the LTE predicate on the "Wages" field.
func WagesLTE(v float64) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWages), v))
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDay applies the HasEdge predicate on the "day" edge.
func HasDay() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DayTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DayTable, DayColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDayWith applies the HasEdge predicate on the "day" edge with a given conditions (other predicates).
func HasDayWith(preds ...predicate.Day) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DayInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DayTable, DayColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStartwork applies the HasEdge predicate on the "startwork" edge.
func HasStartwork() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StartworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StartworkTable, StartworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStartworkWith applies the HasEdge predicate on the "startwork" edge with a given conditions (other predicates).
func HasStartworkWith(preds ...predicate.StartWork) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StartworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StartworkTable, StartworkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEndwork applies the HasEdge predicate on the "endwork" edge.
func HasEndwork() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EndworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EndworkTable, EndworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEndworkWith applies the HasEdge predicate on the "endwork" edge with a given conditions (other predicates).
func HasEndworkWith(preds ...predicate.EndWork) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EndworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EndworkTable, EndworkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.EmployeeWorkingHours) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.EmployeeWorkingHours) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmployeeWorkingHours) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		p(s.Not())
	})
}
