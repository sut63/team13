// Code generated by entc, DO NOT EDIT.

package employeeworkinghours

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team13/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// HasEmployeeWorkingHours applies the HasEdge predicate on the "EmployeeWorkingHours" edge.
func HasEmployeeWorkingHours() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeWorkingHoursTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeWorkingHoursTable, EmployeeWorkingHoursColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWorkingHoursWith applies the HasEdge predicate on the "EmployeeWorkingHours" edge with a given conditions (other predicates).
func HasEmployeeWorkingHoursWith(preds ...predicate.Employee) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeWorkingHoursInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeWorkingHoursTable, EmployeeWorkingHoursColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDay applies the HasEdge predicate on the "day" edge.
func HasDay() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DayTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DayTable, DayColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDayWith applies the HasEdge predicate on the "day" edge with a given conditions (other predicates).
func HasDayWith(preds ...predicate.Day) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DayInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DayTable, DayColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShift applies the HasEdge predicate on the "shift" edge.
func HasShift() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShiftTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShiftTable, ShiftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShiftWith applies the HasEdge predicate on the "shift" edge with a given conditions (other predicates).
func HasShiftWith(preds ...predicate.Shift) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShiftInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShiftTable, ShiftColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.EmployeeWorkingHours) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.EmployeeWorkingHours) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmployeeWorkingHours) predicate.EmployeeWorkingHours {
	return predicate.EmployeeWorkingHours(func(s *sql.Selector) {
		p(s.Not())
	})
}
