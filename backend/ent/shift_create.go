// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/employeeworkinghours"
	"github.com/tanapon395/playlist-video/ent/shift"
)

// ShiftCreate is the builder for creating a Shift entity.
type ShiftCreate struct {
	config
	mutation *ShiftMutation
	hooks    []Hook
}

// SetTimeStart sets the TimeStart field.
func (sc *ShiftCreate) SetTimeStart(t time.Time) *ShiftCreate {
	sc.mutation.SetTimeStart(t)
	return sc
}

// SetTimeEnd sets the TimeEnd field.
func (sc *ShiftCreate) SetTimeEnd(t time.Time) *ShiftCreate {
	sc.mutation.SetTimeEnd(t)
	return sc
}

// AddWhenIDs adds the when edge to Employeeworkinghours by ids.
func (sc *ShiftCreate) AddWhenIDs(ids ...int) *ShiftCreate {
	sc.mutation.AddWhenIDs(ids...)
	return sc
}

// AddWhen adds the when edges to Employeeworkinghours.
func (sc *ShiftCreate) AddWhen(e ...*Employeeworkinghours) *ShiftCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddWhenIDs(ids...)
}

// Mutation returns the ShiftMutation object of the builder.
func (sc *ShiftCreate) Mutation() *ShiftMutation {
	return sc.mutation
}

// Save creates the Shift in the database.
func (sc *ShiftCreate) Save(ctx context.Context) (*Shift, error) {
	if _, ok := sc.mutation.TimeStart(); !ok {
		return nil, &ValidationError{Name: "TimeStart", err: errors.New("ent: missing required field \"TimeStart\"")}
	}
	if _, ok := sc.mutation.TimeEnd(); !ok {
		return nil, &ValidationError{Name: "TimeEnd", err: errors.New("ent: missing required field \"TimeEnd\"")}
	}
	var (
		err  error
		node *Shift
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShiftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShiftCreate) SaveX(ctx context.Context) *Shift {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *ShiftCreate) sqlSave(ctx context.Context) (*Shift, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *ShiftCreate) createSpec() (*Shift, *sqlgraph.CreateSpec) {
	var (
		s     = &Shift{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shift.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shift.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.TimeStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shift.FieldTimeStart,
		})
		s.TimeStart = value
	}
	if value, ok := sc.mutation.TimeEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shift.FieldTimeEnd,
		})
		s.TimeEnd = value
	}
	if nodes := sc.mutation.WhenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.WhenTable,
			Columns: []string{shift.WhenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
