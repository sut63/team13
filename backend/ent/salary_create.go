// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/assessment"
	"github.com/tanapon395/playlist-video/ent/employee"
	"github.com/tanapon395/playlist-video/ent/position"
	"github.com/tanapon395/playlist-video/ent/salary"
)

// SalaryCreate is the builder for creating a Salary entity.
type SalaryCreate struct {
	config
	mutation *SalaryMutation
	hooks    []Hook
}

// SetName sets the name field.
func (sc *SalaryCreate) SetName(s string) *SalaryCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetPosition sets the position field.
func (sc *SalaryCreate) SetPosition(s string) *SalaryCreate {
	sc.mutation.SetPosition(s)
	return sc
}

// SetSalary sets the Salary field.
func (sc *SalaryCreate) SetSalary(i int) *SalaryCreate {
	sc.mutation.SetSalary(i)
	return sc
}

// SetAssessmentID sets the assessment edge to Assessment by id.
func (sc *SalaryCreate) SetAssessmentID(id int) *SalaryCreate {
	sc.mutation.SetAssessmentID(id)
	return sc
}

// SetNillableAssessmentID sets the assessment edge to Assessment by id if the given value is not nil.
func (sc *SalaryCreate) SetNillableAssessmentID(id *int) *SalaryCreate {
	if id != nil {
		sc = sc.SetAssessmentID(*id)
	}
	return sc
}

// SetAssessment sets the assessment edge to Assessment.
func (sc *SalaryCreate) SetAssessment(a *Assessment) *SalaryCreate {
	return sc.SetAssessmentID(a.ID)
}

// SetPositionID sets the position edge to Position by id.
func (sc *SalaryCreate) SetPositionID(id int) *SalaryCreate {
	sc.mutation.SetPositionID(id)
	return sc
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (sc *SalaryCreate) SetNillablePositionID(id *int) *SalaryCreate {
	if id != nil {
		sc = sc.SetPositionID(*id)
	}
	return sc
}

// SetPosition sets the position edge to Position.
func (sc *SalaryCreate) SetPosition(p *Position) *SalaryCreate {
	return sc.SetPositionID(p.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (sc *SalaryCreate) SetEmployeeID(id int) *SalaryCreate {
	sc.mutation.SetEmployeeID(id)
	return sc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (sc *SalaryCreate) SetNillableEmployeeID(id *int) *SalaryCreate {
	if id != nil {
		sc = sc.SetEmployeeID(*id)
	}
	return sc
}

// SetEmployee sets the employee edge to Employee.
func (sc *SalaryCreate) SetEmployee(e *Employee) *SalaryCreate {
	return sc.SetEmployeeID(e.ID)
}

// Mutation returns the SalaryMutation object of the builder.
func (sc *SalaryCreate) Mutation() *SalaryMutation {
	return sc.mutation
}

// Save creates the Salary in the database.
func (sc *SalaryCreate) Save(ctx context.Context) (*Salary, error) {
	if _, ok := sc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := salary.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Position(); !ok {
		return nil, &ValidationError{Name: "position", err: errors.New("ent: missing required field \"position\"")}
	}
	if v, ok := sc.mutation.Position(); ok {
		if err := salary.PositionValidator(v); err != nil {
			return nil, &ValidationError{Name: "position", err: fmt.Errorf("ent: validator failed for field \"position\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Salary(); !ok {
		return nil, &ValidationError{Name: "Salary", err: errors.New("ent: missing required field \"Salary\"")}
	}
	if v, ok := sc.mutation.Salary(); ok {
		if err := salary.SalaryValidator(v); err != nil {
			return nil, &ValidationError{Name: "Salary", err: fmt.Errorf("ent: validator failed for field \"Salary\": %w", err)}
		}
	}
	var (
		err  error
		node *Salary
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SalaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SalaryCreate) SaveX(ctx context.Context) *Salary {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SalaryCreate) sqlSave(ctx context.Context) (*Salary, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SalaryCreate) createSpec() (*Salary, *sqlgraph.CreateSpec) {
	var (
		s     = &Salary{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: salary.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salary.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: salary.FieldName,
		})
		s.Name = value
	}
	if value, ok := sc.mutation.Position(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: salary.FieldPosition,
		})
		s.Position = value
	}
	if value, ok := sc.mutation.Salary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: salary.FieldSalary,
		})
		s.Salary = value
	}
	if nodes := sc.mutation.AssessmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.AssessmentTable,
			Columns: []string{salary.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: assessment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.PositionTable,
			Columns: []string{salary.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.EmployeeTable,
			Columns: []string{salary.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
