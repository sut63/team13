// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/startwork"
)

// StartWorkCreate is the builder for creating a StartWork entity.
type StartWorkCreate struct {
	config
	mutation *StartWorkMutation
	hooks    []Hook
}

// SetStartWork sets the StartWork field.
func (swc *StartWorkCreate) SetStartWork(t time.Time) *StartWorkCreate {
	swc.mutation.SetStartWork(t)
	return swc
}

// AddWhenworkIDs adds the whenwork edge to EmployeeWorkingHours by ids.
func (swc *StartWorkCreate) AddWhenworkIDs(ids ...int) *StartWorkCreate {
	swc.mutation.AddWhenworkIDs(ids...)
	return swc
}

// AddWhenwork adds the whenwork edges to EmployeeWorkingHours.
func (swc *StartWorkCreate) AddWhenwork(e ...*EmployeeWorkingHours) *StartWorkCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return swc.AddWhenworkIDs(ids...)
}

// Mutation returns the StartWorkMutation object of the builder.
func (swc *StartWorkCreate) Mutation() *StartWorkMutation {
	return swc.mutation
}

// Save creates the StartWork in the database.
func (swc *StartWorkCreate) Save(ctx context.Context) (*StartWork, error) {
	if _, ok := swc.mutation.StartWork(); !ok {
		return nil, &ValidationError{Name: "StartWork", err: errors.New("ent: missing required field \"StartWork\"")}
	}
	var (
		err  error
		node *StartWork
	)
	if len(swc.hooks) == 0 {
		node, err = swc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StartWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			swc.mutation = mutation
			node, err = swc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(swc.hooks) - 1; i >= 0; i-- {
			mut = swc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, swc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (swc *StartWorkCreate) SaveX(ctx context.Context) *StartWork {
	v, err := swc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (swc *StartWorkCreate) sqlSave(ctx context.Context) (*StartWork, error) {
	sw, _spec := swc.createSpec()
	if err := sqlgraph.CreateNode(ctx, swc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	sw.ID = int(id)
	return sw, nil
}

func (swc *StartWorkCreate) createSpec() (*StartWork, *sqlgraph.CreateSpec) {
	var (
		sw    = &StartWork{config: swc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: startwork.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: startwork.FieldID,
			},
		}
	)
	if value, ok := swc.mutation.StartWork(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: startwork.FieldStartWork,
		})
		sw.StartWork = value
	}
	if nodes := swc.mutation.WhenworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startwork.WhenworkTable,
			Columns: []string{startwork.WhenworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return sw, _spec
}
