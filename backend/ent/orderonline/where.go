// Code generated by entc, DO NOT EDIT.

package orderonline

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team13/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Addedtime applies equality check predicate on the "addedtime" field. It's identical to AddedtimeEQ.
func Addedtime(v time.Time) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStock), v))
	})
}

// Accountnumber applies equality check predicate on the "accountnumber" field. It's identical to AccountnumberEQ.
func Accountnumber(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountnumber), v))
	})
}

// Cvv applies equality check predicate on the "cvv" field. It's identical to CvvEQ.
func Cvv(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCvv), v))
	})
}

// AddedtimeEQ applies the EQ predicate on the "addedtime" field.
func AddedtimeEQ(v time.Time) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeNEQ applies the NEQ predicate on the "addedtime" field.
func AddedtimeNEQ(v time.Time) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeIn applies the In predicate on the "addedtime" field.
func AddedtimeIn(vs ...time.Time) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeNotIn applies the NotIn predicate on the "addedtime" field.
func AddedtimeNotIn(vs ...time.Time) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeGT applies the GT predicate on the "addedtime" field.
func AddedtimeGT(v time.Time) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeGTE applies the GTE predicate on the "addedtime" field.
func AddedtimeGTE(v time.Time) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLT applies the LT predicate on the "addedtime" field.
func AddedtimeLT(v time.Time) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLTE applies the LTE predicate on the "addedtime" field.
func AddedtimeLTE(v time.Time) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedtime), v))
	})
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStock), v))
	})
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStock), v))
	})
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...int) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStock), v...))
	})
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...int) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStock), v...))
	})
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStock), v))
	})
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStock), v))
	})
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStock), v))
	})
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v int) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStock), v))
	})
}

// AccountnumberEQ applies the EQ predicate on the "accountnumber" field.
func AccountnumberEQ(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberNEQ applies the NEQ predicate on the "accountnumber" field.
func AccountnumberNEQ(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberIn applies the In predicate on the "accountnumber" field.
func AccountnumberIn(vs ...string) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountnumber), v...))
	})
}

// AccountnumberNotIn applies the NotIn predicate on the "accountnumber" field.
func AccountnumberNotIn(vs ...string) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountnumber), v...))
	})
}

// AccountnumberGT applies the GT predicate on the "accountnumber" field.
func AccountnumberGT(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberGTE applies the GTE predicate on the "accountnumber" field.
func AccountnumberGTE(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberLT applies the LT predicate on the "accountnumber" field.
func AccountnumberLT(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberLTE applies the LTE predicate on the "accountnumber" field.
func AccountnumberLTE(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberContains applies the Contains predicate on the "accountnumber" field.
func AccountnumberContains(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberHasPrefix applies the HasPrefix predicate on the "accountnumber" field.
func AccountnumberHasPrefix(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberHasSuffix applies the HasSuffix predicate on the "accountnumber" field.
func AccountnumberHasSuffix(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberEqualFold applies the EqualFold predicate on the "accountnumber" field.
func AccountnumberEqualFold(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberContainsFold applies the ContainsFold predicate on the "accountnumber" field.
func AccountnumberContainsFold(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountnumber), v))
	})
}

// CvvEQ applies the EQ predicate on the "cvv" field.
func CvvEQ(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCvv), v))
	})
}

// CvvNEQ applies the NEQ predicate on the "cvv" field.
func CvvNEQ(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCvv), v))
	})
}

// CvvIn applies the In predicate on the "cvv" field.
func CvvIn(vs ...string) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCvv), v...))
	})
}

// CvvNotIn applies the NotIn predicate on the "cvv" field.
func CvvNotIn(vs ...string) predicate.Orderonline {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Orderonline(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCvv), v...))
	})
}

// CvvGT applies the GT predicate on the "cvv" field.
func CvvGT(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCvv), v))
	})
}

// CvvGTE applies the GTE predicate on the "cvv" field.
func CvvGTE(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCvv), v))
	})
}

// CvvLT applies the LT predicate on the "cvv" field.
func CvvLT(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCvv), v))
	})
}

// CvvLTE applies the LTE predicate on the "cvv" field.
func CvvLTE(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCvv), v))
	})
}

// CvvContains applies the Contains predicate on the "cvv" field.
func CvvContains(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCvv), v))
	})
}

// CvvHasPrefix applies the HasPrefix predicate on the "cvv" field.
func CvvHasPrefix(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCvv), v))
	})
}

// CvvHasSuffix applies the HasSuffix predicate on the "cvv" field.
func CvvHasSuffix(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCvv), v))
	})
}

// CvvEqualFold applies the EqualFold predicate on the "cvv" field.
func CvvEqualFold(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCvv), v))
	})
}

// CvvContainsFold applies the ContainsFold predicate on the "cvv" field.
func CvvContainsFold(v string) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCvv), v))
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentchannel applies the HasEdge predicate on the "paymentchannel" edge.
func HasPaymentchannel() predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentchannelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentchannelTable, PaymentchannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentchannelWith applies the HasEdge predicate on the "paymentchannel" edge with a given conditions (other predicates).
func HasPaymentchannelWith(preds ...predicate.Paymentchannel) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentchannelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentchannelTable, PaymentchannelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTypeproduct applies the HasEdge predicate on the "Typeproduct" edge.
func HasTypeproduct() predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypeproductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypeproductTable, TypeproductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypeproductWith applies the HasEdge predicate on the "Typeproduct" edge with a given conditions (other predicates).
func HasTypeproductWith(preds ...predicate.Typeproduct) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypeproductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypeproductTable, TypeproductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Orderonline) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Orderonline) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Orderonline) predicate.Orderonline {
	return predicate.Orderonline(func(s *sql.Selector) {
		p(s.Not())
	})
}
