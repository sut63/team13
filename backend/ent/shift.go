// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team13/app/ent/shift"
)

// Shift is the model entity for the Shift schema.
type Shift struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TimeStart holds the value of the "TimeStart" field.
	TimeStart time.Time `json:"TimeStart,omitempty"`
	// TimeEnd holds the value of the "TimeEnd" field.
	TimeEnd time.Time `json:"TimeEnd,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShiftQuery when eager-loading is set.
	Edges ShiftEdges `json:"edges"`
}

// ShiftEdges holds the relations/edges for other nodes in the graph.
type ShiftEdges struct {
	// When holds the value of the when edge.
	When []*EmployeeWorkingHours
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WhenOrErr returns the When value or an error if the edge
// was not loaded in eager-loading.
func (e ShiftEdges) WhenOrErr() ([]*EmployeeWorkingHours, error) {
	if e.loadedTypes[0] {
		return e.When, nil
	}
	return nil, &NotLoadedError{edge: "when"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shift) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // TimeStart
		&sql.NullTime{},  // TimeEnd
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shift fields.
func (s *Shift) assignValues(values ...interface{}) error {
	if m, n := len(values), len(shift.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field TimeStart", values[0])
	} else if value.Valid {
		s.TimeStart = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field TimeEnd", values[1])
	} else if value.Valid {
		s.TimeEnd = value.Time
	}
	return nil
}

// QueryWhen queries the when edge of the Shift.
func (s *Shift) QueryWhen() *EmployeeWorkingHoursQuery {
	return (&ShiftClient{config: s.config}).QueryWhen(s)
}

// Update returns a builder for updating this Shift.
// Note that, you need to call Shift.Unwrap() before calling this method, if this Shift
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shift) Update() *ShiftUpdateOne {
	return (&ShiftClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Shift) Unwrap() *Shift {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shift is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shift) String() string {
	var builder strings.Builder
	builder.WriteString("Shift(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", TimeStart=")
	builder.WriteString(s.TimeStart.Format(time.ANSIC))
	builder.WriteString(", TimeEnd=")
	builder.WriteString(s.TimeEnd.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Shifts is a parsable slice of Shift.
type Shifts []*Shift

func (s Shifts) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
