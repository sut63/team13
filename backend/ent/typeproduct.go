// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team13/app/ent/typeproduct"
)

// Typeproduct is the model entity for the Typeproduct schema.
type Typeproduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Typeproduct holds the value of the "Typeproduct" field.
	Typeproduct string `json:"Typeproduct,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TypeproductQuery when eager-loading is set.
	Edges TypeproductEdges `json:"edges"`
}

// TypeproductEdges holds the relations/edges for other nodes in the graph.
type TypeproductEdges struct {
	// Typestock holds the value of the typestock edge.
	Typestock []*Stock
	// Typeproducts holds the value of the Typeproducts edge.
	Typeproducts []*Orderproduct
	// FromTypeproductonline holds the value of the fromTypeproductonline edge.
	FromTypeproductonline []*Orderonline
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TypestockOrErr returns the Typestock value or an error if the edge
// was not loaded in eager-loading.
func (e TypeproductEdges) TypestockOrErr() ([]*Stock, error) {
	if e.loadedTypes[0] {
		return e.Typestock, nil
	}
	return nil, &NotLoadedError{edge: "typestock"}
}

// TypeproductsOrErr returns the Typeproducts value or an error if the edge
// was not loaded in eager-loading.
func (e TypeproductEdges) TypeproductsOrErr() ([]*Orderproduct, error) {
	if e.loadedTypes[1] {
		return e.Typeproducts, nil
	}
	return nil, &NotLoadedError{edge: "Typeproducts"}
}

// FromTypeproductonlineOrErr returns the FromTypeproductonline value or an error if the edge
// was not loaded in eager-loading.
func (e TypeproductEdges) FromTypeproductonlineOrErr() ([]*Orderonline, error) {
	if e.loadedTypes[2] {
		return e.FromTypeproductonline, nil
	}
	return nil, &NotLoadedError{edge: "fromTypeproductonline"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Typeproduct) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Typeproduct
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Typeproduct fields.
func (t *Typeproduct) assignValues(values ...interface{}) error {
	if m, n := len(values), len(typeproduct.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Typeproduct", values[0])
	} else if value.Valid {
		t.Typeproduct = value.String
	}
	return nil
}

// QueryTypestock queries the typestock edge of the Typeproduct.
func (t *Typeproduct) QueryTypestock() *StockQuery {
	return (&TypeproductClient{config: t.config}).QueryTypestock(t)
}

// QueryTypeproducts queries the Typeproducts edge of the Typeproduct.
func (t *Typeproduct) QueryTypeproducts() *OrderproductQuery {
	return (&TypeproductClient{config: t.config}).QueryTypeproducts(t)
}

// QueryFromTypeproductonline queries the fromTypeproductonline edge of the Typeproduct.
func (t *Typeproduct) QueryFromTypeproductonline() *OrderonlineQuery {
	return (&TypeproductClient{config: t.config}).QueryFromTypeproductonline(t)
}

// Update returns a builder for updating this Typeproduct.
// Note that, you need to call Typeproduct.Unwrap() before calling this method, if this Typeproduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Typeproduct) Update() *TypeproductUpdateOne {
	return (&TypeproductClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Typeproduct) Unwrap() *Typeproduct {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Typeproduct is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Typeproduct) String() string {
	var builder strings.Builder
	builder.WriteString("Typeproduct(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", Typeproduct=")
	builder.WriteString(t.Typeproduct)
	builder.WriteByte(')')
	return builder.String()
}

// Typeproducts is a parsable slice of Typeproduct.
type Typeproducts []*Typeproduct

func (t Typeproducts) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
