// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/beginwork"
	"github.com/team13/app/ent/employeeworkinghours"
)

// BeginWorkCreate is the builder for creating a BeginWork entity.
type BeginWorkCreate struct {
	config
	mutation *BeginWorkMutation
	hooks    []Hook
}

// SetBeginWork sets the BeginWork field.
func (bwc *BeginWorkCreate) SetBeginWork(t time.Time) *BeginWorkCreate {
	bwc.mutation.SetBeginWork(t)
	return bwc
}

// AddWhenworkIDs adds the whenwork edge to EmployeeWorkingHours by ids.
func (bwc *BeginWorkCreate) AddWhenworkIDs(ids ...int) *BeginWorkCreate {
	bwc.mutation.AddWhenworkIDs(ids...)
	return bwc
}

// AddWhenwork adds the whenwork edges to EmployeeWorkingHours.
func (bwc *BeginWorkCreate) AddWhenwork(e ...*EmployeeWorkingHours) *BeginWorkCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bwc.AddWhenworkIDs(ids...)
}

// Mutation returns the BeginWorkMutation object of the builder.
func (bwc *BeginWorkCreate) Mutation() *BeginWorkMutation {
	return bwc.mutation
}

// Save creates the BeginWork in the database.
func (bwc *BeginWorkCreate) Save(ctx context.Context) (*BeginWork, error) {
	if _, ok := bwc.mutation.BeginWork(); !ok {
		return nil, &ValidationError{Name: "BeginWork", err: errors.New("ent: missing required field \"BeginWork\"")}
	}
	var (
		err  error
		node *BeginWork
	)
	if len(bwc.hooks) == 0 {
		node, err = bwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BeginWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bwc.mutation = mutation
			node, err = bwc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bwc.hooks) - 1; i >= 0; i-- {
			mut = bwc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bwc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bwc *BeginWorkCreate) SaveX(ctx context.Context) *BeginWork {
	v, err := bwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bwc *BeginWorkCreate) sqlSave(ctx context.Context) (*BeginWork, error) {
	bw, _spec := bwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bwc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	bw.ID = int(id)
	return bw, nil
}

func (bwc *BeginWorkCreate) createSpec() (*BeginWork, *sqlgraph.CreateSpec) {
	var (
		bw    = &BeginWork{config: bwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: beginwork.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: beginwork.FieldID,
			},
		}
	)
	if value, ok := bwc.mutation.BeginWork(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: beginwork.FieldBeginWork,
		})
		bw.BeginWork = value
	}
	if nodes := bwc.mutation.WhenworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   beginwork.WhenworkTable,
			Columns: []string{beginwork.WhenworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return bw, _spec
}
