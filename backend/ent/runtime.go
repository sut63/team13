// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/team13/app/ent/assessment"
	"github.com/team13/app/ent/company"
	"github.com/team13/app/ent/customer"
	"github.com/team13/app/ent/employee"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/manager"
	"github.com/team13/app/ent/orderonline"
	"github.com/team13/app/ent/orderproduct"
	"github.com/team13/app/ent/paymentchannel"
	"github.com/team13/app/ent/position"
	"github.com/team13/app/ent/product"
	"github.com/team13/app/ent/promotion"
	"github.com/team13/app/ent/role"
	"github.com/team13/app/ent/salary"
	"github.com/team13/app/ent/schema"
	"github.com/team13/app/ent/stock"
	"github.com/team13/app/ent/typeproduct"
	"github.com/team13/app/ent/zoneproduct"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	assessmentFields := schema.Assessment{}.Fields()
	_ = assessmentFields
	// assessmentDescAssessment is the schema descriptor for assessment field.
	assessmentDescAssessment := assessmentFields[0].Descriptor()
	// assessment.AssessmentValidator is a validator for the "assessment" field. It is called by the builders before save.
	assessment.AssessmentValidator = assessmentDescAssessment.Validators[0].(func(string) error)
	companyFields := schema.Company{}.Fields()
	_ = companyFields
	// companyDescName is the schema descriptor for Name field.
	companyDescName := companyFields[0].Descriptor()
	// company.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	company.NameValidator = companyDescName.Validators[0].(func(string) error)
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescName is the schema descriptor for name field.
	customerDescName := customerFields[0].Descriptor()
	// customer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	customer.NameValidator = customerDescName.Validators[0].(func(string) error)
	// customerDescEmail is the schema descriptor for email field.
	customerDescEmail := customerFields[1].Descriptor()
	// customer.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	customer.EmailValidator = customerDescEmail.Validators[0].(func(string) error)
	// customerDescPassword is the schema descriptor for password field.
	customerDescPassword := customerFields[2].Descriptor()
	// customer.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	customer.PasswordValidator = customerDescPassword.Validators[0].(func(string) error)
	// customerDescAge is the schema descriptor for age field.
	customerDescAge := customerFields[3].Descriptor()
	// customer.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	customer.AgeValidator = customerDescAge.Validators[0].(func(int) error)
	employeeFields := schema.Employee{}.Fields()
	_ = employeeFields
	// employeeDescName is the schema descriptor for name field.
	employeeDescName := employeeFields[0].Descriptor()
	// employee.NameValidator is a validator for the "name" field. It is called by the builders before save.
	employee.NameValidator = employeeDescName.Validators[0].(func(string) error)
	// employeeDescEmail is the schema descriptor for email field.
	employeeDescEmail := employeeFields[1].Descriptor()
	// employee.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	employee.EmailValidator = employeeDescEmail.Validators[0].(func(string) error)
	// employeeDescPassword is the schema descriptor for password field.
	employeeDescPassword := employeeFields[2].Descriptor()
	// employee.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	employee.PasswordValidator = employeeDescPassword.Validators[0].(func(string) error)
	// employeeDescAge is the schema descriptor for age field.
	employeeDescAge := employeeFields[3].Descriptor()
	// employee.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	employee.AgeValidator = employeeDescAge.Validators[0].(func(int) error)
	employeeworkinghoursFields := schema.EmployeeWorkingHours{}.Fields()
	_ = employeeworkinghoursFields
	// employeeworkinghoursDescCodeWork is the schema descriptor for CodeWork field.
	employeeworkinghoursDescCodeWork := employeeworkinghoursFields[0].Descriptor()
	// employeeworkinghours.CodeWorkValidator is a validator for the "CodeWork" field. It is called by the builders before save.
	employeeworkinghours.CodeWorkValidator = employeeworkinghoursDescCodeWork.Validators[0].(func(string) error)
	// employeeworkinghoursDescIDNumber is the schema descriptor for IDNumber field.
	employeeworkinghoursDescIDNumber := employeeworkinghoursFields[1].Descriptor()
	// employeeworkinghours.IDNumberValidator is a validator for the "IDNumber" field. It is called by the builders before save.
	employeeworkinghours.IDNumberValidator = func() func(string) error {
		validators := employeeworkinghoursDescIDNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_IDNumber string) error {
			for _, fn := range fns {
				if err := fn(_IDNumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// employeeworkinghoursDescWages is the schema descriptor for Wages field.
	employeeworkinghoursDescWages := employeeworkinghoursFields[2].Descriptor()
	// employeeworkinghours.WagesValidator is a validator for the "Wages" field. It is called by the builders before save.
	employeeworkinghours.WagesValidator = func() func(float64) error {
		validators := employeeworkinghoursDescWages.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(_Wages float64) error {
			for _, fn := range fns {
				if err := fn(_Wages); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	managerFields := schema.Manager{}.Fields()
	_ = managerFields
	// managerDescName is the schema descriptor for name field.
	managerDescName := managerFields[0].Descriptor()
	// manager.NameValidator is a validator for the "name" field. It is called by the builders before save.
	manager.NameValidator = managerDescName.Validators[0].(func(string) error)
	// managerDescEmail is the schema descriptor for email field.
	managerDescEmail := managerFields[1].Descriptor()
	// manager.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	manager.EmailValidator = managerDescEmail.Validators[0].(func(string) error)
	// managerDescPassword is the schema descriptor for password field.
	managerDescPassword := managerFields[2].Descriptor()
	// manager.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	manager.PasswordValidator = managerDescPassword.Validators[0].(func(string) error)
	orderonlineFields := schema.Orderonline{}.Fields()
	_ = orderonlineFields
	// orderonlineDescStock is the schema descriptor for stock field.
	orderonlineDescStock := orderonlineFields[1].Descriptor()
	// orderonline.StockValidator is a validator for the "stock" field. It is called by the builders before save.
	orderonline.StockValidator = func() func(int) error {
		validators := orderonlineDescStock.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(stock int) error {
			for _, fn := range fns {
				if err := fn(stock); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// orderonlineDescAccountnumber is the schema descriptor for accountnumber field.
	orderonlineDescAccountnumber := orderonlineFields[2].Descriptor()
	// orderonline.AccountnumberValidator is a validator for the "accountnumber" field. It is called by the builders before save.
	orderonline.AccountnumberValidator = func() func(string) error {
		validators := orderonlineDescAccountnumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(accountnumber string) error {
			for _, fn := range fns {
				if err := fn(accountnumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// orderonlineDescCvv is the schema descriptor for cvv field.
	orderonlineDescCvv := orderonlineFields[3].Descriptor()
	// orderonline.CvvValidator is a validator for the "cvv" field. It is called by the builders before save.
	orderonline.CvvValidator = func() func(string) error {
		validators := orderonlineDescCvv.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(cvv string) error {
			for _, fn := range fns {
				if err := fn(cvv); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	orderproductFields := schema.Orderproduct{}.Fields()
	_ = orderproductFields
	// orderproductDescStock is the schema descriptor for stock field.
	orderproductDescStock := orderproductFields[1].Descriptor()
	// orderproduct.StockValidator is a validator for the "stock" field. It is called by the builders before save.
	orderproduct.StockValidator = orderproductDescStock.Validators[0].(func(int) error)
	// orderproductDescShipment is the schema descriptor for shipment field.
	orderproductDescShipment := orderproductFields[2].Descriptor()
	// orderproduct.ShipmentValidator is a validator for the "shipment" field. It is called by the builders before save.
	orderproduct.ShipmentValidator = orderproductDescShipment.Validators[0].(func(string) error)
	// orderproductDescDetail is the schema descriptor for detail field.
	orderproductDescDetail := orderproductFields[3].Descriptor()
	// orderproduct.DetailValidator is a validator for the "detail" field. It is called by the builders before save.
	orderproduct.DetailValidator = orderproductDescDetail.Validators[0].(func(string) error)
	paymentchannelFields := schema.Paymentchannel{}.Fields()
	_ = paymentchannelFields
	// paymentchannelDescBank is the schema descriptor for Bank field.
	paymentchannelDescBank := paymentchannelFields[0].Descriptor()
	// paymentchannel.BankValidator is a validator for the "Bank" field. It is called by the builders before save.
	paymentchannel.BankValidator = paymentchannelDescBank.Validators[0].(func(string) error)
	positionFields := schema.Position{}.Fields()
	_ = positionFields
	// positionDescPosition is the schema descriptor for position field.
	positionDescPosition := positionFields[0].Descriptor()
	// position.PositionValidator is a validator for the "position" field. It is called by the builders before save.
	position.PositionValidator = positionDescPosition.Validators[0].(func(string) error)
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescNameProduct is the schema descriptor for NameProduct field.
	productDescNameProduct := productFields[0].Descriptor()
	// product.NameProductValidator is a validator for the "NameProduct" field. It is called by the builders before save.
	product.NameProductValidator = productDescNameProduct.Validators[0].(func(string) error)
	promotionFields := schema.Promotion{}.Fields()
	_ = promotionFields
	// promotionDescPromotionName is the schema descriptor for PromotionName field.
	promotionDescPromotionName := promotionFields[0].Descriptor()
	// promotion.PromotionNameValidator is a validator for the "PromotionName" field. It is called by the builders before save.
	promotion.PromotionNameValidator = promotionDescPromotionName.Validators[0].(func(string) error)
	// promotionDescPrice is the schema descriptor for Price field.
	promotionDescPrice := promotionFields[3].Descriptor()
	// promotion.PriceValidator is a validator for the "Price" field. It is called by the builders before save.
	promotion.PriceValidator = func() func(float64) error {
		validators := promotionDescPrice.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(_Price float64) error {
			for _, fn := range fns {
				if err := fn(_Price); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescRole is the schema descriptor for Role field.
	roleDescRole := roleFields[0].Descriptor()
	// role.RoleValidator is a validator for the "Role" field. It is called by the builders before save.
	role.RoleValidator = roleDescRole.Validators[0].(func(string) error)
	salaryFields := schema.Salary{}.Fields()
	_ = salaryFields
	// salaryDescSalary is the schema descriptor for Salary field.
	salaryDescSalary := salaryFields[0].Descriptor()
	// salary.SalaryValidator is a validator for the "Salary" field. It is called by the builders before save.
	salary.SalaryValidator = func() func(float64) error {
		validators := salaryDescSalary.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(_Salary float64) error {
			for _, fn := range fns {
				if err := fn(_Salary); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// salaryDescBonus is the schema descriptor for Bonus field.
	salaryDescBonus := salaryFields[1].Descriptor()
	// salary.BonusValidator is a validator for the "Bonus" field. It is called by the builders before save.
	salary.BonusValidator = func() func(float64) error {
		validators := salaryDescBonus.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(_Bonus float64) error {
			for _, fn := range fns {
				if err := fn(_Bonus); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// salaryDescAccountNumber is the schema descriptor for AccountNumber field.
	salaryDescAccountNumber := salaryFields[3].Descriptor()
	// salary.AccountNumberValidator is a validator for the "AccountNumber" field. It is called by the builders before save.
	salary.AccountNumberValidator = func() func(string) error {
		validators := salaryDescAccountNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_AccountNumber string) error {
			for _, fn := range fns {
				if err := fn(_AccountNumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	stockFields := schema.Stock{}.Fields()
	_ = stockFields
	// stockDescIDcardemployee is the schema descriptor for IDcardemployee field.
	stockDescIDcardemployee := stockFields[0].Descriptor()
	// stock.IDcardemployeeValidator is a validator for the "IDcardemployee" field. It is called by the builders before save.
	stock.IDcardemployeeValidator = stockDescIDcardemployee.Validators[0].(func(string) error)
	// stockDescPriceproduct is the schema descriptor for Priceproduct field.
	stockDescPriceproduct := stockFields[1].Descriptor()
	// stock.PriceproductValidator is a validator for the "Priceproduct" field. It is called by the builders before save.
	stock.PriceproductValidator = func() func(float64) error {
		validators := stockDescPriceproduct.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(_Priceproduct float64) error {
			for _, fn := range fns {
				if err := fn(_Priceproduct); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// stockDescAmount is the schema descriptor for Amount field.
	stockDescAmount := stockFields[2].Descriptor()
	// stock.AmountValidator is a validator for the "Amount" field. It is called by the builders before save.
	stock.AmountValidator = func() func(int) error {
		validators := stockDescAmount.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(_Amount int) error {
			for _, fn := range fns {
				if err := fn(_Amount); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	typeproductFields := schema.Typeproduct{}.Fields()
	_ = typeproductFields
	// typeproductDescTypeproduct is the schema descriptor for Typeproduct field.
	typeproductDescTypeproduct := typeproductFields[0].Descriptor()
	// typeproduct.TypeproductValidator is a validator for the "Typeproduct" field. It is called by the builders before save.
	typeproduct.TypeproductValidator = typeproductDescTypeproduct.Validators[0].(func(string) error)
	zoneproductFields := schema.Zoneproduct{}.Fields()
	_ = zoneproductFields
	// zoneproductDescZone is the schema descriptor for Zone field.
	zoneproductDescZone := zoneproductFields[0].Descriptor()
	// zoneproduct.ZoneValidator is a validator for the "Zone" field. It is called by the builders before save.
	zoneproduct.ZoneValidator = zoneproductDescZone.Validators[0].(func(string) error)
}
