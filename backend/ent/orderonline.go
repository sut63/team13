// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team13/app/ent/customer"
	"github.com/team13/app/ent/orderonline"
	"github.com/team13/app/ent/paymentchannel"
	"github.com/team13/app/ent/product"
	"github.com/team13/app/ent/typeproduct"
)

// Orderonline is the model entity for the Orderonline schema.
type Orderonline struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Addedtime holds the value of the "addedtime" field.
	Addedtime time.Time `json:"addedtime,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock int `json:"stock,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderonlineQuery when eager-loading is set.
	Edges                              OrderonlineEdges `json:"edges"`
	customer_id                        *int
	paymentchannel_formpaymentchannel  *int
	product_formproductonline          *int
	typeproduct_from_typeproductonline *int
}

// OrderonlineEdges holds the relations/edges for other nodes in the graph.
type OrderonlineEdges struct {
	// Product holds the value of the product edge.
	Product *Product
	// Paymentchannel holds the value of the paymentchannel edge.
	Paymentchannel *Paymentchannel
	// Typeproduct holds the value of the Typeproduct edge.
	Typeproduct *Typeproduct
	// Customer holds the value of the customer edge.
	Customer *Customer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderonlineEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// PaymentchannelOrErr returns the Paymentchannel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderonlineEdges) PaymentchannelOrErr() (*Paymentchannel, error) {
	if e.loadedTypes[1] {
		if e.Paymentchannel == nil {
			// The edge paymentchannel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: paymentchannel.Label}
		}
		return e.Paymentchannel, nil
	}
	return nil, &NotLoadedError{edge: "paymentchannel"}
}

// TypeproductOrErr returns the Typeproduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderonlineEdges) TypeproductOrErr() (*Typeproduct, error) {
	if e.loadedTypes[2] {
		if e.Typeproduct == nil {
			// The edge Typeproduct was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: typeproduct.Label}
		}
		return e.Typeproduct, nil
	}
	return nil, &NotLoadedError{edge: "Typeproduct"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderonlineEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[3] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Orderonline) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // addedtime
		&sql.NullInt64{}, // stock
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Orderonline) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // customer_id
		&sql.NullInt64{}, // paymentchannel_formpaymentchannel
		&sql.NullInt64{}, // product_formproductonline
		&sql.NullInt64{}, // typeproduct_from_typeproductonline
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Orderonline fields.
func (o *Orderonline) assignValues(values ...interface{}) error {
	if m, n := len(values), len(orderonline.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field addedtime", values[0])
	} else if value.Valid {
		o.Addedtime = value.Time
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field stock", values[1])
	} else if value.Valid {
		o.Stock = int(value.Int64)
	}
	values = values[2:]
	if len(values) == len(orderonline.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_id", value)
		} else if value.Valid {
			o.customer_id = new(int)
			*o.customer_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field paymentchannel_formpaymentchannel", value)
		} else if value.Valid {
			o.paymentchannel_formpaymentchannel = new(int)
			*o.paymentchannel_formpaymentchannel = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field product_formproductonline", value)
		} else if value.Valid {
			o.product_formproductonline = new(int)
			*o.product_formproductonline = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field typeproduct_from_typeproductonline", value)
		} else if value.Valid {
			o.typeproduct_from_typeproductonline = new(int)
			*o.typeproduct_from_typeproductonline = int(value.Int64)
		}
	}
	return nil
}

// QueryProduct queries the product edge of the Orderonline.
func (o *Orderonline) QueryProduct() *ProductQuery {
	return (&OrderonlineClient{config: o.config}).QueryProduct(o)
}

// QueryPaymentchannel queries the paymentchannel edge of the Orderonline.
func (o *Orderonline) QueryPaymentchannel() *PaymentchannelQuery {
	return (&OrderonlineClient{config: o.config}).QueryPaymentchannel(o)
}

// QueryTypeproduct queries the Typeproduct edge of the Orderonline.
func (o *Orderonline) QueryTypeproduct() *TypeproductQuery {
	return (&OrderonlineClient{config: o.config}).QueryTypeproduct(o)
}

// QueryCustomer queries the customer edge of the Orderonline.
func (o *Orderonline) QueryCustomer() *CustomerQuery {
	return (&OrderonlineClient{config: o.config}).QueryCustomer(o)
}

// Update returns a builder for updating this Orderonline.
// Note that, you need to call Orderonline.Unwrap() before calling this method, if this Orderonline
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Orderonline) Update() *OrderonlineUpdateOne {
	return (&OrderonlineClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Orderonline) Unwrap() *Orderonline {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Orderonline is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Orderonline) String() string {
	var builder strings.Builder
	builder.WriteString("Orderonline(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", addedtime=")
	builder.WriteString(o.Addedtime.Format(time.ANSIC))
	builder.WriteString(", stock=")
	builder.WriteString(fmt.Sprintf("%v", o.Stock))
	builder.WriteByte(')')
	return builder.String()
}

// Orderonlines is a parsable slice of Orderonline.
type Orderonlines []*Orderonline

func (o Orderonlines) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
