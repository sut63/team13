// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/beginwork"
	"github.com/team13/app/ent/day"
	"github.com/team13/app/ent/employee"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/getoffwork"
	"github.com/team13/app/ent/predicate"
	"github.com/team13/app/ent/role"
)

// EmployeeWorkingHoursQuery is the builder for querying EmployeeWorkingHours entities.
type EmployeeWorkingHoursQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.EmployeeWorkingHours
	// eager-loading edges.
	withEmployee   *EmployeeQuery
	withDay        *DayQuery
	withBeginwork  *BeginWorkQuery
	withGetoffwork *GetOffWorkQuery
	withRole       *RoleQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (ewhq *EmployeeWorkingHoursQuery) Where(ps ...predicate.EmployeeWorkingHours) *EmployeeWorkingHoursQuery {
	ewhq.predicates = append(ewhq.predicates, ps...)
	return ewhq
}

// Limit adds a limit step to the query.
func (ewhq *EmployeeWorkingHoursQuery) Limit(limit int) *EmployeeWorkingHoursQuery {
	ewhq.limit = &limit
	return ewhq
}

// Offset adds an offset step to the query.
func (ewhq *EmployeeWorkingHoursQuery) Offset(offset int) *EmployeeWorkingHoursQuery {
	ewhq.offset = &offset
	return ewhq
}

// Order adds an order step to the query.
func (ewhq *EmployeeWorkingHoursQuery) Order(o ...OrderFunc) *EmployeeWorkingHoursQuery {
	ewhq.order = append(ewhq.order, o...)
	return ewhq
}

// QueryEmployee chains the current query on the employee edge.
func (ewhq *EmployeeWorkingHoursQuery) QueryEmployee() *EmployeeQuery {
	query := &EmployeeQuery{config: ewhq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ewhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, ewhq.sqlQuery()),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.EmployeeTable, employeeworkinghours.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ewhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDay chains the current query on the day edge.
func (ewhq *EmployeeWorkingHoursQuery) QueryDay() *DayQuery {
	query := &DayQuery{config: ewhq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ewhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, ewhq.sqlQuery()),
			sqlgraph.To(day.Table, day.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.DayTable, employeeworkinghours.DayColumn),
		)
		fromU = sqlgraph.SetNeighbors(ewhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBeginwork chains the current query on the beginwork edge.
func (ewhq *EmployeeWorkingHoursQuery) QueryBeginwork() *BeginWorkQuery {
	query := &BeginWorkQuery{config: ewhq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ewhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, ewhq.sqlQuery()),
			sqlgraph.To(beginwork.Table, beginwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.BeginworkTable, employeeworkinghours.BeginworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(ewhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGetoffwork chains the current query on the getoffwork edge.
func (ewhq *EmployeeWorkingHoursQuery) QueryGetoffwork() *GetOffWorkQuery {
	query := &GetOffWorkQuery{config: ewhq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ewhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, ewhq.sqlQuery()),
			sqlgraph.To(getoffwork.Table, getoffwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.GetoffworkTable, employeeworkinghours.GetoffworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(ewhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRole chains the current query on the role edge.
func (ewhq *EmployeeWorkingHoursQuery) QueryRole() *RoleQuery {
	query := &RoleQuery{config: ewhq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ewhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, ewhq.sqlQuery()),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.RoleTable, employeeworkinghours.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(ewhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmployeeWorkingHours entity in the query. Returns *NotFoundError when no employeeworkinghours was found.
func (ewhq *EmployeeWorkingHoursQuery) First(ctx context.Context) (*EmployeeWorkingHours, error) {
	ewhs, err := ewhq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(ewhs) == 0 {
		return nil, &NotFoundError{employeeworkinghours.Label}
	}
	return ewhs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) FirstX(ctx context.Context) *EmployeeWorkingHours {
	ewh, err := ewhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return ewh
}

// FirstID returns the first EmployeeWorkingHours id in the query. Returns *NotFoundError when no id was found.
func (ewhq *EmployeeWorkingHoursQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ewhq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{employeeworkinghours.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) FirstXID(ctx context.Context) int {
	id, err := ewhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only EmployeeWorkingHours entity in the query, returns an error if not exactly one entity was returned.
func (ewhq *EmployeeWorkingHoursQuery) Only(ctx context.Context) (*EmployeeWorkingHours, error) {
	ewhs, err := ewhq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(ewhs) {
	case 1:
		return ewhs[0], nil
	case 0:
		return nil, &NotFoundError{employeeworkinghours.Label}
	default:
		return nil, &NotSingularError{employeeworkinghours.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) OnlyX(ctx context.Context) *EmployeeWorkingHours {
	ewh, err := ewhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return ewh
}

// OnlyID returns the only EmployeeWorkingHours id in the query, returns an error if not exactly one id was returned.
func (ewhq *EmployeeWorkingHoursQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ewhq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = &NotSingularError{employeeworkinghours.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) OnlyIDX(ctx context.Context) int {
	id, err := ewhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmployeeWorkingHoursSlice.
func (ewhq *EmployeeWorkingHoursQuery) All(ctx context.Context) ([]*EmployeeWorkingHours, error) {
	if err := ewhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ewhq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) AllX(ctx context.Context) []*EmployeeWorkingHours {
	ewhs, err := ewhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return ewhs
}

// IDs executes the query and returns a list of EmployeeWorkingHours ids.
func (ewhq *EmployeeWorkingHoursQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ewhq.Select(employeeworkinghours.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) IDsX(ctx context.Context) []int {
	ids, err := ewhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ewhq *EmployeeWorkingHoursQuery) Count(ctx context.Context) (int, error) {
	if err := ewhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ewhq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) CountX(ctx context.Context) int {
	count, err := ewhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ewhq *EmployeeWorkingHoursQuery) Exist(ctx context.Context) (bool, error) {
	if err := ewhq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ewhq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ewhq *EmployeeWorkingHoursQuery) ExistX(ctx context.Context) bool {
	exist, err := ewhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ewhq *EmployeeWorkingHoursQuery) Clone() *EmployeeWorkingHoursQuery {
	return &EmployeeWorkingHoursQuery{
		config:     ewhq.config,
		limit:      ewhq.limit,
		offset:     ewhq.offset,
		order:      append([]OrderFunc{}, ewhq.order...),
		unique:     append([]string{}, ewhq.unique...),
		predicates: append([]predicate.EmployeeWorkingHours{}, ewhq.predicates...),
		// clone intermediate query.
		sql:  ewhq.sql.Clone(),
		path: ewhq.path,
	}
}

//  WithEmployee tells the query-builder to eager-loads the nodes that are connected to
// the "employee" edge. The optional arguments used to configure the query builder of the edge.
func (ewhq *EmployeeWorkingHoursQuery) WithEmployee(opts ...func(*EmployeeQuery)) *EmployeeWorkingHoursQuery {
	query := &EmployeeQuery{config: ewhq.config}
	for _, opt := range opts {
		opt(query)
	}
	ewhq.withEmployee = query
	return ewhq
}

//  WithDay tells the query-builder to eager-loads the nodes that are connected to
// the "day" edge. The optional arguments used to configure the query builder of the edge.
func (ewhq *EmployeeWorkingHoursQuery) WithDay(opts ...func(*DayQuery)) *EmployeeWorkingHoursQuery {
	query := &DayQuery{config: ewhq.config}
	for _, opt := range opts {
		opt(query)
	}
	ewhq.withDay = query
	return ewhq
}

//  WithBeginwork tells the query-builder to eager-loads the nodes that are connected to
// the "beginwork" edge. The optional arguments used to configure the query builder of the edge.
func (ewhq *EmployeeWorkingHoursQuery) WithBeginwork(opts ...func(*BeginWorkQuery)) *EmployeeWorkingHoursQuery {
	query := &BeginWorkQuery{config: ewhq.config}
	for _, opt := range opts {
		opt(query)
	}
	ewhq.withBeginwork = query
	return ewhq
}

//  WithGetoffwork tells the query-builder to eager-loads the nodes that are connected to
// the "getoffwork" edge. The optional arguments used to configure the query builder of the edge.
func (ewhq *EmployeeWorkingHoursQuery) WithGetoffwork(opts ...func(*GetOffWorkQuery)) *EmployeeWorkingHoursQuery {
	query := &GetOffWorkQuery{config: ewhq.config}
	for _, opt := range opts {
		opt(query)
	}
	ewhq.withGetoffwork = query
	return ewhq
}

//  WithRole tells the query-builder to eager-loads the nodes that are connected to
// the "role" edge. The optional arguments used to configure the query builder of the edge.
func (ewhq *EmployeeWorkingHoursQuery) WithRole(opts ...func(*RoleQuery)) *EmployeeWorkingHoursQuery {
	query := &RoleQuery{config: ewhq.config}
	for _, opt := range opts {
		opt(query)
	}
	ewhq.withRole = query
	return ewhq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CodeWork string `json:"CodeWork,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmployeeWorkingHours.Query().
//		GroupBy(employeeworkinghours.FieldCodeWork).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ewhq *EmployeeWorkingHoursQuery) GroupBy(field string, fields ...string) *EmployeeWorkingHoursGroupBy {
	group := &EmployeeWorkingHoursGroupBy{config: ewhq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ewhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ewhq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CodeWork string `json:"CodeWork,omitempty"`
//	}
//
//	client.EmployeeWorkingHours.Query().
//		Select(employeeworkinghours.FieldCodeWork).
//		Scan(ctx, &v)
//
func (ewhq *EmployeeWorkingHoursQuery) Select(field string, fields ...string) *EmployeeWorkingHoursSelect {
	selector := &EmployeeWorkingHoursSelect{config: ewhq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ewhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ewhq.sqlQuery(), nil
	}
	return selector
}

func (ewhq *EmployeeWorkingHoursQuery) prepareQuery(ctx context.Context) error {
	if ewhq.path != nil {
		prev, err := ewhq.path(ctx)
		if err != nil {
			return err
		}
		ewhq.sql = prev
	}
	return nil
}

func (ewhq *EmployeeWorkingHoursQuery) sqlAll(ctx context.Context) ([]*EmployeeWorkingHours, error) {
	var (
		nodes       = []*EmployeeWorkingHours{}
		withFKs     = ewhq.withFKs
		_spec       = ewhq.querySpec()
		loadedTypes = [5]bool{
			ewhq.withEmployee != nil,
			ewhq.withDay != nil,
			ewhq.withBeginwork != nil,
			ewhq.withGetoffwork != nil,
			ewhq.withRole != nil,
		}
	)
	if ewhq.withEmployee != nil || ewhq.withDay != nil || ewhq.withBeginwork != nil || ewhq.withGetoffwork != nil || ewhq.withRole != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, employeeworkinghours.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &EmployeeWorkingHours{config: ewhq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, ewhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ewhq.withEmployee; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*EmployeeWorkingHours)
		for i := range nodes {
			if fk := nodes[i].employee_whose; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(employee.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "employee_whose" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Employee = n
			}
		}
	}

	if query := ewhq.withDay; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*EmployeeWorkingHours)
		for i := range nodes {
			if fk := nodes[i].day_whatday; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(day.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "day_whatday" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Day = n
			}
		}
	}

	if query := ewhq.withBeginwork; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*EmployeeWorkingHours)
		for i := range nodes {
			if fk := nodes[i].begin_work_whenwork; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(beginwork.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "begin_work_whenwork" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Beginwork = n
			}
		}
	}

	if query := ewhq.withGetoffwork; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*EmployeeWorkingHours)
		for i := range nodes {
			if fk := nodes[i].get_off_work_whenendwork; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(getoffwork.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "get_off_work_whenendwork" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Getoffwork = n
			}
		}
	}

	if query := ewhq.withRole; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*EmployeeWorkingHours)
		for i := range nodes {
			if fk := nodes[i].role_todo; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(role.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_todo" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Role = n
			}
		}
	}

	return nodes, nil
}

func (ewhq *EmployeeWorkingHoursQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ewhq.querySpec()
	return sqlgraph.CountNodes(ctx, ewhq.driver, _spec)
}

func (ewhq *EmployeeWorkingHoursQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ewhq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ewhq *EmployeeWorkingHoursQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employeeworkinghours.Table,
			Columns: employeeworkinghours.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employeeworkinghours.FieldID,
			},
		},
		From:   ewhq.sql,
		Unique: true,
	}
	if ps := ewhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ewhq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ewhq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ewhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ewhq *EmployeeWorkingHoursQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(ewhq.driver.Dialect())
	t1 := builder.Table(employeeworkinghours.Table)
	selector := builder.Select(t1.Columns(employeeworkinghours.Columns...)...).From(t1)
	if ewhq.sql != nil {
		selector = ewhq.sql
		selector.Select(selector.Columns(employeeworkinghours.Columns...)...)
	}
	for _, p := range ewhq.predicates {
		p(selector)
	}
	for _, p := range ewhq.order {
		p(selector)
	}
	if offset := ewhq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ewhq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmployeeWorkingHoursGroupBy is the builder for group-by EmployeeWorkingHours entities.
type EmployeeWorkingHoursGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ewhgb *EmployeeWorkingHoursGroupBy) Aggregate(fns ...AggregateFunc) *EmployeeWorkingHoursGroupBy {
	ewhgb.fns = append(ewhgb.fns, fns...)
	return ewhgb
}

// Scan applies the group-by query and scan the result into the given value.
func (ewhgb *EmployeeWorkingHoursGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ewhgb.path(ctx)
	if err != nil {
		return err
	}
	ewhgb.sql = query
	return ewhgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ewhgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ewhgb.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ewhgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) StringsX(ctx context.Context) []string {
	v, err := ewhgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ewhgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) StringX(ctx context.Context) string {
	v, err := ewhgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ewhgb.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ewhgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) IntsX(ctx context.Context) []int {
	v, err := ewhgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ewhgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) IntX(ctx context.Context) int {
	v, err := ewhgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ewhgb.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ewhgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ewhgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ewhgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ewhgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ewhgb.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ewhgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ewhgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (ewhgb *EmployeeWorkingHoursGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ewhgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ewhgb *EmployeeWorkingHoursGroupBy) BoolX(ctx context.Context) bool {
	v, err := ewhgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ewhgb *EmployeeWorkingHoursGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ewhgb.sqlQuery().Query()
	if err := ewhgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ewhgb *EmployeeWorkingHoursGroupBy) sqlQuery() *sql.Selector {
	selector := ewhgb.sql
	columns := make([]string, 0, len(ewhgb.fields)+len(ewhgb.fns))
	columns = append(columns, ewhgb.fields...)
	for _, fn := range ewhgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ewhgb.fields...)
}

// EmployeeWorkingHoursSelect is the builder for select fields of EmployeeWorkingHours entities.
type EmployeeWorkingHoursSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (ewhs *EmployeeWorkingHoursSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := ewhs.path(ctx)
	if err != nil {
		return err
	}
	ewhs.sql = query
	return ewhs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ewhs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ewhs.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ewhs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) StringsX(ctx context.Context) []string {
	v, err := ewhs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ewhs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) StringX(ctx context.Context) string {
	v, err := ewhs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ewhs.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ewhs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) IntsX(ctx context.Context) []int {
	v, err := ewhs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ewhs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) IntX(ctx context.Context) int {
	v, err := ewhs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ewhs.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ewhs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ewhs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ewhs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) Float64X(ctx context.Context) float64 {
	v, err := ewhs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ewhs.fields) > 1 {
		return nil, errors.New("ent: EmployeeWorkingHoursSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ewhs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) BoolsX(ctx context.Context) []bool {
	v, err := ewhs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (ewhs *EmployeeWorkingHoursSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ewhs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{employeeworkinghours.Label}
	default:
		err = fmt.Errorf("ent: EmployeeWorkingHoursSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ewhs *EmployeeWorkingHoursSelect) BoolX(ctx context.Context) bool {
	v, err := ewhs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ewhs *EmployeeWorkingHoursSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ewhs.sqlQuery().Query()
	if err := ewhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ewhs *EmployeeWorkingHoursSelect) sqlQuery() sql.Querier {
	selector := ewhs.sql
	selector.Select(selector.Columns(ewhs.fields...)...)
	return selector
}
