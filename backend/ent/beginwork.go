// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team13/app/ent/beginwork"
)

// BeginWork is the model entity for the BeginWork schema.
type BeginWork struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BeginWork holds the value of the "BeginWork" field.
	BeginWork time.Time `json:"BeginWork,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BeginWorkQuery when eager-loading is set.
	Edges BeginWorkEdges `json:"edges"`
}

// BeginWorkEdges holds the relations/edges for other nodes in the graph.
type BeginWorkEdges struct {
	// Whenwork holds the value of the whenwork edge.
	Whenwork []*EmployeeWorkingHours
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WhenworkOrErr returns the Whenwork value or an error if the edge
// was not loaded in eager-loading.
func (e BeginWorkEdges) WhenworkOrErr() ([]*EmployeeWorkingHours, error) {
	if e.loadedTypes[0] {
		return e.Whenwork, nil
	}
	return nil, &NotLoadedError{edge: "whenwork"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BeginWork) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // BeginWork
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BeginWork fields.
func (bw *BeginWork) assignValues(values ...interface{}) error {
	if m, n := len(values), len(beginwork.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	bw.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field BeginWork", values[0])
	} else if value.Valid {
		bw.BeginWork = value.Time
	}
	return nil
}

// QueryWhenwork queries the whenwork edge of the BeginWork.
func (bw *BeginWork) QueryWhenwork() *EmployeeWorkingHoursQuery {
	return (&BeginWorkClient{config: bw.config}).QueryWhenwork(bw)
}

// Update returns a builder for updating this BeginWork.
// Note that, you need to call BeginWork.Unwrap() before calling this method, if this BeginWork
// was returned from a transaction, and the transaction was committed or rolled back.
func (bw *BeginWork) Update() *BeginWorkUpdateOne {
	return (&BeginWorkClient{config: bw.config}).UpdateOne(bw)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bw *BeginWork) Unwrap() *BeginWork {
	tx, ok := bw.config.driver.(*txDriver)
	if !ok {
		panic("ent: BeginWork is not a transactional entity")
	}
	bw.config.driver = tx.drv
	return bw
}

// String implements the fmt.Stringer.
func (bw *BeginWork) String() string {
	var builder strings.Builder
	builder.WriteString("BeginWork(")
	builder.WriteString(fmt.Sprintf("id=%v", bw.ID))
	builder.WriteString(", BeginWork=")
	builder.WriteString(bw.BeginWork.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BeginWorks is a parsable slice of BeginWork.
type BeginWorks []*BeginWork

func (bw BeginWorks) config(cfg config) {
	for _i := range bw {
		bw[_i].config = cfg
	}
}
