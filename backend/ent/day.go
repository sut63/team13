// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tanapon395/playlist-video/ent/day"
)

// Day is the model entity for the Day schema.
type Day struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Day holds the value of the "Day" field.
	Day string `json:"Day,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DayQuery when eager-loading is set.
	Edges DayEdges `json:"edges"`
}

// DayEdges holds the relations/edges for other nodes in the graph.
type DayEdges struct {
	// Whatday holds the value of the whatday edge.
	Whatday []*Employeeworkinghours
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WhatdayOrErr returns the Whatday value or an error if the edge
// was not loaded in eager-loading.
func (e DayEdges) WhatdayOrErr() ([]*Employeeworkinghours, error) {
	if e.loadedTypes[0] {
		return e.Whatday, nil
	}
	return nil, &NotLoadedError{edge: "whatday"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Day) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Day
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Day fields.
func (d *Day) assignValues(values ...interface{}) error {
	if m, n := len(values), len(day.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Day", values[0])
	} else if value.Valid {
		d.Day = value.String
	}
	return nil
}

// QueryWhatday queries the whatday edge of the Day.
func (d *Day) QueryWhatday() *EmployeeworkinghoursQuery {
	return (&DayClient{config: d.config}).QueryWhatday(d)
}

// Update returns a builder for updating this Day.
// Note that, you need to call Day.Unwrap() before calling this method, if this Day
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Day) Update() *DayUpdateOne {
	return (&DayClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Day) Unwrap() *Day {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Day is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Day) String() string {
	var builder strings.Builder
	builder.WriteString("Day(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", Day=")
	builder.WriteString(d.Day)
	builder.WriteByte(')')
	return builder.String()
}

// Days is a parsable slice of Day.
type Days []*Day

func (d Days) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
