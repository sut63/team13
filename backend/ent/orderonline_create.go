// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/customer"
	"github.com/team13/app/ent/orderonline"
	"github.com/team13/app/ent/paymentchannel"
	"github.com/team13/app/ent/product"
	"github.com/team13/app/ent/typeproduct"
)

// OrderonlineCreate is the builder for creating a Orderonline entity.
type OrderonlineCreate struct {
	config
	mutation *OrderonlineMutation
	hooks    []Hook
}

// SetAddedtime sets the addedtime field.
func (oc *OrderonlineCreate) SetAddedtime(t time.Time) *OrderonlineCreate {
	oc.mutation.SetAddedtime(t)
	return oc
}

// SetStock sets the stock field.
func (oc *OrderonlineCreate) SetStock(i int) *OrderonlineCreate {
	oc.mutation.SetStock(i)
	return oc
}

// SetProductonID sets the producton edge to Product by id.
func (oc *OrderonlineCreate) SetProductonID(id int) *OrderonlineCreate {
	oc.mutation.SetProductonID(id)
	return oc
}

// SetNillableProductonID sets the producton edge to Product by id if the given value is not nil.
func (oc *OrderonlineCreate) SetNillableProductonID(id *int) *OrderonlineCreate {
	if id != nil {
		oc = oc.SetProductonID(*id)
	}
	return oc
}

// SetProducton sets the producton edge to Product.
func (oc *OrderonlineCreate) SetProducton(p *Product) *OrderonlineCreate {
	return oc.SetProductonID(p.ID)
}

// SetPaymentchannelID sets the paymentchannel edge to Paymentchannel by id.
func (oc *OrderonlineCreate) SetPaymentchannelID(id int) *OrderonlineCreate {
	oc.mutation.SetPaymentchannelID(id)
	return oc
}

// SetNillablePaymentchannelID sets the paymentchannel edge to Paymentchannel by id if the given value is not nil.
func (oc *OrderonlineCreate) SetNillablePaymentchannelID(id *int) *OrderonlineCreate {
	if id != nil {
		oc = oc.SetPaymentchannelID(*id)
	}
	return oc
}

// SetPaymentchannel sets the paymentchannel edge to Paymentchannel.
func (oc *OrderonlineCreate) SetPaymentchannel(p *Paymentchannel) *OrderonlineCreate {
	return oc.SetPaymentchannelID(p.ID)
}

// SetTypeproductID sets the Typeproduct edge to Typeproduct by id.
func (oc *OrderonlineCreate) SetTypeproductID(id int) *OrderonlineCreate {
	oc.mutation.SetTypeproductID(id)
	return oc
}

// SetNillableTypeproductID sets the Typeproduct edge to Typeproduct by id if the given value is not nil.
func (oc *OrderonlineCreate) SetNillableTypeproductID(id *int) *OrderonlineCreate {
	if id != nil {
		oc = oc.SetTypeproductID(*id)
	}
	return oc
}

// SetTypeproduct sets the Typeproduct edge to Typeproduct.
func (oc *OrderonlineCreate) SetTypeproduct(t *Typeproduct) *OrderonlineCreate {
	return oc.SetTypeproductID(t.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (oc *OrderonlineCreate) SetCustomerID(id int) *OrderonlineCreate {
	oc.mutation.SetCustomerID(id)
	return oc
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (oc *OrderonlineCreate) SetNillableCustomerID(id *int) *OrderonlineCreate {
	if id != nil {
		oc = oc.SetCustomerID(*id)
	}
	return oc
}

// SetCustomer sets the customer edge to Customer.
func (oc *OrderonlineCreate) SetCustomer(c *Customer) *OrderonlineCreate {
	return oc.SetCustomerID(c.ID)
}

// Mutation returns the OrderonlineMutation object of the builder.
func (oc *OrderonlineCreate) Mutation() *OrderonlineMutation {
	return oc.mutation
}

// Save creates the Orderonline in the database.
func (oc *OrderonlineCreate) Save(ctx context.Context) (*Orderonline, error) {
	if _, ok := oc.mutation.Addedtime(); !ok {
		return nil, &ValidationError{Name: "addedtime", err: errors.New("ent: missing required field \"addedtime\"")}
	}
	if _, ok := oc.mutation.Stock(); !ok {
		return nil, &ValidationError{Name: "stock", err: errors.New("ent: missing required field \"stock\"")}
	}
	var (
		err  error
		node *Orderonline
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderonlineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderonlineCreate) SaveX(ctx context.Context) *Orderonline {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OrderonlineCreate) sqlSave(ctx context.Context) (*Orderonline, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *OrderonlineCreate) createSpec() (*Orderonline, *sqlgraph.CreateSpec) {
	var (
		o     = &Orderonline{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderonline.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderonline.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Addedtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderonline.FieldAddedtime,
		})
		o.Addedtime = value
	}
	if value, ok := oc.mutation.Stock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderonline.FieldStock,
		})
		o.Stock = value
	}
	if nodes := oc.mutation.ProductonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderonline.ProductonTable,
			Columns: []string{orderonline.ProductonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.PaymentchannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderonline.PaymentchannelTable,
			Columns: []string{orderonline.PaymentchannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymentchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TypeproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderonline.TypeproductTable,
			Columns: []string{orderonline.TypeproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderonline.CustomerTable,
			Columns: []string{orderonline.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return o, _spec
}
