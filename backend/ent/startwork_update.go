// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/predicate"
	"github.com/team13/app/ent/startwork"
)

// StartWorkUpdate is the builder for updating StartWork entities.
type StartWorkUpdate struct {
	config
	hooks      []Hook
	mutation   *StartWorkMutation
	predicates []predicate.StartWork
}

// Where adds a new predicate for the builder.
func (swu *StartWorkUpdate) Where(ps ...predicate.StartWork) *StartWorkUpdate {
	swu.predicates = append(swu.predicates, ps...)
	return swu
}

// SetStartWork sets the StartWork field.
func (swu *StartWorkUpdate) SetStartWork(t time.Time) *StartWorkUpdate {
	swu.mutation.SetStartWork(t)
	return swu
}

// AddWhenworkIDs adds the whenwork edge to EmployeeWorkingHours by ids.
func (swu *StartWorkUpdate) AddWhenworkIDs(ids ...int) *StartWorkUpdate {
	swu.mutation.AddWhenworkIDs(ids...)
	return swu
}

// AddWhenwork adds the whenwork edges to EmployeeWorkingHours.
func (swu *StartWorkUpdate) AddWhenwork(e ...*EmployeeWorkingHours) *StartWorkUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return swu.AddWhenworkIDs(ids...)
}

// Mutation returns the StartWorkMutation object of the builder.
func (swu *StartWorkUpdate) Mutation() *StartWorkMutation {
	return swu.mutation
}

// RemoveWhenworkIDs removes the whenwork edge to EmployeeWorkingHours by ids.
func (swu *StartWorkUpdate) RemoveWhenworkIDs(ids ...int) *StartWorkUpdate {
	swu.mutation.RemoveWhenworkIDs(ids...)
	return swu
}

// RemoveWhenwork removes whenwork edges to EmployeeWorkingHours.
func (swu *StartWorkUpdate) RemoveWhenwork(e ...*EmployeeWorkingHours) *StartWorkUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return swu.RemoveWhenworkIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (swu *StartWorkUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(swu.hooks) == 0 {
		affected, err = swu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StartWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			swu.mutation = mutation
			affected, err = swu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(swu.hooks) - 1; i >= 0; i-- {
			mut = swu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, swu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (swu *StartWorkUpdate) SaveX(ctx context.Context) int {
	affected, err := swu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (swu *StartWorkUpdate) Exec(ctx context.Context) error {
	_, err := swu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swu *StartWorkUpdate) ExecX(ctx context.Context) {
	if err := swu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (swu *StartWorkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   startwork.Table,
			Columns: startwork.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: startwork.FieldID,
			},
		},
	}
	if ps := swu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := swu.mutation.StartWork(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: startwork.FieldStartWork,
		})
	}
	if nodes := swu.mutation.RemovedWhenworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startwork.WhenworkTable,
			Columns: []string{startwork.WhenworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := swu.mutation.WhenworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startwork.WhenworkTable,
			Columns: []string{startwork.WhenworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, swu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{startwork.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StartWorkUpdateOne is the builder for updating a single StartWork entity.
type StartWorkUpdateOne struct {
	config
	hooks    []Hook
	mutation *StartWorkMutation
}

// SetStartWork sets the StartWork field.
func (swuo *StartWorkUpdateOne) SetStartWork(t time.Time) *StartWorkUpdateOne {
	swuo.mutation.SetStartWork(t)
	return swuo
}

// AddWhenworkIDs adds the whenwork edge to EmployeeWorkingHours by ids.
func (swuo *StartWorkUpdateOne) AddWhenworkIDs(ids ...int) *StartWorkUpdateOne {
	swuo.mutation.AddWhenworkIDs(ids...)
	return swuo
}

// AddWhenwork adds the whenwork edges to EmployeeWorkingHours.
func (swuo *StartWorkUpdateOne) AddWhenwork(e ...*EmployeeWorkingHours) *StartWorkUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return swuo.AddWhenworkIDs(ids...)
}

// Mutation returns the StartWorkMutation object of the builder.
func (swuo *StartWorkUpdateOne) Mutation() *StartWorkMutation {
	return swuo.mutation
}

// RemoveWhenworkIDs removes the whenwork edge to EmployeeWorkingHours by ids.
func (swuo *StartWorkUpdateOne) RemoveWhenworkIDs(ids ...int) *StartWorkUpdateOne {
	swuo.mutation.RemoveWhenworkIDs(ids...)
	return swuo
}

// RemoveWhenwork removes whenwork edges to EmployeeWorkingHours.
func (swuo *StartWorkUpdateOne) RemoveWhenwork(e ...*EmployeeWorkingHours) *StartWorkUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return swuo.RemoveWhenworkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (swuo *StartWorkUpdateOne) Save(ctx context.Context) (*StartWork, error) {

	var (
		err  error
		node *StartWork
	)
	if len(swuo.hooks) == 0 {
		node, err = swuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StartWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			swuo.mutation = mutation
			node, err = swuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(swuo.hooks) - 1; i >= 0; i-- {
			mut = swuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, swuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (swuo *StartWorkUpdateOne) SaveX(ctx context.Context) *StartWork {
	sw, err := swuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return sw
}

// Exec executes the query on the entity.
func (swuo *StartWorkUpdateOne) Exec(ctx context.Context) error {
	_, err := swuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swuo *StartWorkUpdateOne) ExecX(ctx context.Context) {
	if err := swuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (swuo *StartWorkUpdateOne) sqlSave(ctx context.Context) (sw *StartWork, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   startwork.Table,
			Columns: startwork.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: startwork.FieldID,
			},
		},
	}
	id, ok := swuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StartWork.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := swuo.mutation.StartWork(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: startwork.FieldStartWork,
		})
	}
	if nodes := swuo.mutation.RemovedWhenworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startwork.WhenworkTable,
			Columns: []string{startwork.WhenworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := swuo.mutation.WhenworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   startwork.WhenworkTable,
			Columns: []string{startwork.WhenworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	sw = &StartWork{config: swuo.config}
	_spec.Assign = sw.assignValues
	_spec.ScanValues = sw.scanValues()
	if err = sqlgraph.UpdateNode(ctx, swuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{startwork.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return sw, nil
}
