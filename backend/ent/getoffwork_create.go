// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/getoffwork"
)

// GetOffWorkCreate is the builder for creating a GetOffWork entity.
type GetOffWorkCreate struct {
	config
	mutation *GetOffWorkMutation
	hooks    []Hook
}

// SetGetOffWork sets the GetOffWork field.
func (gowc *GetOffWorkCreate) SetGetOffWork(t time.Time) *GetOffWorkCreate {
	gowc.mutation.SetGetOffWork(t)
	return gowc
}

// AddWhenendworkIDs adds the whenendwork edge to EmployeeWorkingHours by ids.
func (gowc *GetOffWorkCreate) AddWhenendworkIDs(ids ...int) *GetOffWorkCreate {
	gowc.mutation.AddWhenendworkIDs(ids...)
	return gowc
}

// AddWhenendwork adds the whenendwork edges to EmployeeWorkingHours.
func (gowc *GetOffWorkCreate) AddWhenendwork(e ...*EmployeeWorkingHours) *GetOffWorkCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gowc.AddWhenendworkIDs(ids...)
}

// Mutation returns the GetOffWorkMutation object of the builder.
func (gowc *GetOffWorkCreate) Mutation() *GetOffWorkMutation {
	return gowc.mutation
}

// Save creates the GetOffWork in the database.
func (gowc *GetOffWorkCreate) Save(ctx context.Context) (*GetOffWork, error) {
	if _, ok := gowc.mutation.GetOffWork(); !ok {
		return nil, &ValidationError{Name: "GetOffWork", err: errors.New("ent: missing required field \"GetOffWork\"")}
	}
	var (
		err  error
		node *GetOffWork
	)
	if len(gowc.hooks) == 0 {
		node, err = gowc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GetOffWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gowc.mutation = mutation
			node, err = gowc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gowc.hooks) - 1; i >= 0; i-- {
			mut = gowc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gowc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gowc *GetOffWorkCreate) SaveX(ctx context.Context) *GetOffWork {
	v, err := gowc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gowc *GetOffWorkCreate) sqlSave(ctx context.Context) (*GetOffWork, error) {
	gow, _spec := gowc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gowc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	gow.ID = int(id)
	return gow, nil
}

func (gowc *GetOffWorkCreate) createSpec() (*GetOffWork, *sqlgraph.CreateSpec) {
	var (
		gow   = &GetOffWork{config: gowc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: getoffwork.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: getoffwork.FieldID,
			},
		}
	)
	if value, ok := gowc.mutation.GetOffWork(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: getoffwork.FieldGetOffWork,
		})
		gow.GetOffWork = value
	}
	if nodes := gowc.mutation.WhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   getoffwork.WhenendworkTable,
			Columns: []string{getoffwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return gow, _spec
}
