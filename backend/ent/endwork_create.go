// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/endwork"
)

// EndWorkCreate is the builder for creating a EndWork entity.
type EndWorkCreate struct {
	config
	mutation *EndWorkMutation
	hooks    []Hook
}

// SetEndWork sets the EndWork field.
func (ewc *EndWorkCreate) SetEndWork(t time.Time) *EndWorkCreate {
	ewc.mutation.SetEndWork(t)
	return ewc
}

// AddWhenendworkIDs adds the whenendwork edge to EmployeeWorkingHours by ids.
func (ewc *EndWorkCreate) AddWhenendworkIDs(ids ...int) *EndWorkCreate {
	ewc.mutation.AddWhenendworkIDs(ids...)
	return ewc
}

// AddWhenendwork adds the whenendwork edges to EmployeeWorkingHours.
func (ewc *EndWorkCreate) AddWhenendwork(e ...*EmployeeWorkingHours) *EndWorkCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ewc.AddWhenendworkIDs(ids...)
}

// Mutation returns the EndWorkMutation object of the builder.
func (ewc *EndWorkCreate) Mutation() *EndWorkMutation {
	return ewc.mutation
}

// Save creates the EndWork in the database.
func (ewc *EndWorkCreate) Save(ctx context.Context) (*EndWork, error) {
	if _, ok := ewc.mutation.EndWork(); !ok {
		return nil, &ValidationError{Name: "EndWork", err: errors.New("ent: missing required field \"EndWork\"")}
	}
	var (
		err  error
		node *EndWork
	)
	if len(ewc.hooks) == 0 {
		node, err = ewc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EndWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ewc.mutation = mutation
			node, err = ewc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ewc.hooks) - 1; i >= 0; i-- {
			mut = ewc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ewc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ewc *EndWorkCreate) SaveX(ctx context.Context) *EndWork {
	v, err := ewc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ewc *EndWorkCreate) sqlSave(ctx context.Context) (*EndWork, error) {
	ew, _spec := ewc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ewc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ew.ID = int(id)
	return ew, nil
}

func (ewc *EndWorkCreate) createSpec() (*EndWork, *sqlgraph.CreateSpec) {
	var (
		ew    = &EndWork{config: ewc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: endwork.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: endwork.FieldID,
			},
		}
	)
	if value, ok := ewc.mutation.EndWork(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: endwork.FieldEndWork,
		})
		ew.EndWork = value
	}
	if nodes := ewc.mutation.WhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   endwork.WhenendworkTable,
			Columns: []string{endwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ew, _spec
}
