// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/orderonline"
	"github.com/team13/app/ent/orderproduct"
	"github.com/team13/app/ent/product"
	"github.com/team13/app/ent/promotion"
	"github.com/team13/app/ent/stock"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetNameProduct sets the NameProduct field.
func (pc *ProductCreate) SetNameProduct(s string) *ProductCreate {
	pc.mutation.SetNameProduct(s)
	return pc
}

// SetBarcodeProduct sets the BarcodeProduct field.
func (pc *ProductCreate) SetBarcodeProduct(s string) *ProductCreate {
	pc.mutation.SetBarcodeProduct(s)
	return pc
}

// SetMFG sets the MFG field.
func (pc *ProductCreate) SetMFG(s string) *ProductCreate {
	pc.mutation.SetMFG(s)
	return pc
}

// SetEXP sets the EXP field.
func (pc *ProductCreate) SetEXP(s string) *ProductCreate {
	pc.mutation.SetEXP(s)
	return pc
}

// AddProductIDs adds the products edge to Orderproduct by ids.
func (pc *ProductCreate) AddProductIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductIDs(ids...)
	return pc
}

// AddProducts adds the products edges to Orderproduct.
func (pc *ProductCreate) AddProducts(o ...*Orderproduct) *ProductCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddProductIDs(ids...)
}

// AddStockproductIDs adds the stockproduct edge to Stock by ids.
func (pc *ProductCreate) AddStockproductIDs(ids ...int) *ProductCreate {
	pc.mutation.AddStockproductIDs(ids...)
	return pc
}

// AddStockproduct adds the stockproduct edges to Stock.
func (pc *ProductCreate) AddStockproduct(s ...*Stock) *ProductCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddStockproductIDs(ids...)
}

// SetForproductID sets the forproduct edge to Promotion by id.
func (pc *ProductCreate) SetForproductID(id int) *ProductCreate {
	pc.mutation.SetForproductID(id)
	return pc
}

// SetNillableForproductID sets the forproduct edge to Promotion by id if the given value is not nil.
func (pc *ProductCreate) SetNillableForproductID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetForproductID(*id)
	}
	return pc
}

// SetForproduct sets the forproduct edge to Promotion.
func (pc *ProductCreate) SetForproduct(p *Promotion) *ProductCreate {
	return pc.SetForproductID(p.ID)
}

// AddFormproductonlineIDs adds the formproductonline edge to Orderonline by ids.
func (pc *ProductCreate) AddFormproductonlineIDs(ids ...int) *ProductCreate {
	pc.mutation.AddFormproductonlineIDs(ids...)
	return pc
}

// AddFormproductonline adds the formproductonline edges to Orderonline.
func (pc *ProductCreate) AddFormproductonline(o ...*Orderonline) *ProductCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddFormproductonlineIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	if _, ok := pc.mutation.NameProduct(); !ok {
		return nil, &ValidationError{Name: "NameProduct", err: errors.New("ent: missing required field \"NameProduct\"")}
	}
	if v, ok := pc.mutation.NameProduct(); ok {
		if err := product.NameProductValidator(v); err != nil {
			return nil, &ValidationError{Name: "NameProduct", err: fmt.Errorf("ent: validator failed for field \"NameProduct\": %w", err)}
		}
	}
	if _, ok := pc.mutation.BarcodeProduct(); !ok {
		return nil, &ValidationError{Name: "BarcodeProduct", err: errors.New("ent: missing required field \"BarcodeProduct\"")}
	}
	if _, ok := pc.mutation.MFG(); !ok {
		return nil, &ValidationError{Name: "MFG", err: errors.New("ent: missing required field \"MFG\"")}
	}
	if _, ok := pc.mutation.EXP(); !ok {
		return nil, &ValidationError{Name: "EXP", err: errors.New("ent: missing required field \"EXP\"")}
	}
	var (
		err  error
		node *Product
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		pr    = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.NameProduct(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldNameProduct,
		})
		pr.NameProduct = value
	}
	if value, ok := pc.mutation.BarcodeProduct(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldBarcodeProduct,
		})
		pr.BarcodeProduct = value
	}
	if value, ok := pc.mutation.MFG(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldMFG,
		})
		pr.MFG = value
	}
	if value, ok := pc.mutation.EXP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldEXP,
		})
		pr.EXP = value
	}
	if nodes := pc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductsTable,
			Columns: []string{product.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.StockproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.StockproductTable,
			Columns: []string{product.StockproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ForproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   product.ForproductTable,
			Columns: []string{product.ForproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FormproductonlineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FormproductonlineTable,
			Columns: []string{product.FormproductonlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderonline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
