// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/endwork"
	"github.com/team13/app/ent/predicate"
)

// EndWorkUpdate is the builder for updating EndWork entities.
type EndWorkUpdate struct {
	config
	hooks      []Hook
	mutation   *EndWorkMutation
	predicates []predicate.EndWork
}

// Where adds a new predicate for the builder.
func (ewu *EndWorkUpdate) Where(ps ...predicate.EndWork) *EndWorkUpdate {
	ewu.predicates = append(ewu.predicates, ps...)
	return ewu
}

// SetEndWork sets the EndWork field.
func (ewu *EndWorkUpdate) SetEndWork(t time.Time) *EndWorkUpdate {
	ewu.mutation.SetEndWork(t)
	return ewu
}

// AddWhenendworkIDs adds the whenendwork edge to EmployeeWorkingHours by ids.
func (ewu *EndWorkUpdate) AddWhenendworkIDs(ids ...int) *EndWorkUpdate {
	ewu.mutation.AddWhenendworkIDs(ids...)
	return ewu
}

// AddWhenendwork adds the whenendwork edges to EmployeeWorkingHours.
func (ewu *EndWorkUpdate) AddWhenendwork(e ...*EmployeeWorkingHours) *EndWorkUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ewu.AddWhenendworkIDs(ids...)
}

// Mutation returns the EndWorkMutation object of the builder.
func (ewu *EndWorkUpdate) Mutation() *EndWorkMutation {
	return ewu.mutation
}

// RemoveWhenendworkIDs removes the whenendwork edge to EmployeeWorkingHours by ids.
func (ewu *EndWorkUpdate) RemoveWhenendworkIDs(ids ...int) *EndWorkUpdate {
	ewu.mutation.RemoveWhenendworkIDs(ids...)
	return ewu
}

// RemoveWhenendwork removes whenendwork edges to EmployeeWorkingHours.
func (ewu *EndWorkUpdate) RemoveWhenendwork(e ...*EmployeeWorkingHours) *EndWorkUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ewu.RemoveWhenendworkIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ewu *EndWorkUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ewu.hooks) == 0 {
		affected, err = ewu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EndWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ewu.mutation = mutation
			affected, err = ewu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ewu.hooks) - 1; i >= 0; i-- {
			mut = ewu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ewu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ewu *EndWorkUpdate) SaveX(ctx context.Context) int {
	affected, err := ewu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ewu *EndWorkUpdate) Exec(ctx context.Context) error {
	_, err := ewu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ewu *EndWorkUpdate) ExecX(ctx context.Context) {
	if err := ewu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ewu *EndWorkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endwork.Table,
			Columns: endwork.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: endwork.FieldID,
			},
		},
	}
	if ps := ewu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ewu.mutation.EndWork(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: endwork.FieldEndWork,
		})
	}
	if nodes := ewu.mutation.RemovedWhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   endwork.WhenendworkTable,
			Columns: []string{endwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ewu.mutation.WhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   endwork.WhenendworkTable,
			Columns: []string{endwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ewu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endwork.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EndWorkUpdateOne is the builder for updating a single EndWork entity.
type EndWorkUpdateOne struct {
	config
	hooks    []Hook
	mutation *EndWorkMutation
}

// SetEndWork sets the EndWork field.
func (ewuo *EndWorkUpdateOne) SetEndWork(t time.Time) *EndWorkUpdateOne {
	ewuo.mutation.SetEndWork(t)
	return ewuo
}

// AddWhenendworkIDs adds the whenendwork edge to EmployeeWorkingHours by ids.
func (ewuo *EndWorkUpdateOne) AddWhenendworkIDs(ids ...int) *EndWorkUpdateOne {
	ewuo.mutation.AddWhenendworkIDs(ids...)
	return ewuo
}

// AddWhenendwork adds the whenendwork edges to EmployeeWorkingHours.
func (ewuo *EndWorkUpdateOne) AddWhenendwork(e ...*EmployeeWorkingHours) *EndWorkUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ewuo.AddWhenendworkIDs(ids...)
}

// Mutation returns the EndWorkMutation object of the builder.
func (ewuo *EndWorkUpdateOne) Mutation() *EndWorkMutation {
	return ewuo.mutation
}

// RemoveWhenendworkIDs removes the whenendwork edge to EmployeeWorkingHours by ids.
func (ewuo *EndWorkUpdateOne) RemoveWhenendworkIDs(ids ...int) *EndWorkUpdateOne {
	ewuo.mutation.RemoveWhenendworkIDs(ids...)
	return ewuo
}

// RemoveWhenendwork removes whenendwork edges to EmployeeWorkingHours.
func (ewuo *EndWorkUpdateOne) RemoveWhenendwork(e ...*EmployeeWorkingHours) *EndWorkUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ewuo.RemoveWhenendworkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ewuo *EndWorkUpdateOne) Save(ctx context.Context) (*EndWork, error) {

	var (
		err  error
		node *EndWork
	)
	if len(ewuo.hooks) == 0 {
		node, err = ewuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EndWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ewuo.mutation = mutation
			node, err = ewuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ewuo.hooks) - 1; i >= 0; i-- {
			mut = ewuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ewuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ewuo *EndWorkUpdateOne) SaveX(ctx context.Context) *EndWork {
	ew, err := ewuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ew
}

// Exec executes the query on the entity.
func (ewuo *EndWorkUpdateOne) Exec(ctx context.Context) error {
	_, err := ewuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ewuo *EndWorkUpdateOne) ExecX(ctx context.Context) {
	if err := ewuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ewuo *EndWorkUpdateOne) sqlSave(ctx context.Context) (ew *EndWork, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endwork.Table,
			Columns: endwork.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: endwork.FieldID,
			},
		},
	}
	id, ok := ewuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EndWork.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ewuo.mutation.EndWork(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: endwork.FieldEndWork,
		})
	}
	if nodes := ewuo.mutation.RemovedWhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   endwork.WhenendworkTable,
			Columns: []string{endwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ewuo.mutation.WhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   endwork.WhenendworkTable,
			Columns: []string{endwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ew = &EndWork{config: ewuo.config}
	_spec.Assign = ew.assignValues
	_spec.ScanValues = ew.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ewuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endwork.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ew, nil
}
