// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team13/app/ent/migrate"

	"github.com/team13/app/ent/assessment"
	"github.com/team13/app/ent/company"
	"github.com/team13/app/ent/customer"
	"github.com/team13/app/ent/day"
	"github.com/team13/app/ent/discount"
	"github.com/team13/app/ent/employee"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/giveaway"
	"github.com/team13/app/ent/manager"
	"github.com/team13/app/ent/orderonline"
	"github.com/team13/app/ent/orderproduct"
	"github.com/team13/app/ent/paymentchannel"
	"github.com/team13/app/ent/position"
	"github.com/team13/app/ent/product"
	"github.com/team13/app/ent/promotion"
	"github.com/team13/app/ent/role"
	"github.com/team13/app/ent/salary"
	"github.com/team13/app/ent/shift"
	"github.com/team13/app/ent/stock"
	"github.com/team13/app/ent/typeproduct"
	"github.com/team13/app/ent/zoneproduct"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Assessment is the client for interacting with the Assessment builders.
	Assessment *AssessmentClient
	// Company is the client for interacting with the Company builders.
	Company *CompanyClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Day is the client for interacting with the Day builders.
	Day *DayClient
	// Discount is the client for interacting with the Discount builders.
	Discount *DiscountClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// EmployeeWorkingHours is the client for interacting with the EmployeeWorkingHours builders.
	EmployeeWorkingHours *EmployeeWorkingHoursClient
	// Giveaway is the client for interacting with the Giveaway builders.
	Giveaway *GiveawayClient
	// Manager is the client for interacting with the Manager builders.
	Manager *ManagerClient
	// Orderonline is the client for interacting with the Orderonline builders.
	Orderonline *OrderonlineClient
	// Orderproduct is the client for interacting with the Orderproduct builders.
	Orderproduct *OrderproductClient
	// Paymentchannel is the client for interacting with the Paymentchannel builders.
	Paymentchannel *PaymentchannelClient
	// Position is the client for interacting with the Position builders.
	Position *PositionClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Promotion is the client for interacting with the Promotion builders.
	Promotion *PromotionClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Salary is the client for interacting with the Salary builders.
	Salary *SalaryClient
	// Shift is the client for interacting with the Shift builders.
	Shift *ShiftClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// Typeproduct is the client for interacting with the Typeproduct builders.
	Typeproduct *TypeproductClient
	// Zoneproduct is the client for interacting with the Zoneproduct builders.
	Zoneproduct *ZoneproductClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Assessment = NewAssessmentClient(c.config)
	c.Company = NewCompanyClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Day = NewDayClient(c.config)
	c.Discount = NewDiscountClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.EmployeeWorkingHours = NewEmployeeWorkingHoursClient(c.config)
	c.Giveaway = NewGiveawayClient(c.config)
	c.Manager = NewManagerClient(c.config)
	c.Orderonline = NewOrderonlineClient(c.config)
	c.Orderproduct = NewOrderproductClient(c.config)
	c.Paymentchannel = NewPaymentchannelClient(c.config)
	c.Position = NewPositionClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Promotion = NewPromotionClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Salary = NewSalaryClient(c.config)
	c.Shift = NewShiftClient(c.config)
	c.Stock = NewStockClient(c.config)
	c.Typeproduct = NewTypeproductClient(c.config)
	c.Zoneproduct = NewZoneproductClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Assessment:           NewAssessmentClient(cfg),
		Company:              NewCompanyClient(cfg),
		Customer:             NewCustomerClient(cfg),
		Day:                  NewDayClient(cfg),
		Discount:             NewDiscountClient(cfg),
		Employee:             NewEmployeeClient(cfg),
		EmployeeWorkingHours: NewEmployeeWorkingHoursClient(cfg),
		Giveaway:             NewGiveawayClient(cfg),
		Manager:              NewManagerClient(cfg),
		Orderonline:          NewOrderonlineClient(cfg),
		Orderproduct:         NewOrderproductClient(cfg),
		Paymentchannel:       NewPaymentchannelClient(cfg),
		Position:             NewPositionClient(cfg),
		Product:              NewProductClient(cfg),
		Promotion:            NewPromotionClient(cfg),
		Role:                 NewRoleClient(cfg),
		Salary:               NewSalaryClient(cfg),
		Shift:                NewShiftClient(cfg),
		Stock:                NewStockClient(cfg),
		Typeproduct:          NewTypeproductClient(cfg),
		Zoneproduct:          NewZoneproductClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:               cfg,
		Assessment:           NewAssessmentClient(cfg),
		Company:              NewCompanyClient(cfg),
		Customer:             NewCustomerClient(cfg),
		Day:                  NewDayClient(cfg),
		Discount:             NewDiscountClient(cfg),
		Employee:             NewEmployeeClient(cfg),
		EmployeeWorkingHours: NewEmployeeWorkingHoursClient(cfg),
		Giveaway:             NewGiveawayClient(cfg),
		Manager:              NewManagerClient(cfg),
		Orderonline:          NewOrderonlineClient(cfg),
		Orderproduct:         NewOrderproductClient(cfg),
		Paymentchannel:       NewPaymentchannelClient(cfg),
		Position:             NewPositionClient(cfg),
		Product:              NewProductClient(cfg),
		Promotion:            NewPromotionClient(cfg),
		Role:                 NewRoleClient(cfg),
		Salary:               NewSalaryClient(cfg),
		Shift:                NewShiftClient(cfg),
		Stock:                NewStockClient(cfg),
		Typeproduct:          NewTypeproductClient(cfg),
		Zoneproduct:          NewZoneproductClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Assessment.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Assessment.Use(hooks...)
	c.Company.Use(hooks...)
	c.Customer.Use(hooks...)
	c.Day.Use(hooks...)
	c.Discount.Use(hooks...)
	c.Employee.Use(hooks...)
	c.EmployeeWorkingHours.Use(hooks...)
	c.Giveaway.Use(hooks...)
	c.Manager.Use(hooks...)
	c.Orderonline.Use(hooks...)
	c.Orderproduct.Use(hooks...)
	c.Paymentchannel.Use(hooks...)
	c.Position.Use(hooks...)
	c.Product.Use(hooks...)
	c.Promotion.Use(hooks...)
	c.Role.Use(hooks...)
	c.Salary.Use(hooks...)
	c.Shift.Use(hooks...)
	c.Stock.Use(hooks...)
	c.Typeproduct.Use(hooks...)
	c.Zoneproduct.Use(hooks...)
}

// AssessmentClient is a client for the Assessment schema.
type AssessmentClient struct {
	config
}

// NewAssessmentClient returns a client for the Assessment from the given config.
func NewAssessmentClient(c config) *AssessmentClient {
	return &AssessmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assessment.Hooks(f(g(h())))`.
func (c *AssessmentClient) Use(hooks ...Hook) {
	c.hooks.Assessment = append(c.hooks.Assessment, hooks...)
}

// Create returns a create builder for Assessment.
func (c *AssessmentClient) Create() *AssessmentCreate {
	mutation := newAssessmentMutation(c.config, OpCreate)
	return &AssessmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Assessment.
func (c *AssessmentClient) Update() *AssessmentUpdate {
	mutation := newAssessmentMutation(c.config, OpUpdate)
	return &AssessmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssessmentClient) UpdateOne(a *Assessment) *AssessmentUpdateOne {
	mutation := newAssessmentMutation(c.config, OpUpdateOne, withAssessment(a))
	return &AssessmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssessmentClient) UpdateOneID(id int) *AssessmentUpdateOne {
	mutation := newAssessmentMutation(c.config, OpUpdateOne, withAssessmentID(id))
	return &AssessmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Assessment.
func (c *AssessmentClient) Delete() *AssessmentDelete {
	mutation := newAssessmentMutation(c.config, OpDelete)
	return &AssessmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AssessmentClient) DeleteOne(a *Assessment) *AssessmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AssessmentClient) DeleteOneID(id int) *AssessmentDeleteOne {
	builder := c.Delete().Where(assessment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssessmentDeleteOne{builder}
}

// Create returns a query builder for Assessment.
func (c *AssessmentClient) Query() *AssessmentQuery {
	return &AssessmentQuery{config: c.config}
}

// Get returns a Assessment entity by its id.
func (c *AssessmentClient) Get(ctx context.Context, id int) (*Assessment, error) {
	return c.Query().Where(assessment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssessmentClient) GetX(ctx context.Context, id int) *Assessment {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryFormassessment queries the formassessment edge of a Assessment.
func (c *AssessmentClient) QueryFormassessment(a *Assessment) *SalaryQuery {
	query := &SalaryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, id),
			sqlgraph.To(salary.Table, salary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assessment.FormassessmentTable, assessment.FormassessmentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssessmentClient) Hooks() []Hook {
	return c.hooks.Assessment
}

// CompanyClient is a client for the Company schema.
type CompanyClient struct {
	config
}

// NewCompanyClient returns a client for the Company from the given config.
func NewCompanyClient(c config) *CompanyClient {
	return &CompanyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `company.Hooks(f(g(h())))`.
func (c *CompanyClient) Use(hooks ...Hook) {
	c.hooks.Company = append(c.hooks.Company, hooks...)
}

// Create returns a create builder for Company.
func (c *CompanyClient) Create() *CompanyCreate {
	mutation := newCompanyMutation(c.config, OpCreate)
	return &CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Company.
func (c *CompanyClient) Update() *CompanyUpdate {
	mutation := newCompanyMutation(c.config, OpUpdate)
	return &CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyClient) UpdateOne(co *Company) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompany(co))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyClient) UpdateOneID(id int) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompanyID(id))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Company.
func (c *CompanyClient) Delete() *CompanyDelete {
	mutation := newCompanyMutation(c.config, OpDelete)
	return &CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CompanyClient) DeleteOne(co *Company) *CompanyDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CompanyClient) DeleteOneID(id int) *CompanyDeleteOne {
	builder := c.Delete().Where(company.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDeleteOne{builder}
}

// Create returns a query builder for Company.
func (c *CompanyClient) Query() *CompanyQuery {
	return &CompanyQuery{config: c.config}
}

// Get returns a Company entity by its id.
func (c *CompanyClient) Get(ctx context.Context, id int) (*Company, error) {
	return c.Query().Where(company.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyClient) GetX(ctx context.Context, id int) *Company {
	co, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return co
}

// QueryCompanys queries the companys edge of a Company.
func (c *CompanyClient) QueryCompanys(co *Company) *OrderproductQuery {
	query := &OrderproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(orderproduct.Table, orderproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.CompanysTable, company.CompanysColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyClient) Hooks() []Hook {
	return c.hooks.Company
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Create returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{config: c.config}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	cu, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cu
}

// QueryFormcustomer queries the formcustomer edge of a Customer.
func (c *CustomerClient) QueryFormcustomer(cu *Customer) *OrderonlineQuery {
	query := &OrderonlineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(orderonline.Table, orderonline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.FormcustomerTable, customer.FormcustomerColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// DayClient is a client for the Day schema.
type DayClient struct {
	config
}

// NewDayClient returns a client for the Day from the given config.
func NewDayClient(c config) *DayClient {
	return &DayClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `day.Hooks(f(g(h())))`.
func (c *DayClient) Use(hooks ...Hook) {
	c.hooks.Day = append(c.hooks.Day, hooks...)
}

// Create returns a create builder for Day.
func (c *DayClient) Create() *DayCreate {
	mutation := newDayMutation(c.config, OpCreate)
	return &DayCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Day.
func (c *DayClient) Update() *DayUpdate {
	mutation := newDayMutation(c.config, OpUpdate)
	return &DayUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DayClient) UpdateOne(d *Day) *DayUpdateOne {
	mutation := newDayMutation(c.config, OpUpdateOne, withDay(d))
	return &DayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DayClient) UpdateOneID(id int) *DayUpdateOne {
	mutation := newDayMutation(c.config, OpUpdateOne, withDayID(id))
	return &DayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Day.
func (c *DayClient) Delete() *DayDelete {
	mutation := newDayMutation(c.config, OpDelete)
	return &DayDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DayClient) DeleteOne(d *Day) *DayDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DayClient) DeleteOneID(id int) *DayDeleteOne {
	builder := c.Delete().Where(day.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DayDeleteOne{builder}
}

// Create returns a query builder for Day.
func (c *DayClient) Query() *DayQuery {
	return &DayQuery{config: c.config}
}

// Get returns a Day entity by its id.
func (c *DayClient) Get(ctx context.Context, id int) (*Day, error) {
	return c.Query().Where(day.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DayClient) GetX(ctx context.Context, id int) *Day {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryWhatday queries the whatday edge of a Day.
func (c *DayClient) QueryWhatday(d *Day) *EmployeeWorkingHoursQuery {
	query := &EmployeeWorkingHoursQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(day.Table, day.FieldID, id),
			sqlgraph.To(employeeworkinghours.Table, employeeworkinghours.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, day.WhatdayTable, day.WhatdayColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DayClient) Hooks() []Hook {
	return c.hooks.Day
}

// DiscountClient is a client for the Discount schema.
type DiscountClient struct {
	config
}

// NewDiscountClient returns a client for the Discount from the given config.
func NewDiscountClient(c config) *DiscountClient {
	return &DiscountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discount.Hooks(f(g(h())))`.
func (c *DiscountClient) Use(hooks ...Hook) {
	c.hooks.Discount = append(c.hooks.Discount, hooks...)
}

// Create returns a create builder for Discount.
func (c *DiscountClient) Create() *DiscountCreate {
	mutation := newDiscountMutation(c.config, OpCreate)
	return &DiscountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Discount.
func (c *DiscountClient) Update() *DiscountUpdate {
	mutation := newDiscountMutation(c.config, OpUpdate)
	return &DiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscountClient) UpdateOne(d *Discount) *DiscountUpdateOne {
	mutation := newDiscountMutation(c.config, OpUpdateOne, withDiscount(d))
	return &DiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscountClient) UpdateOneID(id int) *DiscountUpdateOne {
	mutation := newDiscountMutation(c.config, OpUpdateOne, withDiscountID(id))
	return &DiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Discount.
func (c *DiscountClient) Delete() *DiscountDelete {
	mutation := newDiscountMutation(c.config, OpDelete)
	return &DiscountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiscountClient) DeleteOne(d *Discount) *DiscountDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiscountClient) DeleteOneID(id int) *DiscountDeleteOne {
	builder := c.Delete().Where(discount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscountDeleteOne{builder}
}

// Create returns a query builder for Discount.
func (c *DiscountClient) Query() *DiscountQuery {
	return &DiscountQuery{config: c.config}
}

// Get returns a Discount entity by its id.
func (c *DiscountClient) Get(ctx context.Context, id int) (*Discount, error) {
	return c.Query().Where(discount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscountClient) GetX(ctx context.Context, id int) *Discount {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryFordiscount queries the fordiscount edge of a Discount.
func (c *DiscountClient) QueryFordiscount(d *Discount) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discount.Table, discount.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discount.FordiscountTable, discount.FordiscountColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscountClient) Hooks() []Hook {
	return c.hooks.Discount
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryWhose queries the whose edge of a Employee.
func (c *EmployeeClient) QueryWhose(e *Employee) *EmployeeWorkingHoursQuery {
	query := &EmployeeWorkingHoursQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(employeeworkinghours.Table, employeeworkinghours.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.WhoseTable, employee.WhoseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployeestock queries the employeestock edge of a Employee.
func (c *EmployeeClient) QueryEmployeestock(e *Employee) *StockQuery {
	query := &StockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EmployeestockTable, employee.EmployeestockColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFormemployee queries the formemployee edge of a Employee.
func (c *EmployeeClient) QueryFormemployee(e *Employee) *SalaryQuery {
	query := &SalaryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(salary.Table, salary.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, employee.FormemployeeTable, employee.FormemployeeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// EmployeeWorkingHoursClient is a client for the EmployeeWorkingHours schema.
type EmployeeWorkingHoursClient struct {
	config
}

// NewEmployeeWorkingHoursClient returns a client for the EmployeeWorkingHours from the given config.
func NewEmployeeWorkingHoursClient(c config) *EmployeeWorkingHoursClient {
	return &EmployeeWorkingHoursClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeeworkinghours.Hooks(f(g(h())))`.
func (c *EmployeeWorkingHoursClient) Use(hooks ...Hook) {
	c.hooks.EmployeeWorkingHours = append(c.hooks.EmployeeWorkingHours, hooks...)
}

// Create returns a create builder for EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) Create() *EmployeeWorkingHoursCreate {
	mutation := newEmployeeWorkingHoursMutation(c.config, OpCreate)
	return &EmployeeWorkingHoursCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) Update() *EmployeeWorkingHoursUpdate {
	mutation := newEmployeeWorkingHoursMutation(c.config, OpUpdate)
	return &EmployeeWorkingHoursUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeWorkingHoursClient) UpdateOne(ewh *EmployeeWorkingHours) *EmployeeWorkingHoursUpdateOne {
	mutation := newEmployeeWorkingHoursMutation(c.config, OpUpdateOne, withEmployeeWorkingHours(ewh))
	return &EmployeeWorkingHoursUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeWorkingHoursClient) UpdateOneID(id int) *EmployeeWorkingHoursUpdateOne {
	mutation := newEmployeeWorkingHoursMutation(c.config, OpUpdateOne, withEmployeeWorkingHoursID(id))
	return &EmployeeWorkingHoursUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) Delete() *EmployeeWorkingHoursDelete {
	mutation := newEmployeeWorkingHoursMutation(c.config, OpDelete)
	return &EmployeeWorkingHoursDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeWorkingHoursClient) DeleteOne(ewh *EmployeeWorkingHours) *EmployeeWorkingHoursDeleteOne {
	return c.DeleteOneID(ewh.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeWorkingHoursClient) DeleteOneID(id int) *EmployeeWorkingHoursDeleteOne {
	builder := c.Delete().Where(employeeworkinghours.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeWorkingHoursDeleteOne{builder}
}

// Create returns a query builder for EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) Query() *EmployeeWorkingHoursQuery {
	return &EmployeeWorkingHoursQuery{config: c.config}
}

// Get returns a EmployeeWorkingHours entity by its id.
func (c *EmployeeWorkingHoursClient) Get(ctx context.Context, id int) (*EmployeeWorkingHours, error) {
	return c.Query().Where(employeeworkinghours.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeWorkingHoursClient) GetX(ctx context.Context, id int) *EmployeeWorkingHours {
	ewh, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ewh
}

// QueryEmployee queries the employee edge of a EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) QueryEmployee(ewh *EmployeeWorkingHours) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ewh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.EmployeeTable, employeeworkinghours.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(ewh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDay queries the day edge of a EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) QueryDay(ewh *EmployeeWorkingHours) *DayQuery {
	query := &DayQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ewh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, id),
			sqlgraph.To(day.Table, day.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.DayTable, employeeworkinghours.DayColumn),
		)
		fromV = sqlgraph.Neighbors(ewh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShift queries the shift edge of a EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) QueryShift(ewh *EmployeeWorkingHours) *ShiftQuery {
	query := &ShiftQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ewh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, id),
			sqlgraph.To(shift.Table, shift.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.ShiftTable, employeeworkinghours.ShiftColumn),
		)
		fromV = sqlgraph.Neighbors(ewh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a EmployeeWorkingHours.
func (c *EmployeeWorkingHoursClient) QueryRole(ewh *EmployeeWorkingHours) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ewh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeworkinghours.Table, employeeworkinghours.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employeeworkinghours.RoleTable, employeeworkinghours.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(ewh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeWorkingHoursClient) Hooks() []Hook {
	return c.hooks.EmployeeWorkingHours
}

// GiveawayClient is a client for the Giveaway schema.
type GiveawayClient struct {
	config
}

// NewGiveawayClient returns a client for the Giveaway from the given config.
func NewGiveawayClient(c config) *GiveawayClient {
	return &GiveawayClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `giveaway.Hooks(f(g(h())))`.
func (c *GiveawayClient) Use(hooks ...Hook) {
	c.hooks.Giveaway = append(c.hooks.Giveaway, hooks...)
}

// Create returns a create builder for Giveaway.
func (c *GiveawayClient) Create() *GiveawayCreate {
	mutation := newGiveawayMutation(c.config, OpCreate)
	return &GiveawayCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Giveaway.
func (c *GiveawayClient) Update() *GiveawayUpdate {
	mutation := newGiveawayMutation(c.config, OpUpdate)
	return &GiveawayUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GiveawayClient) UpdateOne(gi *Giveaway) *GiveawayUpdateOne {
	mutation := newGiveawayMutation(c.config, OpUpdateOne, withGiveaway(gi))
	return &GiveawayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GiveawayClient) UpdateOneID(id int) *GiveawayUpdateOne {
	mutation := newGiveawayMutation(c.config, OpUpdateOne, withGiveawayID(id))
	return &GiveawayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Giveaway.
func (c *GiveawayClient) Delete() *GiveawayDelete {
	mutation := newGiveawayMutation(c.config, OpDelete)
	return &GiveawayDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GiveawayClient) DeleteOne(gi *Giveaway) *GiveawayDeleteOne {
	return c.DeleteOneID(gi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GiveawayClient) DeleteOneID(id int) *GiveawayDeleteOne {
	builder := c.Delete().Where(giveaway.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GiveawayDeleteOne{builder}
}

// Create returns a query builder for Giveaway.
func (c *GiveawayClient) Query() *GiveawayQuery {
	return &GiveawayQuery{config: c.config}
}

// Get returns a Giveaway entity by its id.
func (c *GiveawayClient) Get(ctx context.Context, id int) (*Giveaway, error) {
	return c.Query().Where(giveaway.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GiveawayClient) GetX(ctx context.Context, id int) *Giveaway {
	gi, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return gi
}

// QueryForgiveaway queries the forgiveaway edge of a Giveaway.
func (c *GiveawayClient) QueryForgiveaway(gi *Giveaway) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(giveaway.Table, giveaway.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, giveaway.ForgiveawayTable, giveaway.ForgiveawayColumn),
		)
		fromV = sqlgraph.Neighbors(gi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GiveawayClient) Hooks() []Hook {
	return c.hooks.Giveaway
}

// ManagerClient is a client for the Manager schema.
type ManagerClient struct {
	config
}

// NewManagerClient returns a client for the Manager from the given config.
func NewManagerClient(c config) *ManagerClient {
	return &ManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manager.Hooks(f(g(h())))`.
func (c *ManagerClient) Use(hooks ...Hook) {
	c.hooks.Manager = append(c.hooks.Manager, hooks...)
}

// Create returns a create builder for Manager.
func (c *ManagerClient) Create() *ManagerCreate {
	mutation := newManagerMutation(c.config, OpCreate)
	return &ManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Manager.
func (c *ManagerClient) Update() *ManagerUpdate {
	mutation := newManagerMutation(c.config, OpUpdate)
	return &ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManagerClient) UpdateOne(m *Manager) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(m))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManagerClient) UpdateOneID(id int) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManagerID(id))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manager.
func (c *ManagerClient) Delete() *ManagerDelete {
	mutation := newManagerMutation(c.config, OpDelete)
	return &ManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ManagerClient) DeleteOne(m *Manager) *ManagerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ManagerClient) DeleteOneID(id int) *ManagerDeleteOne {
	builder := c.Delete().Where(manager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManagerDeleteOne{builder}
}

// Create returns a query builder for Manager.
func (c *ManagerClient) Query() *ManagerQuery {
	return &ManagerQuery{config: c.config}
}

// Get returns a Manager entity by its id.
func (c *ManagerClient) Get(ctx context.Context, id int) (*Manager, error) {
	return c.Query().Where(manager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManagerClient) GetX(ctx context.Context, id int) *Manager {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryManagers queries the managers edge of a Manager.
func (c *ManagerClient) QueryManagers(m *Manager) *OrderproductQuery {
	query := &OrderproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manager.Table, manager.FieldID, id),
			sqlgraph.To(orderproduct.Table, orderproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, manager.ManagersTable, manager.ManagersColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManagerClient) Hooks() []Hook {
	return c.hooks.Manager
}

// OrderonlineClient is a client for the Orderonline schema.
type OrderonlineClient struct {
	config
}

// NewOrderonlineClient returns a client for the Orderonline from the given config.
func NewOrderonlineClient(c config) *OrderonlineClient {
	return &OrderonlineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderonline.Hooks(f(g(h())))`.
func (c *OrderonlineClient) Use(hooks ...Hook) {
	c.hooks.Orderonline = append(c.hooks.Orderonline, hooks...)
}

// Create returns a create builder for Orderonline.
func (c *OrderonlineClient) Create() *OrderonlineCreate {
	mutation := newOrderonlineMutation(c.config, OpCreate)
	return &OrderonlineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Orderonline.
func (c *OrderonlineClient) Update() *OrderonlineUpdate {
	mutation := newOrderonlineMutation(c.config, OpUpdate)
	return &OrderonlineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderonlineClient) UpdateOne(o *Orderonline) *OrderonlineUpdateOne {
	mutation := newOrderonlineMutation(c.config, OpUpdateOne, withOrderonline(o))
	return &OrderonlineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderonlineClient) UpdateOneID(id int) *OrderonlineUpdateOne {
	mutation := newOrderonlineMutation(c.config, OpUpdateOne, withOrderonlineID(id))
	return &OrderonlineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Orderonline.
func (c *OrderonlineClient) Delete() *OrderonlineDelete {
	mutation := newOrderonlineMutation(c.config, OpDelete)
	return &OrderonlineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderonlineClient) DeleteOne(o *Orderonline) *OrderonlineDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderonlineClient) DeleteOneID(id int) *OrderonlineDeleteOne {
	builder := c.Delete().Where(orderonline.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderonlineDeleteOne{builder}
}

// Create returns a query builder for Orderonline.
func (c *OrderonlineClient) Query() *OrderonlineQuery {
	return &OrderonlineQuery{config: c.config}
}

// Get returns a Orderonline entity by its id.
func (c *OrderonlineClient) Get(ctx context.Context, id int) (*Orderonline, error) {
	return c.Query().Where(orderonline.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderonlineClient) GetX(ctx context.Context, id int) *Orderonline {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryProduct queries the product edge of a Orderonline.
func (c *OrderonlineClient) QueryProduct(o *Orderonline) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderonline.Table, orderonline.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderonline.ProductTable, orderonline.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentchannel queries the paymentchannel edge of a Orderonline.
func (c *OrderonlineClient) QueryPaymentchannel(o *Orderonline) *PaymentchannelQuery {
	query := &PaymentchannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderonline.Table, orderonline.FieldID, id),
			sqlgraph.To(paymentchannel.Table, paymentchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderonline.PaymentchannelTable, orderonline.PaymentchannelColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypeproduct queries the Typeproduct edge of a Orderonline.
func (c *OrderonlineClient) QueryTypeproduct(o *Orderonline) *TypeproductQuery {
	query := &TypeproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderonline.Table, orderonline.FieldID, id),
			sqlgraph.To(typeproduct.Table, typeproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderonline.TypeproductTable, orderonline.TypeproductColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a Orderonline.
func (c *OrderonlineClient) QueryCustomer(o *Orderonline) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderonline.Table, orderonline.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderonline.CustomerTable, orderonline.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderonlineClient) Hooks() []Hook {
	return c.hooks.Orderonline
}

// OrderproductClient is a client for the Orderproduct schema.
type OrderproductClient struct {
	config
}

// NewOrderproductClient returns a client for the Orderproduct from the given config.
func NewOrderproductClient(c config) *OrderproductClient {
	return &OrderproductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderproduct.Hooks(f(g(h())))`.
func (c *OrderproductClient) Use(hooks ...Hook) {
	c.hooks.Orderproduct = append(c.hooks.Orderproduct, hooks...)
}

// Create returns a create builder for Orderproduct.
func (c *OrderproductClient) Create() *OrderproductCreate {
	mutation := newOrderproductMutation(c.config, OpCreate)
	return &OrderproductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Orderproduct.
func (c *OrderproductClient) Update() *OrderproductUpdate {
	mutation := newOrderproductMutation(c.config, OpUpdate)
	return &OrderproductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderproductClient) UpdateOne(o *Orderproduct) *OrderproductUpdateOne {
	mutation := newOrderproductMutation(c.config, OpUpdateOne, withOrderproduct(o))
	return &OrderproductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderproductClient) UpdateOneID(id int) *OrderproductUpdateOne {
	mutation := newOrderproductMutation(c.config, OpUpdateOne, withOrderproductID(id))
	return &OrderproductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Orderproduct.
func (c *OrderproductClient) Delete() *OrderproductDelete {
	mutation := newOrderproductMutation(c.config, OpDelete)
	return &OrderproductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderproductClient) DeleteOne(o *Orderproduct) *OrderproductDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderproductClient) DeleteOneID(id int) *OrderproductDeleteOne {
	builder := c.Delete().Where(orderproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderproductDeleteOne{builder}
}

// Create returns a query builder for Orderproduct.
func (c *OrderproductClient) Query() *OrderproductQuery {
	return &OrderproductQuery{config: c.config}
}

// Get returns a Orderproduct entity by its id.
func (c *OrderproductClient) Get(ctx context.Context, id int) (*Orderproduct, error) {
	return c.Query().Where(orderproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderproductClient) GetX(ctx context.Context, id int) *Orderproduct {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryProduct queries the product edge of a Orderproduct.
func (c *OrderproductClient) QueryProduct(o *Orderproduct) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderproduct.Table, orderproduct.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderproduct.ProductTable, orderproduct.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompany queries the company edge of a Orderproduct.
func (c *OrderproductClient) QueryCompany(o *Orderproduct) *CompanyQuery {
	query := &CompanyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderproduct.Table, orderproduct.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderproduct.CompanyTable, orderproduct.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypeproduct queries the Typeproduct edge of a Orderproduct.
func (c *OrderproductClient) QueryTypeproduct(o *Orderproduct) *TypeproductQuery {
	query := &TypeproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderproduct.Table, orderproduct.FieldID, id),
			sqlgraph.To(typeproduct.Table, typeproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderproduct.TypeproductTable, orderproduct.TypeproductColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManagers queries the managers edge of a Orderproduct.
func (c *OrderproductClient) QueryManagers(o *Orderproduct) *ManagerQuery {
	query := &ManagerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderproduct.Table, orderproduct.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderproduct.ManagersTable, orderproduct.ManagersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderproductClient) Hooks() []Hook {
	return c.hooks.Orderproduct
}

// PaymentchannelClient is a client for the Paymentchannel schema.
type PaymentchannelClient struct {
	config
}

// NewPaymentchannelClient returns a client for the Paymentchannel from the given config.
func NewPaymentchannelClient(c config) *PaymentchannelClient {
	return &PaymentchannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentchannel.Hooks(f(g(h())))`.
func (c *PaymentchannelClient) Use(hooks ...Hook) {
	c.hooks.Paymentchannel = append(c.hooks.Paymentchannel, hooks...)
}

// Create returns a create builder for Paymentchannel.
func (c *PaymentchannelClient) Create() *PaymentchannelCreate {
	mutation := newPaymentchannelMutation(c.config, OpCreate)
	return &PaymentchannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Paymentchannel.
func (c *PaymentchannelClient) Update() *PaymentchannelUpdate {
	mutation := newPaymentchannelMutation(c.config, OpUpdate)
	return &PaymentchannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentchannelClient) UpdateOne(pa *Paymentchannel) *PaymentchannelUpdateOne {
	mutation := newPaymentchannelMutation(c.config, OpUpdateOne, withPaymentchannel(pa))
	return &PaymentchannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentchannelClient) UpdateOneID(id int) *PaymentchannelUpdateOne {
	mutation := newPaymentchannelMutation(c.config, OpUpdateOne, withPaymentchannelID(id))
	return &PaymentchannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Paymentchannel.
func (c *PaymentchannelClient) Delete() *PaymentchannelDelete {
	mutation := newPaymentchannelMutation(c.config, OpDelete)
	return &PaymentchannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentchannelClient) DeleteOne(pa *Paymentchannel) *PaymentchannelDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentchannelClient) DeleteOneID(id int) *PaymentchannelDeleteOne {
	builder := c.Delete().Where(paymentchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentchannelDeleteOne{builder}
}

// Create returns a query builder for Paymentchannel.
func (c *PaymentchannelClient) Query() *PaymentchannelQuery {
	return &PaymentchannelQuery{config: c.config}
}

// Get returns a Paymentchannel entity by its id.
func (c *PaymentchannelClient) Get(ctx context.Context, id int) (*Paymentchannel, error) {
	return c.Query().Where(paymentchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentchannelClient) GetX(ctx context.Context, id int) *Paymentchannel {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryFormpaymentchannel queries the formpaymentchannel edge of a Paymentchannel.
func (c *PaymentchannelClient) QueryFormpaymentchannel(pa *Paymentchannel) *OrderonlineQuery {
	query := &OrderonlineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentchannel.Table, paymentchannel.FieldID, id),
			sqlgraph.To(orderonline.Table, orderonline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentchannel.FormpaymentchannelTable, paymentchannel.FormpaymentchannelColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentchannelClient) Hooks() []Hook {
	return c.hooks.Paymentchannel
}

// PositionClient is a client for the Position schema.
type PositionClient struct {
	config
}

// NewPositionClient returns a client for the Position from the given config.
func NewPositionClient(c config) *PositionClient {
	return &PositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `position.Hooks(f(g(h())))`.
func (c *PositionClient) Use(hooks ...Hook) {
	c.hooks.Position = append(c.hooks.Position, hooks...)
}

// Create returns a create builder for Position.
func (c *PositionClient) Create() *PositionCreate {
	mutation := newPositionMutation(c.config, OpCreate)
	return &PositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Position.
func (c *PositionClient) Update() *PositionUpdate {
	mutation := newPositionMutation(c.config, OpUpdate)
	return &PositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionClient) UpdateOne(po *Position) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPosition(po))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionClient) UpdateOneID(id int) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPositionID(id))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Position.
func (c *PositionClient) Delete() *PositionDelete {
	mutation := newPositionMutation(c.config, OpDelete)
	return &PositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PositionClient) DeleteOne(po *Position) *PositionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PositionClient) DeleteOneID(id int) *PositionDeleteOne {
	builder := c.Delete().Where(position.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionDeleteOne{builder}
}

// Create returns a query builder for Position.
func (c *PositionClient) Query() *PositionQuery {
	return &PositionQuery{config: c.config}
}

// Get returns a Position entity by its id.
func (c *PositionClient) Get(ctx context.Context, id int) (*Position, error) {
	return c.Query().Where(position.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionClient) GetX(ctx context.Context, id int) *Position {
	po, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return po
}

// QueryFormposition queries the formposition edge of a Position.
func (c *PositionClient) QueryFormposition(po *Position) *SalaryQuery {
	query := &SalaryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(position.Table, position.FieldID, id),
			sqlgraph.To(salary.Table, salary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, position.FormpositionTable, position.FormpositionColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PositionClient) Hooks() []Hook {
	return c.hooks.Position
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Create returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{config: c.config}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryProducts queries the products edge of a Product.
func (c *ProductClient) QueryProducts(pr *Product) *OrderproductQuery {
	query := &OrderproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(orderproduct.Table, orderproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductsTable, product.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStockproduct queries the stockproduct edge of a Product.
func (c *ProductClient) QueryStockproduct(pr *Product) *StockQuery {
	query := &StockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.StockproductTable, product.StockproductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryForproduct queries the forproduct edge of a Product.
func (c *ProductClient) QueryForproduct(pr *Product) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ForproductTable, product.ForproductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFormproductonline queries the formproductonline edge of a Product.
func (c *ProductClient) QueryFormproductonline(pr *Product) *OrderonlineQuery {
	query := &OrderonlineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(orderonline.Table, orderonline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.FormproductonlineTable, product.FormproductonlineColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// PromotionClient is a client for the Promotion schema.
type PromotionClient struct {
	config
}

// NewPromotionClient returns a client for the Promotion from the given config.
func NewPromotionClient(c config) *PromotionClient {
	return &PromotionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotion.Hooks(f(g(h())))`.
func (c *PromotionClient) Use(hooks ...Hook) {
	c.hooks.Promotion = append(c.hooks.Promotion, hooks...)
}

// Create returns a create builder for Promotion.
func (c *PromotionClient) Create() *PromotionCreate {
	mutation := newPromotionMutation(c.config, OpCreate)
	return &PromotionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Promotion.
func (c *PromotionClient) Update() *PromotionUpdate {
	mutation := newPromotionMutation(c.config, OpUpdate)
	return &PromotionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionClient) UpdateOne(pr *Promotion) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotion(pr))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionClient) UpdateOneID(id int) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotionID(id))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotion.
func (c *PromotionClient) Delete() *PromotionDelete {
	mutation := newPromotionMutation(c.config, OpDelete)
	return &PromotionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PromotionClient) DeleteOne(pr *Promotion) *PromotionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PromotionClient) DeleteOneID(id int) *PromotionDeleteOne {
	builder := c.Delete().Where(promotion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionDeleteOne{builder}
}

// Create returns a query builder for Promotion.
func (c *PromotionClient) Query() *PromotionQuery {
	return &PromotionQuery{config: c.config}
}

// Get returns a Promotion entity by its id.
func (c *PromotionClient) Get(ctx context.Context, id int) (*Promotion, error) {
	return c.Query().Where(promotion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionClient) GetX(ctx context.Context, id int) *Promotion {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QuerySale queries the sale edge of a Promotion.
func (c *PromotionClient) QuerySale(pr *Promotion) *DiscountQuery {
	query := &DiscountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(discount.Table, discount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotion.SaleTable, promotion.SaleColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGive queries the give edge of a Promotion.
func (c *PromotionClient) QueryGive(pr *Promotion) *GiveawayQuery {
	query := &GiveawayQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(giveaway.Table, giveaway.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotion.GiveTable, promotion.GiveColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a Promotion.
func (c *PromotionClient) QueryProduct(pr *Promotion) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotion.ProductTable, promotion.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionClient) Hooks() []Hook {
	return c.hooks.Promotion
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a create builder for Role.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Create returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{config: c.config}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryTodo queries the todo edge of a Role.
func (c *RoleClient) QueryTodo(r *Role) *EmployeeWorkingHoursQuery {
	query := &EmployeeWorkingHoursQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(employeeworkinghours.Table, employeeworkinghours.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.TodoTable, role.TodoColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// SalaryClient is a client for the Salary schema.
type SalaryClient struct {
	config
}

// NewSalaryClient returns a client for the Salary from the given config.
func NewSalaryClient(c config) *SalaryClient {
	return &SalaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `salary.Hooks(f(g(h())))`.
func (c *SalaryClient) Use(hooks ...Hook) {
	c.hooks.Salary = append(c.hooks.Salary, hooks...)
}

// Create returns a create builder for Salary.
func (c *SalaryClient) Create() *SalaryCreate {
	mutation := newSalaryMutation(c.config, OpCreate)
	return &SalaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Salary.
func (c *SalaryClient) Update() *SalaryUpdate {
	mutation := newSalaryMutation(c.config, OpUpdate)
	return &SalaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SalaryClient) UpdateOne(s *Salary) *SalaryUpdateOne {
	mutation := newSalaryMutation(c.config, OpUpdateOne, withSalary(s))
	return &SalaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SalaryClient) UpdateOneID(id int) *SalaryUpdateOne {
	mutation := newSalaryMutation(c.config, OpUpdateOne, withSalaryID(id))
	return &SalaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Salary.
func (c *SalaryClient) Delete() *SalaryDelete {
	mutation := newSalaryMutation(c.config, OpDelete)
	return &SalaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SalaryClient) DeleteOne(s *Salary) *SalaryDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SalaryClient) DeleteOneID(id int) *SalaryDeleteOne {
	builder := c.Delete().Where(salary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SalaryDeleteOne{builder}
}

// Create returns a query builder for Salary.
func (c *SalaryClient) Query() *SalaryQuery {
	return &SalaryQuery{config: c.config}
}

// Get returns a Salary entity by its id.
func (c *SalaryClient) Get(ctx context.Context, id int) (*Salary, error) {
	return c.Query().Where(salary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SalaryClient) GetX(ctx context.Context, id int) *Salary {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryAssessment queries the assessment edge of a Salary.
func (c *SalaryClient) QueryAssessment(s *Salary) *AssessmentQuery {
	query := &AssessmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(salary.Table, salary.FieldID, id),
			sqlgraph.To(assessment.Table, assessment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, salary.AssessmentTable, salary.AssessmentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosition queries the position edge of a Salary.
func (c *SalaryClient) QueryPosition(s *Salary) *PositionQuery {
	query := &PositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(salary.Table, salary.FieldID, id),
			sqlgraph.To(position.Table, position.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, salary.PositionTable, salary.PositionColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Salary.
func (c *SalaryClient) QueryEmployee(s *Salary) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(salary.Table, salary.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, salary.EmployeeTable, salary.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SalaryClient) Hooks() []Hook {
	return c.hooks.Salary
}

// ShiftClient is a client for the Shift schema.
type ShiftClient struct {
	config
}

// NewShiftClient returns a client for the Shift from the given config.
func NewShiftClient(c config) *ShiftClient {
	return &ShiftClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shift.Hooks(f(g(h())))`.
func (c *ShiftClient) Use(hooks ...Hook) {
	c.hooks.Shift = append(c.hooks.Shift, hooks...)
}

// Create returns a create builder for Shift.
func (c *ShiftClient) Create() *ShiftCreate {
	mutation := newShiftMutation(c.config, OpCreate)
	return &ShiftCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Shift.
func (c *ShiftClient) Update() *ShiftUpdate {
	mutation := newShiftMutation(c.config, OpUpdate)
	return &ShiftUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShiftClient) UpdateOne(s *Shift) *ShiftUpdateOne {
	mutation := newShiftMutation(c.config, OpUpdateOne, withShift(s))
	return &ShiftUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShiftClient) UpdateOneID(id int) *ShiftUpdateOne {
	mutation := newShiftMutation(c.config, OpUpdateOne, withShiftID(id))
	return &ShiftUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shift.
func (c *ShiftClient) Delete() *ShiftDelete {
	mutation := newShiftMutation(c.config, OpDelete)
	return &ShiftDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShiftClient) DeleteOne(s *Shift) *ShiftDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShiftClient) DeleteOneID(id int) *ShiftDeleteOne {
	builder := c.Delete().Where(shift.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShiftDeleteOne{builder}
}

// Create returns a query builder for Shift.
func (c *ShiftClient) Query() *ShiftQuery {
	return &ShiftQuery{config: c.config}
}

// Get returns a Shift entity by its id.
func (c *ShiftClient) Get(ctx context.Context, id int) (*Shift, error) {
	return c.Query().Where(shift.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShiftClient) GetX(ctx context.Context, id int) *Shift {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryWhen queries the when edge of a Shift.
func (c *ShiftClient) QueryWhen(s *Shift) *EmployeeWorkingHoursQuery {
	query := &EmployeeWorkingHoursQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shift.Table, shift.FieldID, id),
			sqlgraph.To(employeeworkinghours.Table, employeeworkinghours.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shift.WhenTable, shift.WhenColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShiftClient) Hooks() []Hook {
	return c.hooks.Shift
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Create returns a create builder for Stock.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id int) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StockClient) DeleteOneID(id int) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Create returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{config: c.config}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id int) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id int) *Stock {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryProduct queries the product edge of a Stock.
func (c *StockClient) QueryProduct(s *Stock) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.ProductTable, stock.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryZoneproduct queries the zoneproduct edge of a Stock.
func (c *StockClient) QueryZoneproduct(s *Stock) *ZoneproductQuery {
	query := &ZoneproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(zoneproduct.Table, zoneproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.ZoneproductTable, stock.ZoneproductColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Stock.
func (c *StockClient) QueryEmployee(s *Stock) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.EmployeeTable, stock.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypeproduct queries the Typeproduct edge of a Stock.
func (c *StockClient) QueryTypeproduct(s *Stock) *TypeproductQuery {
	query := &TypeproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(typeproduct.Table, typeproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.TypeproductTable, stock.TypeproductColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	return c.hooks.Stock
}

// TypeproductClient is a client for the Typeproduct schema.
type TypeproductClient struct {
	config
}

// NewTypeproductClient returns a client for the Typeproduct from the given config.
func NewTypeproductClient(c config) *TypeproductClient {
	return &TypeproductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typeproduct.Hooks(f(g(h())))`.
func (c *TypeproductClient) Use(hooks ...Hook) {
	c.hooks.Typeproduct = append(c.hooks.Typeproduct, hooks...)
}

// Create returns a create builder for Typeproduct.
func (c *TypeproductClient) Create() *TypeproductCreate {
	mutation := newTypeproductMutation(c.config, OpCreate)
	return &TypeproductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Typeproduct.
func (c *TypeproductClient) Update() *TypeproductUpdate {
	mutation := newTypeproductMutation(c.config, OpUpdate)
	return &TypeproductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeproductClient) UpdateOne(t *Typeproduct) *TypeproductUpdateOne {
	mutation := newTypeproductMutation(c.config, OpUpdateOne, withTypeproduct(t))
	return &TypeproductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeproductClient) UpdateOneID(id int) *TypeproductUpdateOne {
	mutation := newTypeproductMutation(c.config, OpUpdateOne, withTypeproductID(id))
	return &TypeproductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Typeproduct.
func (c *TypeproductClient) Delete() *TypeproductDelete {
	mutation := newTypeproductMutation(c.config, OpDelete)
	return &TypeproductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TypeproductClient) DeleteOne(t *Typeproduct) *TypeproductDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TypeproductClient) DeleteOneID(id int) *TypeproductDeleteOne {
	builder := c.Delete().Where(typeproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeproductDeleteOne{builder}
}

// Create returns a query builder for Typeproduct.
func (c *TypeproductClient) Query() *TypeproductQuery {
	return &TypeproductQuery{config: c.config}
}

// Get returns a Typeproduct entity by its id.
func (c *TypeproductClient) Get(ctx context.Context, id int) (*Typeproduct, error) {
	return c.Query().Where(typeproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeproductClient) GetX(ctx context.Context, id int) *Typeproduct {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryTypestock queries the typestock edge of a Typeproduct.
func (c *TypeproductClient) QueryTypestock(t *Typeproduct) *StockQuery {
	query := &StockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typeproduct.Table, typeproduct.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typeproduct.TypestockTable, typeproduct.TypestockColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypeproducts queries the Typeproducts edge of a Typeproduct.
func (c *TypeproductClient) QueryTypeproducts(t *Typeproduct) *OrderproductQuery {
	query := &OrderproductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typeproduct.Table, typeproduct.FieldID, id),
			sqlgraph.To(orderproduct.Table, orderproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typeproduct.TypeproductsTable, typeproduct.TypeproductsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromTypeproductonline queries the fromTypeproductonline edge of a Typeproduct.
func (c *TypeproductClient) QueryFromTypeproductonline(t *Typeproduct) *OrderonlineQuery {
	query := &OrderonlineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typeproduct.Table, typeproduct.FieldID, id),
			sqlgraph.To(orderonline.Table, orderonline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typeproduct.FromTypeproductonlineTable, typeproduct.FromTypeproductonlineColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TypeproductClient) Hooks() []Hook {
	return c.hooks.Typeproduct
}

// ZoneproductClient is a client for the Zoneproduct schema.
type ZoneproductClient struct {
	config
}

// NewZoneproductClient returns a client for the Zoneproduct from the given config.
func NewZoneproductClient(c config) *ZoneproductClient {
	return &ZoneproductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `zoneproduct.Hooks(f(g(h())))`.
func (c *ZoneproductClient) Use(hooks ...Hook) {
	c.hooks.Zoneproduct = append(c.hooks.Zoneproduct, hooks...)
}

// Create returns a create builder for Zoneproduct.
func (c *ZoneproductClient) Create() *ZoneproductCreate {
	mutation := newZoneproductMutation(c.config, OpCreate)
	return &ZoneproductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Zoneproduct.
func (c *ZoneproductClient) Update() *ZoneproductUpdate {
	mutation := newZoneproductMutation(c.config, OpUpdate)
	return &ZoneproductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ZoneproductClient) UpdateOne(z *Zoneproduct) *ZoneproductUpdateOne {
	mutation := newZoneproductMutation(c.config, OpUpdateOne, withZoneproduct(z))
	return &ZoneproductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ZoneproductClient) UpdateOneID(id int) *ZoneproductUpdateOne {
	mutation := newZoneproductMutation(c.config, OpUpdateOne, withZoneproductID(id))
	return &ZoneproductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Zoneproduct.
func (c *ZoneproductClient) Delete() *ZoneproductDelete {
	mutation := newZoneproductMutation(c.config, OpDelete)
	return &ZoneproductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ZoneproductClient) DeleteOne(z *Zoneproduct) *ZoneproductDeleteOne {
	return c.DeleteOneID(z.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ZoneproductClient) DeleteOneID(id int) *ZoneproductDeleteOne {
	builder := c.Delete().Where(zoneproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ZoneproductDeleteOne{builder}
}

// Create returns a query builder for Zoneproduct.
func (c *ZoneproductClient) Query() *ZoneproductQuery {
	return &ZoneproductQuery{config: c.config}
}

// Get returns a Zoneproduct entity by its id.
func (c *ZoneproductClient) Get(ctx context.Context, id int) (*Zoneproduct, error) {
	return c.Query().Where(zoneproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ZoneproductClient) GetX(ctx context.Context, id int) *Zoneproduct {
	z, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return z
}

// QueryZonestock queries the zonestock edge of a Zoneproduct.
func (c *ZoneproductClient) QueryZonestock(z *Zoneproduct) *StockQuery {
	query := &StockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := z.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(zoneproduct.Table, zoneproduct.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, zoneproduct.ZonestockTable, zoneproduct.ZonestockColumn),
		)
		fromV = sqlgraph.Neighbors(z.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ZoneproductClient) Hooks() []Hook {
	return c.hooks.Zoneproduct
}
