// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/employeeworkinghours"
	"github.com/team13/app/ent/getoffwork"
	"github.com/team13/app/ent/predicate"
)

// GetOffWorkUpdate is the builder for updating GetOffWork entities.
type GetOffWorkUpdate struct {
	config
	hooks      []Hook
	mutation   *GetOffWorkMutation
	predicates []predicate.GetOffWork
}

// Where adds a new predicate for the builder.
func (gowu *GetOffWorkUpdate) Where(ps ...predicate.GetOffWork) *GetOffWorkUpdate {
	gowu.predicates = append(gowu.predicates, ps...)
	return gowu
}

// SetGetOffWork sets the GetOffWork field.
func (gowu *GetOffWorkUpdate) SetGetOffWork(t time.Time) *GetOffWorkUpdate {
	gowu.mutation.SetGetOffWork(t)
	return gowu
}

// AddWhenendworkIDs adds the whenendwork edge to EmployeeWorkingHours by ids.
func (gowu *GetOffWorkUpdate) AddWhenendworkIDs(ids ...int) *GetOffWorkUpdate {
	gowu.mutation.AddWhenendworkIDs(ids...)
	return gowu
}

// AddWhenendwork adds the whenendwork edges to EmployeeWorkingHours.
func (gowu *GetOffWorkUpdate) AddWhenendwork(e ...*EmployeeWorkingHours) *GetOffWorkUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gowu.AddWhenendworkIDs(ids...)
}

// Mutation returns the GetOffWorkMutation object of the builder.
func (gowu *GetOffWorkUpdate) Mutation() *GetOffWorkMutation {
	return gowu.mutation
}

// RemoveWhenendworkIDs removes the whenendwork edge to EmployeeWorkingHours by ids.
func (gowu *GetOffWorkUpdate) RemoveWhenendworkIDs(ids ...int) *GetOffWorkUpdate {
	gowu.mutation.RemoveWhenendworkIDs(ids...)
	return gowu
}

// RemoveWhenendwork removes whenendwork edges to EmployeeWorkingHours.
func (gowu *GetOffWorkUpdate) RemoveWhenendwork(e ...*EmployeeWorkingHours) *GetOffWorkUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gowu.RemoveWhenendworkIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (gowu *GetOffWorkUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(gowu.hooks) == 0 {
		affected, err = gowu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GetOffWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gowu.mutation = mutation
			affected, err = gowu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gowu.hooks) - 1; i >= 0; i-- {
			mut = gowu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gowu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gowu *GetOffWorkUpdate) SaveX(ctx context.Context) int {
	affected, err := gowu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gowu *GetOffWorkUpdate) Exec(ctx context.Context) error {
	_, err := gowu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gowu *GetOffWorkUpdate) ExecX(ctx context.Context) {
	if err := gowu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gowu *GetOffWorkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   getoffwork.Table,
			Columns: getoffwork.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: getoffwork.FieldID,
			},
		},
	}
	if ps := gowu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gowu.mutation.GetOffWork(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: getoffwork.FieldGetOffWork,
		})
	}
	if nodes := gowu.mutation.RemovedWhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   getoffwork.WhenendworkTable,
			Columns: []string{getoffwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gowu.mutation.WhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   getoffwork.WhenendworkTable,
			Columns: []string{getoffwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gowu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{getoffwork.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GetOffWorkUpdateOne is the builder for updating a single GetOffWork entity.
type GetOffWorkUpdateOne struct {
	config
	hooks    []Hook
	mutation *GetOffWorkMutation
}

// SetGetOffWork sets the GetOffWork field.
func (gowuo *GetOffWorkUpdateOne) SetGetOffWork(t time.Time) *GetOffWorkUpdateOne {
	gowuo.mutation.SetGetOffWork(t)
	return gowuo
}

// AddWhenendworkIDs adds the whenendwork edge to EmployeeWorkingHours by ids.
func (gowuo *GetOffWorkUpdateOne) AddWhenendworkIDs(ids ...int) *GetOffWorkUpdateOne {
	gowuo.mutation.AddWhenendworkIDs(ids...)
	return gowuo
}

// AddWhenendwork adds the whenendwork edges to EmployeeWorkingHours.
func (gowuo *GetOffWorkUpdateOne) AddWhenendwork(e ...*EmployeeWorkingHours) *GetOffWorkUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gowuo.AddWhenendworkIDs(ids...)
}

// Mutation returns the GetOffWorkMutation object of the builder.
func (gowuo *GetOffWorkUpdateOne) Mutation() *GetOffWorkMutation {
	return gowuo.mutation
}

// RemoveWhenendworkIDs removes the whenendwork edge to EmployeeWorkingHours by ids.
func (gowuo *GetOffWorkUpdateOne) RemoveWhenendworkIDs(ids ...int) *GetOffWorkUpdateOne {
	gowuo.mutation.RemoveWhenendworkIDs(ids...)
	return gowuo
}

// RemoveWhenendwork removes whenendwork edges to EmployeeWorkingHours.
func (gowuo *GetOffWorkUpdateOne) RemoveWhenendwork(e ...*EmployeeWorkingHours) *GetOffWorkUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gowuo.RemoveWhenendworkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (gowuo *GetOffWorkUpdateOne) Save(ctx context.Context) (*GetOffWork, error) {

	var (
		err  error
		node *GetOffWork
	)
	if len(gowuo.hooks) == 0 {
		node, err = gowuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GetOffWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gowuo.mutation = mutation
			node, err = gowuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gowuo.hooks) - 1; i >= 0; i-- {
			mut = gowuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gowuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gowuo *GetOffWorkUpdateOne) SaveX(ctx context.Context) *GetOffWork {
	gow, err := gowuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gow
}

// Exec executes the query on the entity.
func (gowuo *GetOffWorkUpdateOne) Exec(ctx context.Context) error {
	_, err := gowuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gowuo *GetOffWorkUpdateOne) ExecX(ctx context.Context) {
	if err := gowuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gowuo *GetOffWorkUpdateOne) sqlSave(ctx context.Context) (gow *GetOffWork, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   getoffwork.Table,
			Columns: getoffwork.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: getoffwork.FieldID,
			},
		},
	}
	id, ok := gowuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GetOffWork.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := gowuo.mutation.GetOffWork(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: getoffwork.FieldGetOffWork,
		})
	}
	if nodes := gowuo.mutation.RemovedWhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   getoffwork.WhenendworkTable,
			Columns: []string{getoffwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gowuo.mutation.WhenendworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   getoffwork.WhenendworkTable,
			Columns: []string{getoffwork.WhenendworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employeeworkinghours.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	gow = &GetOffWork{config: gowuo.config}
	_spec.Assign = gow.assignValues
	_spec.ScanValues = gow.scanValues()
	if err = sqlgraph.UpdateNode(ctx, gowuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{getoffwork.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return gow, nil
}
