// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/orderonline"
	"github.com/team13/app/ent/paymentchannel"
)

// PaymentchannelCreate is the builder for creating a Paymentchannel entity.
type PaymentchannelCreate struct {
	config
	mutation *PaymentchannelMutation
	hooks    []Hook
}

// SetBank sets the Bank field.
func (pc *PaymentchannelCreate) SetBank(s string) *PaymentchannelCreate {
	pc.mutation.SetBank(s)
	return pc
}

// AddFormpaymentchannelIDs adds the formpaymentchannel edge to Orderonline by ids.
func (pc *PaymentchannelCreate) AddFormpaymentchannelIDs(ids ...int) *PaymentchannelCreate {
	pc.mutation.AddFormpaymentchannelIDs(ids...)
	return pc
}

// AddFormpaymentchannel adds the formpaymentchannel edges to Orderonline.
func (pc *PaymentchannelCreate) AddFormpaymentchannel(o ...*Orderonline) *PaymentchannelCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddFormpaymentchannelIDs(ids...)
}

// Mutation returns the PaymentchannelMutation object of the builder.
func (pc *PaymentchannelCreate) Mutation() *PaymentchannelMutation {
	return pc.mutation
}

// Save creates the Paymentchannel in the database.
func (pc *PaymentchannelCreate) Save(ctx context.Context) (*Paymentchannel, error) {
	if _, ok := pc.mutation.Bank(); !ok {
		return nil, &ValidationError{Name: "Bank", err: errors.New("ent: missing required field \"Bank\"")}
	}
	if v, ok := pc.mutation.Bank(); ok {
		if err := paymentchannel.BankValidator(v); err != nil {
			return nil, &ValidationError{Name: "Bank", err: fmt.Errorf("ent: validator failed for field \"Bank\": %w", err)}
		}
	}
	var (
		err  error
		node *Paymentchannel
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentchannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentchannelCreate) SaveX(ctx context.Context) *Paymentchannel {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PaymentchannelCreate) sqlSave(ctx context.Context) (*Paymentchannel, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PaymentchannelCreate) createSpec() (*Paymentchannel, *sqlgraph.CreateSpec) {
	var (
		pa    = &Paymentchannel{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymentchannel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paymentchannel.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Bank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentchannel.FieldBank,
		})
		pa.Bank = value
	}
	if nodes := pc.mutation.FormpaymentchannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentchannel.FormpaymentchannelTable,
			Columns: []string{paymentchannel.FormpaymentchannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderonline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
