// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team13/app/ent/assessment"
	"github.com/team13/app/ent/employee"
	"github.com/team13/app/ent/position"
	"github.com/team13/app/ent/predicate"
	"github.com/team13/app/ent/salary"
)

// SalaryUpdate is the builder for updating Salary entities.
type SalaryUpdate struct {
	config
	hooks      []Hook
	mutation   *SalaryMutation
	predicates []predicate.Salary
}

// Where adds a new predicate for the builder.
func (su *SalaryUpdate) Where(ps ...predicate.Salary) *SalaryUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetSalary sets the Salary field.
func (su *SalaryUpdate) SetSalary(f float64) *SalaryUpdate {
	su.mutation.ResetSalary()
	su.mutation.SetSalary(f)
	return su
}

// AddSalary adds f to Salary.
func (su *SalaryUpdate) AddSalary(f float64) *SalaryUpdate {
	su.mutation.AddSalary(f)
	return su
}

// SetBonus sets the Bonus field.
func (su *SalaryUpdate) SetBonus(f float64) *SalaryUpdate {
	su.mutation.ResetBonus()
	su.mutation.SetBonus(f)
	return su
}

// AddBonus adds f to Bonus.
func (su *SalaryUpdate) AddBonus(f float64) *SalaryUpdate {
	su.mutation.AddBonus(f)
	return su
}

// SetSalaryDatetime sets the SalaryDatetime field.
func (su *SalaryUpdate) SetSalaryDatetime(t time.Time) *SalaryUpdate {
	su.mutation.SetSalaryDatetime(t)
	return su
}

// SetIDEmployee sets the IDEmployee field.
func (su *SalaryUpdate) SetIDEmployee(s string) *SalaryUpdate {
	su.mutation.SetIDEmployee(s)
	return su
}

// SetAccountNumber sets the AccountNumber field.
func (su *SalaryUpdate) SetAccountNumber(s string) *SalaryUpdate {
	su.mutation.SetAccountNumber(s)
	return su
}

// SetAssessmentID sets the assessment edge to Assessment by id.
func (su *SalaryUpdate) SetAssessmentID(id int) *SalaryUpdate {
	su.mutation.SetAssessmentID(id)
	return su
}

// SetNillableAssessmentID sets the assessment edge to Assessment by id if the given value is not nil.
func (su *SalaryUpdate) SetNillableAssessmentID(id *int) *SalaryUpdate {
	if id != nil {
		su = su.SetAssessmentID(*id)
	}
	return su
}

// SetAssessment sets the assessment edge to Assessment.
func (su *SalaryUpdate) SetAssessment(a *Assessment) *SalaryUpdate {
	return su.SetAssessmentID(a.ID)
}

// SetPositionID sets the position edge to Position by id.
func (su *SalaryUpdate) SetPositionID(id int) *SalaryUpdate {
	su.mutation.SetPositionID(id)
	return su
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (su *SalaryUpdate) SetNillablePositionID(id *int) *SalaryUpdate {
	if id != nil {
		su = su.SetPositionID(*id)
	}
	return su
}

// SetPosition sets the position edge to Position.
func (su *SalaryUpdate) SetPosition(p *Position) *SalaryUpdate {
	return su.SetPositionID(p.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (su *SalaryUpdate) SetEmployeeID(id int) *SalaryUpdate {
	su.mutation.SetEmployeeID(id)
	return su
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (su *SalaryUpdate) SetNillableEmployeeID(id *int) *SalaryUpdate {
	if id != nil {
		su = su.SetEmployeeID(*id)
	}
	return su
}

// SetEmployee sets the employee edge to Employee.
func (su *SalaryUpdate) SetEmployee(e *Employee) *SalaryUpdate {
	return su.SetEmployeeID(e.ID)
}

// Mutation returns the SalaryMutation object of the builder.
func (su *SalaryUpdate) Mutation() *SalaryMutation {
	return su.mutation
}

// ClearAssessment clears the assessment edge to Assessment.
func (su *SalaryUpdate) ClearAssessment() *SalaryUpdate {
	su.mutation.ClearAssessment()
	return su
}

// ClearPosition clears the position edge to Position.
func (su *SalaryUpdate) ClearPosition() *SalaryUpdate {
	su.mutation.ClearPosition()
	return su
}

// ClearEmployee clears the employee edge to Employee.
func (su *SalaryUpdate) ClearEmployee() *SalaryUpdate {
	su.mutation.ClearEmployee()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SalaryUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Salary(); ok {
		if err := salary.SalaryValidator(v); err != nil {
			return 0, &ValidationError{Name: "Salary", err: fmt.Errorf("ent: validator failed for field \"Salary\": %w", err)}
		}
	}
	if v, ok := su.mutation.Bonus(); ok {
		if err := salary.BonusValidator(v); err != nil {
			return 0, &ValidationError{Name: "Bonus", err: fmt.Errorf("ent: validator failed for field \"Bonus\": %w", err)}
		}
	}
	if v, ok := su.mutation.IDEmployee(); ok {
		if err := salary.IDEmployeeValidator(v); err != nil {
			return 0, &ValidationError{Name: "IDEmployee", err: fmt.Errorf("ent: validator failed for field \"IDEmployee\": %w", err)}
		}
	}
	if v, ok := su.mutation.AccountNumber(); ok {
		if err := salary.AccountNumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "AccountNumber", err: fmt.Errorf("ent: validator failed for field \"AccountNumber\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SalaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SalaryUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SalaryUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SalaryUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SalaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   salary.Table,
			Columns: salary.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salary.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Salary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldSalary,
		})
	}
	if value, ok := su.mutation.AddedSalary(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldSalary,
		})
	}
	if value, ok := su.mutation.Bonus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldBonus,
		})
	}
	if value, ok := su.mutation.AddedBonus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldBonus,
		})
	}
	if value, ok := su.mutation.SalaryDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: salary.FieldSalaryDatetime,
		})
	}
	if value, ok := su.mutation.IDEmployee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: salary.FieldIDEmployee,
		})
	}
	if value, ok := su.mutation.AccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: salary.FieldAccountNumber,
		})
	}
	if su.mutation.AssessmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.AssessmentTable,
			Columns: []string{salary.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: assessment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AssessmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.AssessmentTable,
			Columns: []string{salary.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: assessment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.PositionTable,
			Columns: []string{salary.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.PositionTable,
			Columns: []string{salary.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.EmployeeTable,
			Columns: []string{salary.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.EmployeeTable,
			Columns: []string{salary.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salary.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SalaryUpdateOne is the builder for updating a single Salary entity.
type SalaryUpdateOne struct {
	config
	hooks    []Hook
	mutation *SalaryMutation
}

// SetSalary sets the Salary field.
func (suo *SalaryUpdateOne) SetSalary(f float64) *SalaryUpdateOne {
	suo.mutation.ResetSalary()
	suo.mutation.SetSalary(f)
	return suo
}

// AddSalary adds f to Salary.
func (suo *SalaryUpdateOne) AddSalary(f float64) *SalaryUpdateOne {
	suo.mutation.AddSalary(f)
	return suo
}

// SetBonus sets the Bonus field.
func (suo *SalaryUpdateOne) SetBonus(f float64) *SalaryUpdateOne {
	suo.mutation.ResetBonus()
	suo.mutation.SetBonus(f)
	return suo
}

// AddBonus adds f to Bonus.
func (suo *SalaryUpdateOne) AddBonus(f float64) *SalaryUpdateOne {
	suo.mutation.AddBonus(f)
	return suo
}

// SetSalaryDatetime sets the SalaryDatetime field.
func (suo *SalaryUpdateOne) SetSalaryDatetime(t time.Time) *SalaryUpdateOne {
	suo.mutation.SetSalaryDatetime(t)
	return suo
}

// SetIDEmployee sets the IDEmployee field.
func (suo *SalaryUpdateOne) SetIDEmployee(s string) *SalaryUpdateOne {
	suo.mutation.SetIDEmployee(s)
	return suo
}

// SetAccountNumber sets the AccountNumber field.
func (suo *SalaryUpdateOne) SetAccountNumber(s string) *SalaryUpdateOne {
	suo.mutation.SetAccountNumber(s)
	return suo
}

// SetAssessmentID sets the assessment edge to Assessment by id.
func (suo *SalaryUpdateOne) SetAssessmentID(id int) *SalaryUpdateOne {
	suo.mutation.SetAssessmentID(id)
	return suo
}

// SetNillableAssessmentID sets the assessment edge to Assessment by id if the given value is not nil.
func (suo *SalaryUpdateOne) SetNillableAssessmentID(id *int) *SalaryUpdateOne {
	if id != nil {
		suo = suo.SetAssessmentID(*id)
	}
	return suo
}

// SetAssessment sets the assessment edge to Assessment.
func (suo *SalaryUpdateOne) SetAssessment(a *Assessment) *SalaryUpdateOne {
	return suo.SetAssessmentID(a.ID)
}

// SetPositionID sets the position edge to Position by id.
func (suo *SalaryUpdateOne) SetPositionID(id int) *SalaryUpdateOne {
	suo.mutation.SetPositionID(id)
	return suo
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (suo *SalaryUpdateOne) SetNillablePositionID(id *int) *SalaryUpdateOne {
	if id != nil {
		suo = suo.SetPositionID(*id)
	}
	return suo
}

// SetPosition sets the position edge to Position.
func (suo *SalaryUpdateOne) SetPosition(p *Position) *SalaryUpdateOne {
	return suo.SetPositionID(p.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (suo *SalaryUpdateOne) SetEmployeeID(id int) *SalaryUpdateOne {
	suo.mutation.SetEmployeeID(id)
	return suo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (suo *SalaryUpdateOne) SetNillableEmployeeID(id *int) *SalaryUpdateOne {
	if id != nil {
		suo = suo.SetEmployeeID(*id)
	}
	return suo
}

// SetEmployee sets the employee edge to Employee.
func (suo *SalaryUpdateOne) SetEmployee(e *Employee) *SalaryUpdateOne {
	return suo.SetEmployeeID(e.ID)
}

// Mutation returns the SalaryMutation object of the builder.
func (suo *SalaryUpdateOne) Mutation() *SalaryMutation {
	return suo.mutation
}

// ClearAssessment clears the assessment edge to Assessment.
func (suo *SalaryUpdateOne) ClearAssessment() *SalaryUpdateOne {
	suo.mutation.ClearAssessment()
	return suo
}

// ClearPosition clears the position edge to Position.
func (suo *SalaryUpdateOne) ClearPosition() *SalaryUpdateOne {
	suo.mutation.ClearPosition()
	return suo
}

// ClearEmployee clears the employee edge to Employee.
func (suo *SalaryUpdateOne) ClearEmployee() *SalaryUpdateOne {
	suo.mutation.ClearEmployee()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SalaryUpdateOne) Save(ctx context.Context) (*Salary, error) {
	if v, ok := suo.mutation.Salary(); ok {
		if err := salary.SalaryValidator(v); err != nil {
			return nil, &ValidationError{Name: "Salary", err: fmt.Errorf("ent: validator failed for field \"Salary\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Bonus(); ok {
		if err := salary.BonusValidator(v); err != nil {
			return nil, &ValidationError{Name: "Bonus", err: fmt.Errorf("ent: validator failed for field \"Bonus\": %w", err)}
		}
	}
	if v, ok := suo.mutation.IDEmployee(); ok {
		if err := salary.IDEmployeeValidator(v); err != nil {
			return nil, &ValidationError{Name: "IDEmployee", err: fmt.Errorf("ent: validator failed for field \"IDEmployee\": %w", err)}
		}
	}
	if v, ok := suo.mutation.AccountNumber(); ok {
		if err := salary.AccountNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "AccountNumber", err: fmt.Errorf("ent: validator failed for field \"AccountNumber\": %w", err)}
		}
	}

	var (
		err  error
		node *Salary
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SalaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SalaryUpdateOne) SaveX(ctx context.Context) *Salary {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SalaryUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SalaryUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SalaryUpdateOne) sqlSave(ctx context.Context) (s *Salary, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   salary.Table,
			Columns: salary.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salary.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Salary.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Salary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldSalary,
		})
	}
	if value, ok := suo.mutation.AddedSalary(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldSalary,
		})
	}
	if value, ok := suo.mutation.Bonus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldBonus,
		})
	}
	if value, ok := suo.mutation.AddedBonus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: salary.FieldBonus,
		})
	}
	if value, ok := suo.mutation.SalaryDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: salary.FieldSalaryDatetime,
		})
	}
	if value, ok := suo.mutation.IDEmployee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: salary.FieldIDEmployee,
		})
	}
	if value, ok := suo.mutation.AccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: salary.FieldAccountNumber,
		})
	}
	if suo.mutation.AssessmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.AssessmentTable,
			Columns: []string{salary.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: assessment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AssessmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.AssessmentTable,
			Columns: []string{salary.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: assessment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.PositionTable,
			Columns: []string{salary.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.PositionTable,
			Columns: []string{salary.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.EmployeeTable,
			Columns: []string{salary.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salary.EmployeeTable,
			Columns: []string{salary.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Salary{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salary.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
