// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tanapon395/playlist-video/ent/paymentchannel"
)

// Paymentchannel is the model entity for the Paymentchannel schema.
type Paymentchannel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Bank holds the value of the "Bank" field.
	Bank string `json:"Bank,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentchannelQuery when eager-loading is set.
	Edges PaymentchannelEdges `json:"edges"`
}

// PaymentchannelEdges holds the relations/edges for other nodes in the graph.
type PaymentchannelEdges struct {
	// Formpaymentchannel holds the value of the formpaymentchannel edge.
	Formpaymentchannel []*Orderonline
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FormpaymentchannelOrErr returns the Formpaymentchannel value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentchannelEdges) FormpaymentchannelOrErr() ([]*Orderonline, error) {
	if e.loadedTypes[0] {
		return e.Formpaymentchannel, nil
	}
	return nil, &NotLoadedError{edge: "formpaymentchannel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Paymentchannel) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Bank
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Paymentchannel fields.
func (pa *Paymentchannel) assignValues(values ...interface{}) error {
	if m, n := len(values), len(paymentchannel.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Bank", values[0])
	} else if value.Valid {
		pa.Bank = value.String
	}
	return nil
}

// QueryFormpaymentchannel queries the formpaymentchannel edge of the Paymentchannel.
func (pa *Paymentchannel) QueryFormpaymentchannel() *OrderonlineQuery {
	return (&PaymentchannelClient{config: pa.config}).QueryFormpaymentchannel(pa)
}

// Update returns a builder for updating this Paymentchannel.
// Note that, you need to call Paymentchannel.Unwrap() before calling this method, if this Paymentchannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Paymentchannel) Update() *PaymentchannelUpdateOne {
	return (&PaymentchannelClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Paymentchannel) Unwrap() *Paymentchannel {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Paymentchannel is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Paymentchannel) String() string {
	var builder strings.Builder
	builder.WriteString("Paymentchannel(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", Bank=")
	builder.WriteString(pa.Bank)
	builder.WriteByte(')')
	return builder.String()
}

// Paymentchannels is a parsable slice of Paymentchannel.
type Paymentchannels []*Paymentchannel

func (pa Paymentchannels) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
