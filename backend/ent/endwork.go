// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team13/app/ent/endwork"
)

// EndWork is the model entity for the EndWork schema.
type EndWork struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EndWork holds the value of the "EndWork" field.
	EndWork time.Time `json:"EndWork,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EndWorkQuery when eager-loading is set.
	Edges EndWorkEdges `json:"edges"`
}

// EndWorkEdges holds the relations/edges for other nodes in the graph.
type EndWorkEdges struct {
	// Whenendwork holds the value of the whenendwork edge.
	Whenendwork []*EmployeeWorkingHours
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WhenendworkOrErr returns the Whenendwork value or an error if the edge
// was not loaded in eager-loading.
func (e EndWorkEdges) WhenendworkOrErr() ([]*EmployeeWorkingHours, error) {
	if e.loadedTypes[0] {
		return e.Whenendwork, nil
	}
	return nil, &NotLoadedError{edge: "whenendwork"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EndWork) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // EndWork
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EndWork fields.
func (ew *EndWork) assignValues(values ...interface{}) error {
	if m, n := len(values), len(endwork.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ew.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field EndWork", values[0])
	} else if value.Valid {
		ew.EndWork = value.Time
	}
	return nil
}

// QueryWhenendwork queries the whenendwork edge of the EndWork.
func (ew *EndWork) QueryWhenendwork() *EmployeeWorkingHoursQuery {
	return (&EndWorkClient{config: ew.config}).QueryWhenendwork(ew)
}

// Update returns a builder for updating this EndWork.
// Note that, you need to call EndWork.Unwrap() before calling this method, if this EndWork
// was returned from a transaction, and the transaction was committed or rolled back.
func (ew *EndWork) Update() *EndWorkUpdateOne {
	return (&EndWorkClient{config: ew.config}).UpdateOne(ew)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ew *EndWork) Unwrap() *EndWork {
	tx, ok := ew.config.driver.(*txDriver)
	if !ok {
		panic("ent: EndWork is not a transactional entity")
	}
	ew.config.driver = tx.drv
	return ew
}

// String implements the fmt.Stringer.
func (ew *EndWork) String() string {
	var builder strings.Builder
	builder.WriteString("EndWork(")
	builder.WriteString(fmt.Sprintf("id=%v", ew.ID))
	builder.WriteString(", EndWork=")
	builder.WriteString(ew.EndWork.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EndWorks is a parsable slice of EndWork.
type EndWorks []*EndWork

func (ew EndWorks) config(cfg config) {
	for _i := range ew {
		ew[_i].config = cfg
	}
}
