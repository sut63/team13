// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/company"
	"github.com/tanapon395/playlist-video/ent/manager"
	"github.com/tanapon395/playlist-video/ent/orderproduct"
	"github.com/tanapon395/playlist-video/ent/product"
	"github.com/tanapon395/playlist-video/ent/typeproduct"
)

// OrderproductCreate is the builder for creating a Orderproduct entity.
type OrderproductCreate struct {
	config
	mutation *OrderproductMutation
	hooks    []Hook
}

// SetAddedtime sets the addedtime field.
func (oc *OrderproductCreate) SetAddedtime(t time.Time) *OrderproductCreate {
	oc.mutation.SetAddedtime(t)
	return oc
}

// SetStock sets the stock field.
func (oc *OrderproductCreate) SetStock(i int) *OrderproductCreate {
	oc.mutation.SetStock(i)
	return oc
}

// SetProductID sets the product edge to Product by id.
func (oc *OrderproductCreate) SetProductID(id int) *OrderproductCreate {
	oc.mutation.SetProductID(id)
	return oc
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (oc *OrderproductCreate) SetNillableProductID(id *int) *OrderproductCreate {
	if id != nil {
		oc = oc.SetProductID(*id)
	}
	return oc
}

// SetProduct sets the product edge to Product.
func (oc *OrderproductCreate) SetProduct(p *Product) *OrderproductCreate {
	return oc.SetProductID(p.ID)
}

// SetCompanyID sets the company edge to Company by id.
func (oc *OrderproductCreate) SetCompanyID(id int) *OrderproductCreate {
	oc.mutation.SetCompanyID(id)
	return oc
}

// SetNillableCompanyID sets the company edge to Company by id if the given value is not nil.
func (oc *OrderproductCreate) SetNillableCompanyID(id *int) *OrderproductCreate {
	if id != nil {
		oc = oc.SetCompanyID(*id)
	}
	return oc
}

// SetCompany sets the company edge to Company.
func (oc *OrderproductCreate) SetCompany(c *Company) *OrderproductCreate {
	return oc.SetCompanyID(c.ID)
}

// SetTypeproductID sets the Typeproduct edge to Typeproduct by id.
func (oc *OrderproductCreate) SetTypeproductID(id int) *OrderproductCreate {
	oc.mutation.SetTypeproductID(id)
	return oc
}

// SetNillableTypeproductID sets the Typeproduct edge to Typeproduct by id if the given value is not nil.
func (oc *OrderproductCreate) SetNillableTypeproductID(id *int) *OrderproductCreate {
	if id != nil {
		oc = oc.SetTypeproductID(*id)
	}
	return oc
}

// SetTypeproduct sets the Typeproduct edge to Typeproduct.
func (oc *OrderproductCreate) SetTypeproduct(t *Typeproduct) *OrderproductCreate {
	return oc.SetTypeproductID(t.ID)
}

// SetManagersID sets the managers edge to Manager by id.
func (oc *OrderproductCreate) SetManagersID(id int) *OrderproductCreate {
	oc.mutation.SetManagersID(id)
	return oc
}

// SetNillableManagersID sets the managers edge to Manager by id if the given value is not nil.
func (oc *OrderproductCreate) SetNillableManagersID(id *int) *OrderproductCreate {
	if id != nil {
		oc = oc.SetManagersID(*id)
	}
	return oc
}

// SetManagers sets the managers edge to Manager.
func (oc *OrderproductCreate) SetManagers(m *Manager) *OrderproductCreate {
	return oc.SetManagersID(m.ID)
}

// Mutation returns the OrderproductMutation object of the builder.
func (oc *OrderproductCreate) Mutation() *OrderproductMutation {
	return oc.mutation
}

// Save creates the Orderproduct in the database.
func (oc *OrderproductCreate) Save(ctx context.Context) (*Orderproduct, error) {
	if _, ok := oc.mutation.Addedtime(); !ok {
		return nil, &ValidationError{Name: "addedtime", err: errors.New("ent: missing required field \"addedtime\"")}
	}
	if _, ok := oc.mutation.Stock(); !ok {
		return nil, &ValidationError{Name: "stock", err: errors.New("ent: missing required field \"stock\"")}
	}
	var (
		err  error
		node *Orderproduct
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderproductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderproductCreate) SaveX(ctx context.Context) *Orderproduct {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OrderproductCreate) sqlSave(ctx context.Context) (*Orderproduct, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *OrderproductCreate) createSpec() (*Orderproduct, *sqlgraph.CreateSpec) {
	var (
		o     = &Orderproduct{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderproduct.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderproduct.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Addedtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderproduct.FieldAddedtime,
		})
		o.Addedtime = value
	}
	if value, ok := oc.mutation.Stock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderproduct.FieldStock,
		})
		o.Stock = value
	}
	if nodes := oc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.ProductTable,
			Columns: []string{orderproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.CompanyTable,
			Columns: []string{orderproduct.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TypeproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.TypeproductTable,
			Columns: []string{orderproduct.TypeproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.ManagersTable,
			Columns: []string{orderproduct.ManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: manager.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return o, _spec
}
