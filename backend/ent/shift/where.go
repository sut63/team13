// Code generated by entc, DO NOT EDIT.

package shift

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team13/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// TimeStart applies equality check predicate on the "TimeStart" field. It's identical to TimeStartEQ.
func TimeStart(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeStart), v))
	})
}

// TimeEnd applies equality check predicate on the "TimeEnd" field. It's identical to TimeEndEQ.
func TimeEnd(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeEnd), v))
	})
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Shift {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Shift {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TimeStartEQ applies the EQ predicate on the "TimeStart" field.
func TimeStartEQ(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeStart), v))
	})
}

// TimeStartNEQ applies the NEQ predicate on the "TimeStart" field.
func TimeStartNEQ(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeStart), v))
	})
}

// TimeStartIn applies the In predicate on the "TimeStart" field.
func TimeStartIn(vs ...time.Time) predicate.Shift {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeStart), v...))
	})
}

// TimeStartNotIn applies the NotIn predicate on the "TimeStart" field.
func TimeStartNotIn(vs ...time.Time) predicate.Shift {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeStart), v...))
	})
}

// TimeStartGT applies the GT predicate on the "TimeStart" field.
func TimeStartGT(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeStart), v))
	})
}

// TimeStartGTE applies the GTE predicate on the "TimeStart" field.
func TimeStartGTE(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeStart), v))
	})
}

// TimeStartLT applies the LT predicate on the "TimeStart" field.
func TimeStartLT(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeStart), v))
	})
}

// TimeStartLTE applies the LTE predicate on the "TimeStart" field.
func TimeStartLTE(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeStart), v))
	})
}

// TimeEndEQ applies the EQ predicate on the "TimeEnd" field.
func TimeEndEQ(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeEnd), v))
	})
}

// TimeEndNEQ applies the NEQ predicate on the "TimeEnd" field.
func TimeEndNEQ(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeEnd), v))
	})
}

// TimeEndIn applies the In predicate on the "TimeEnd" field.
func TimeEndIn(vs ...time.Time) predicate.Shift {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeEnd), v...))
	})
}

// TimeEndNotIn applies the NotIn predicate on the "TimeEnd" field.
func TimeEndNotIn(vs ...time.Time) predicate.Shift {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shift(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeEnd), v...))
	})
}

// TimeEndGT applies the GT predicate on the "TimeEnd" field.
func TimeEndGT(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeEnd), v))
	})
}

// TimeEndGTE applies the GTE predicate on the "TimeEnd" field.
func TimeEndGTE(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeEnd), v))
	})
}

// TimeEndLT applies the LT predicate on the "TimeEnd" field.
func TimeEndLT(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeEnd), v))
	})
}

// TimeEndLTE applies the LTE predicate on the "TimeEnd" field.
func TimeEndLTE(v time.Time) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeEnd), v))
	})
}

// HasWhen applies the HasEdge predicate on the "when" edge.
func HasWhen() predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WhenTable, WhenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhenWith applies the HasEdge predicate on the "when" edge with a given conditions (other predicates).
func HasWhenWith(preds ...predicate.EmployeeWorkingHours) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhenInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WhenTable, WhenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Shift) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Shift) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shift) predicate.Shift {
	return predicate.Shift(func(s *sql.Selector) {
		p(s.Not())
	})
}
