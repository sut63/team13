/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersEmployeeWorkingHours,
    ControllersEmployeeWorkingHoursFromJSON,
    ControllersEmployeeWorkingHoursToJSON,
    ControllersOrderonline,
    ControllersOrderonlineFromJSON,
    ControllersOrderonlineToJSON,
    ControllersOrderproduct,
    ControllersOrderproductFromJSON,
    ControllersOrderproductToJSON,
    ControllersPromotion,
    ControllersPromotionFromJSON,
    ControllersPromotionToJSON,
    ControllersSalary,
    ControllersSalaryFromJSON,
    ControllersSalaryToJSON,
    ControllersStock,
    ControllersStockFromJSON,
    ControllersStockToJSON,
    EntAssessment,
    EntAssessmentFromJSON,
    EntAssessmentToJSON,
    EntBeginWork,
    EntBeginWorkFromJSON,
    EntBeginWorkToJSON,
    EntCompany,
    EntCompanyFromJSON,
    EntCompanyToJSON,
    EntCustomer,
    EntCustomerFromJSON,
    EntCustomerToJSON,
    EntDay,
    EntDayFromJSON,
    EntDayToJSON,
    EntDiscount,
    EntDiscountFromJSON,
    EntDiscountToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntEmployeeWorkingHours,
    EntEmployeeWorkingHoursFromJSON,
    EntEmployeeWorkingHoursToJSON,
    EntGetOffWork,
    EntGetOffWorkFromJSON,
    EntGetOffWorkToJSON,
    EntGiveaway,
    EntGiveawayFromJSON,
    EntGiveawayToJSON,
    EntManager,
    EntManagerFromJSON,
    EntManagerToJSON,
    EntOrderonline,
    EntOrderonlineFromJSON,
    EntOrderonlineToJSON,
    EntOrderproduct,
    EntOrderproductFromJSON,
    EntOrderproductToJSON,
    EntPaymentchannel,
    EntPaymentchannelFromJSON,
    EntPaymentchannelToJSON,
    EntPosition,
    EntPositionFromJSON,
    EntPositionToJSON,
    EntProduct,
    EntProductFromJSON,
    EntProductToJSON,
    EntPromotion,
    EntPromotionFromJSON,
    EntPromotionToJSON,
    EntRole,
    EntRoleFromJSON,
    EntRoleToJSON,
    EntSalary,
    EntSalaryFromJSON,
    EntSalaryToJSON,
    EntStock,
    EntStockFromJSON,
    EntStockToJSON,
    EntTypeproduct,
    EntTypeproductFromJSON,
    EntTypeproductToJSON,
    EntZoneproduct,
    EntZoneproductFromJSON,
    EntZoneproductToJSON,
} from '../models';

export interface CreateAssessmentRequest {
    assessment: EntAssessment;
}

export interface CreateBeginworkRequest {
    beginwork: EntBeginWork;
}

export interface CreateCompanyRequest {
    company: EntCompany;
}

export interface CreateCustomerRequest {
    customer: EntCustomer;
}

export interface CreateDayRequest {
    day: EntDay;
}

export interface CreateDiscountRequest {
    discount: EntDiscount;
}

export interface CreateEmployeeRequest {
    employee: EntEmployee;
}

export interface CreateEmployeeworkinghoursRequest {
    employeeworkinghours: ControllersEmployeeWorkingHours;
}

export interface CreateGetoffworkRequest {
    getoffwork: EntGetOffWork;
}

export interface CreateGiveawayRequest {
    giveaway: EntGiveaway;
}

export interface CreateManagerRequest {
    manager: EntManager;
}

export interface CreateOrderonlineRequest {
    orderonline: ControllersOrderonline;
}

export interface CreateOrderproductRequest {
    orderproduct: ControllersOrderproduct;
}

export interface CreatePaymentchannelRequest {
    paymentchannel: EntPaymentchannel;
}

export interface CreatePositionRequest {
    position: EntPosition;
}

export interface CreateProductRequest {
    product: EntProduct;
}

export interface CreatePromotionRequest {
    promotion: ControllersPromotion;
}

export interface CreateRoleRequest {
    role: EntRole;
}

export interface CreateSalaryRequest {
    salary: ControllersSalary;
}

export interface CreateStockRequest {
    stock: ControllersStock;
}

export interface CreateTypeproductRequest {
    typeproduct: EntTypeproduct;
}

export interface CreateZoneproductRequest {
    zoneproduct: EntZoneproduct;
}

export interface DeleteAssessmentRequest {
    id: number;
}

export interface DeleteBeginworkRequest {
    id: number;
}

export interface DeleteCompanyRequest {
    id: number;
}

export interface DeleteDayRequest {
    id: number;
}

export interface DeleteDiscountRequest {
    id: number;
}

export interface DeleteEmployeeRequest {
    id: number;
}

export interface DeleteEmployeeworkinghoursRequest {
    id: number;
}

export interface DeleteGetoffworkRequest {
    id: number;
}

export interface DeleteGiveawayRequest {
    id: number;
}

export interface DeleteManagerRequest {
    id: number;
}

export interface DeleteOrderonlineRequest {
    id: number;
}

export interface DeleteOrderproductRequest {
    id: number;
}

export interface DeletePositionRequest {
    id: number;
}

export interface DeleteProductRequest {
    id: number;
}

export interface DeletePromotionRequest {
    id: number;
}

export interface DeleteRoleRequest {
    id: number;
}

export interface DeleteSalaryRequest {
    id: number;
}

export interface DeleteStockRequest {
    id: number;
}

export interface DeleteTypeproductRequest {
    id: number;
}

export interface DeleteZoneproductRequest {
    id: number;
}

export interface GetAssessmentRequest {
    id: number;
}

export interface GetBeginworkRequest {
    id: number;
}

export interface GetCompanyRequest {
    id: number;
}

export interface GetCustomerRequest {
    id: number;
}

export interface GetDayRequest {
    id: number;
}

export interface GetDiscountRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetEmployeeworkinghoursRequest {
    id: number;
}

export interface GetGetoffworkRequest {
    id: number;
}

export interface GetGiveawayRequest {
    id: number;
}

export interface GetManagerRequest {
    id: number;
}

export interface GetOrderonlineRequest {
    id: number;
}

export interface GetOrderproductRequest {
    id: number;
}

export interface GetPaymentchannelRequest {
    id: number;
}

export interface GetPositionRequest {
    id: number;
}

export interface GetProductRequest {
    id: number;
}

export interface GetPromotionRequest {
    id: number;
}

export interface GetRoleRequest {
    id: number;
}

export interface GetSalaryRequest {
    id: number;
}

export interface GetStockRequest {
    id: number;
}

export interface GetTypeproductRequest {
    id: number;
}

export interface GetZoneproductRequest {
    id: number;
}

export interface ListAssessmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListBeginworkRequest {
    limit?: number;
    offset?: number;
}

export interface ListCompanyRequest {
    limit?: number;
    offset?: number;
}

export interface ListCustomerRequest {
    limit?: number;
    offset?: number;
}

export interface ListDayRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiscountRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeworkinghoursRequest {
    limit?: number;
    offset?: number;
}

export interface ListGetoffworkRequest {
    limit?: number;
    offset?: number;
}

export interface ListGiveawayRequest {
    limit?: number;
    offset?: number;
}

export interface ListManagerRequest {
    limit?: number;
    offset?: number;
}

export interface ListOrderonlineRequest {
    limit?: number;
    offset?: number;
}

export interface ListOrderproductRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentchannelRequest {
    limit?: number;
    offset?: number;
}

export interface ListPositionRequest {
    limit?: number;
    offset?: number;
}

export interface ListProductRequest {
    limit?: number;
    offset?: number;
}

export interface ListPromotionRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoleRequest {
    limit?: number;
    offset?: number;
}

export interface ListSalaryRequest {
    limit?: number;
    offset?: number;
}

export interface ListStockRequest {
    limit?: number;
    offset?: number;
}

export interface ListTypeproductRequest {
    limit?: number;
    offset?: number;
}

export interface ListZoneproductRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAssessmentRequest {
    id: number;
    assessment: EntAssessment;
}

export interface UpdateBeginworkRequest {
    id: number;
    beginwork: EntBeginWork;
}

export interface UpdateCompanyRequest {
    id: number;
    company: EntCompany;
}

export interface UpdateDayRequest {
    id: number;
    day: EntDay;
}

export interface UpdateDiscountRequest {
    id: number;
    discount: EntDiscount;
}

export interface UpdateEmployeeRequest {
    id: number;
    employee: EntEmployee;
}

export interface UpdateEmployeeworkinghoursRequest {
    id: number;
    employeeworkinghours: EntEmployeeWorkingHours;
}

export interface UpdateGetoffworkRequest {
    id: number;
    getoffwork: EntGetOffWork;
}

export interface UpdateGiveawayRequest {
    id: number;
    giveaway: EntGiveaway;
}

export interface UpdateManagerRequest {
    id: number;
    manager: EntManager;
}

export interface UpdateOrderproductRequest {
    id: number;
    orderproduct: EntOrderproduct;
}

export interface UpdatePositionRequest {
    id: number;
    position: EntPosition;
}

export interface UpdateProductRequest {
    id: number;
    product: EntProduct;
}

export interface UpdateRoleRequest {
    id: number;
    role: EntRole;
}

export interface UpdateStockRequest {
    id: number;
    stock: EntStock;
}

export interface UpdateTypeproductRequest {
    id: number;
    typeproduct: EntTypeproduct;
}

export interface UpdateZoneproductRequest {
    id: number;
    zoneproduct: EntZoneproduct;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create assessment
     * Create assessment
     */
    async createAssessmentRaw(requestParameters: CreateAssessmentRequest): Promise<runtime.ApiResponse<EntAssessment>> {
        if (requestParameters.assessment === null || requestParameters.assessment === undefined) {
            throw new runtime.RequiredError('assessment','Required parameter requestParameters.assessment was null or undefined when calling createAssessment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/assessments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAssessmentToJSON(requestParameters.assessment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAssessmentFromJSON(jsonValue));
    }

    /**
     * Create assessment
     * Create assessment
     */
    async createAssessment(requestParameters: CreateAssessmentRequest): Promise<EntAssessment> {
        const response = await this.createAssessmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create beginwork
     * Create beginwork
     */
    async createBeginworkRaw(requestParameters: CreateBeginworkRequest): Promise<runtime.ApiResponse<EntBeginWork>> {
        if (requestParameters.beginwork === null || requestParameters.beginwork === undefined) {
            throw new runtime.RequiredError('beginwork','Required parameter requestParameters.beginwork was null or undefined when calling createBeginwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beginworks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBeginWorkToJSON(requestParameters.beginwork),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBeginWorkFromJSON(jsonValue));
    }

    /**
     * Create beginwork
     * Create beginwork
     */
    async createBeginwork(requestParameters: CreateBeginworkRequest): Promise<EntBeginWork> {
        const response = await this.createBeginworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create company
     * Create company
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest): Promise<runtime.ApiResponse<EntCompany>> {
        if (requestParameters.company === null || requestParameters.company === undefined) {
            throw new runtime.RequiredError('company','Required parameter requestParameters.company was null or undefined when calling createCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/companys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCompanyToJSON(requestParameters.company),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCompanyFromJSON(jsonValue));
    }

    /**
     * Create company
     * Create company
     */
    async createCompany(requestParameters: CreateCompanyRequest): Promise<EntCompany> {
        const response = await this.createCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling createCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCustomerToJSON(requestParameters.customer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<EntCustomer> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create day
     * Create day
     */
    async createDayRaw(requestParameters: CreateDayRequest): Promise<runtime.ApiResponse<EntDay>> {
        if (requestParameters.day === null || requestParameters.day === undefined) {
            throw new runtime.RequiredError('day','Required parameter requestParameters.day was null or undefined when calling createDay.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/days`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDayToJSON(requestParameters.day),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDayFromJSON(jsonValue));
    }

    /**
     * Create day
     * Create day
     */
    async createDay(requestParameters: CreateDayRequest): Promise<EntDay> {
        const response = await this.createDayRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create discount
     * Create discount
     */
    async createDiscountRaw(requestParameters: CreateDiscountRequest): Promise<runtime.ApiResponse<EntDiscount>> {
        if (requestParameters.discount === null || requestParameters.discount === undefined) {
            throw new runtime.RequiredError('discount','Required parameter requestParameters.discount was null or undefined when calling createDiscount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/discounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiscountToJSON(requestParameters.discount),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiscountFromJSON(jsonValue));
    }

    /**
     * Create discount
     * Create discount
     */
    async createDiscount(requestParameters: CreateDiscountRequest): Promise<EntDiscount> {
        const response = await this.createDiscountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employeeworkinghours
     * Create employeeworkinghours
     */
    async createEmployeeworkinghoursRaw(requestParameters: CreateEmployeeworkinghoursRequest): Promise<runtime.ApiResponse<EntEmployeeWorkingHours>> {
        if (requestParameters.employeeworkinghours === null || requestParameters.employeeworkinghours === undefined) {
            throw new runtime.RequiredError('employeeworkinghours','Required parameter requestParameters.employeeworkinghours was null or undefined when calling createEmployeeworkinghours.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employeeworkinghourss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersEmployeeWorkingHoursToJSON(requestParameters.employeeworkinghours),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeWorkingHoursFromJSON(jsonValue));
    }

    /**
     * Create employeeworkinghours
     * Create employeeworkinghours
     */
    async createEmployeeworkinghours(requestParameters: CreateEmployeeworkinghoursRequest): Promise<EntEmployeeWorkingHours> {
        const response = await this.createEmployeeworkinghoursRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create getoffwork
     * Create getoffwork
     */
    async createGetoffworkRaw(requestParameters: CreateGetoffworkRequest): Promise<runtime.ApiResponse<EntGetOffWork>> {
        if (requestParameters.getoffwork === null || requestParameters.getoffwork === undefined) {
            throw new runtime.RequiredError('getoffwork','Required parameter requestParameters.getoffwork was null or undefined when calling createGetoffwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getoffworks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGetOffWorkToJSON(requestParameters.getoffwork),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGetOffWorkFromJSON(jsonValue));
    }

    /**
     * Create getoffwork
     * Create getoffwork
     */
    async createGetoffwork(requestParameters: CreateGetoffworkRequest): Promise<EntGetOffWork> {
        const response = await this.createGetoffworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create giveaway
     * Create giveaway
     */
    async createGiveawayRaw(requestParameters: CreateGiveawayRequest): Promise<runtime.ApiResponse<EntGiveaway>> {
        if (requestParameters.giveaway === null || requestParameters.giveaway === undefined) {
            throw new runtime.RequiredError('giveaway','Required parameter requestParameters.giveaway was null or undefined when calling createGiveaway.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/giveaways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGiveawayToJSON(requestParameters.giveaway),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGiveawayFromJSON(jsonValue));
    }

    /**
     * Create giveaway
     * Create giveaway
     */
    async createGiveaway(requestParameters: CreateGiveawayRequest): Promise<EntGiveaway> {
        const response = await this.createGiveawayRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create manager
     * Create manager
     */
    async createManagerRaw(requestParameters: CreateManagerRequest): Promise<runtime.ApiResponse<EntManager>> {
        if (requestParameters.manager === null || requestParameters.manager === undefined) {
            throw new runtime.RequiredError('manager','Required parameter requestParameters.manager was null or undefined when calling createManager.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/managers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntManagerToJSON(requestParameters.manager),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntManagerFromJSON(jsonValue));
    }

    /**
     * Create manager
     * Create manager
     */
    async createManager(requestParameters: CreateManagerRequest): Promise<EntManager> {
        const response = await this.createManagerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create orderonline
     * Create orderonline
     */
    async createOrderonlineRaw(requestParameters: CreateOrderonlineRequest): Promise<runtime.ApiResponse<ControllersOrderonline>> {
        if (requestParameters.orderonline === null || requestParameters.orderonline === undefined) {
            throw new runtime.RequiredError('orderonline','Required parameter requestParameters.orderonline was null or undefined when calling createOrderonline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/orderonlines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersOrderonlineToJSON(requestParameters.orderonline),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersOrderonlineFromJSON(jsonValue));
    }

    /**
     * Create orderonline
     * Create orderonline
     */
    async createOrderonline(requestParameters: CreateOrderonlineRequest): Promise<ControllersOrderonline> {
        const response = await this.createOrderonlineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create orderproduct
     * Create orderproduct
     */
    async createOrderproductRaw(requestParameters: CreateOrderproductRequest): Promise<runtime.ApiResponse<ControllersOrderproduct>> {
        if (requestParameters.orderproduct === null || requestParameters.orderproduct === undefined) {
            throw new runtime.RequiredError('orderproduct','Required parameter requestParameters.orderproduct was null or undefined when calling createOrderproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/orderproducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersOrderproductToJSON(requestParameters.orderproduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersOrderproductFromJSON(jsonValue));
    }

    /**
     * Create orderproduct
     * Create orderproduct
     */
    async createOrderproduct(requestParameters: CreateOrderproductRequest): Promise<ControllersOrderproduct> {
        const response = await this.createOrderproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create paymentchannel
     * Create paymentchannel
     */
    async createPaymentchannelRaw(requestParameters: CreatePaymentchannelRequest): Promise<runtime.ApiResponse<EntPaymentchannel>> {
        if (requestParameters.paymentchannel === null || requestParameters.paymentchannel === undefined) {
            throw new runtime.RequiredError('paymentchannel','Required parameter requestParameters.paymentchannel was null or undefined when calling createPaymentchannel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paymentchannels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentchannelToJSON(requestParameters.paymentchannel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentchannelFromJSON(jsonValue));
    }

    /**
     * Create paymentchannel
     * Create paymentchannel
     */
    async createPaymentchannel(requestParameters: CreatePaymentchannelRequest): Promise<EntPaymentchannel> {
        const response = await this.createPaymentchannelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create position
     * Create position
     */
    async createPositionRaw(requestParameters: CreatePositionRequest): Promise<runtime.ApiResponse<EntPosition>> {
        if (requestParameters.position === null || requestParameters.position === undefined) {
            throw new runtime.RequiredError('position','Required parameter requestParameters.position was null or undefined when calling createPosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/positions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPositionToJSON(requestParameters.position),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionFromJSON(jsonValue));
    }

    /**
     * Create position
     * Create position
     */
    async createPosition(requestParameters: CreatePositionRequest): Promise<EntPosition> {
        const response = await this.createPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create product
     * Create product
     */
    async createProductRaw(requestParameters: CreateProductRequest): Promise<runtime.ApiResponse<EntProduct>> {
        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling createProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntProductToJSON(requestParameters.product),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProductFromJSON(jsonValue));
    }

    /**
     * Create product
     * Create product
     */
    async createProduct(requestParameters: CreateProductRequest): Promise<EntProduct> {
        const response = await this.createProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotionRaw(requestParameters: CreatePromotionRequest): Promise<runtime.ApiResponse<ControllersPromotion>> {
        if (requestParameters.promotion === null || requestParameters.promotion === undefined) {
            throw new runtime.RequiredError('promotion','Required parameter requestParameters.promotion was null or undefined when calling createPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/promotions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPromotionToJSON(requestParameters.promotion),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPromotionFromJSON(jsonValue));
    }

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotion(requestParameters: CreatePromotionRequest): Promise<ControllersPromotion> {
        const response = await this.createPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create role
     * Create role
     */
    async createRoleRaw(requestParameters: CreateRoleRequest): Promise<runtime.ApiResponse<EntRole>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling createRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoleToJSON(requestParameters.role),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoleFromJSON(jsonValue));
    }

    /**
     * Create role
     * Create role
     */
    async createRole(requestParameters: CreateRoleRequest): Promise<EntRole> {
        const response = await this.createRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create salary
     * Create salary
     */
    async createSalaryRaw(requestParameters: CreateSalaryRequest): Promise<runtime.ApiResponse<EntSalary>> {
        if (requestParameters.salary === null || requestParameters.salary === undefined) {
            throw new runtime.RequiredError('salary','Required parameter requestParameters.salary was null or undefined when calling createSalary.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/salarys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersSalaryToJSON(requestParameters.salary),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSalaryFromJSON(jsonValue));
    }

    /**
     * Create salary
     * Create salary
     */
    async createSalary(requestParameters: CreateSalaryRequest): Promise<EntSalary> {
        const response = await this.createSalaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create stock
     * Create stock
     */
    async createStockRaw(requestParameters: CreateStockRequest): Promise<runtime.ApiResponse<ControllersStock>> {
        if (requestParameters.stock === null || requestParameters.stock === undefined) {
            throw new runtime.RequiredError('stock','Required parameter requestParameters.stock was null or undefined when calling createStock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersStockToJSON(requestParameters.stock),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersStockFromJSON(jsonValue));
    }

    /**
     * Create stock
     * Create stock
     */
    async createStock(requestParameters: CreateStockRequest): Promise<ControllersStock> {
        const response = await this.createStockRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create typeproduct
     * Create typeproduct
     */
    async createTypeproductRaw(requestParameters: CreateTypeproductRequest): Promise<runtime.ApiResponse<EntTypeproduct>> {
        if (requestParameters.typeproduct === null || requestParameters.typeproduct === undefined) {
            throw new runtime.RequiredError('typeproduct','Required parameter requestParameters.typeproduct was null or undefined when calling createTypeproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/typeproducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypeproductToJSON(requestParameters.typeproduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeproductFromJSON(jsonValue));
    }

    /**
     * Create typeproduct
     * Create typeproduct
     */
    async createTypeproduct(requestParameters: CreateTypeproductRequest): Promise<EntTypeproduct> {
        const response = await this.createTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create zoneproduct
     * Create zoneproduct
     */
    async createZoneproductRaw(requestParameters: CreateZoneproductRequest): Promise<runtime.ApiResponse<EntZoneproduct>> {
        if (requestParameters.zoneproduct === null || requestParameters.zoneproduct === undefined) {
            throw new runtime.RequiredError('zoneproduct','Required parameter requestParameters.zoneproduct was null or undefined when calling createZoneproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/zoneproducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntZoneproductToJSON(requestParameters.zoneproduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntZoneproductFromJSON(jsonValue));
    }

    /**
     * Create zoneproduct
     * Create zoneproduct
     */
    async createZoneproduct(requestParameters: CreateZoneproductRequest): Promise<EntZoneproduct> {
        const response = await this.createZoneproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get assessment by ID
     * Delete a assessment entity by ID
     */
    async deleteAssessmentRaw(requestParameters: DeleteAssessmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAssessment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assessments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get assessment by ID
     * Delete a assessment entity by ID
     */
    async deleteAssessment(requestParameters: DeleteAssessmentRequest): Promise<object> {
        const response = await this.deleteAssessmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get beginwork by ID
     * Delete a beginwork entity by ID
     */
    async deleteBeginworkRaw(requestParameters: DeleteBeginworkRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBeginwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beginworks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get beginwork by ID
     * Delete a beginwork entity by ID
     */
    async deleteBeginwork(requestParameters: DeleteBeginworkRequest): Promise<object> {
        const response = await this.deleteBeginworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * get company by ID
     * Delete a company entity by ID
     */
    async deleteCompanyRaw(requestParameters: DeleteCompanyRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/companys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get company by ID
     * Delete a company entity by ID
     */
    async deleteCompany(requestParameters: DeleteCompanyRequest): Promise<object> {
        const response = await this.deleteCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get day by ID
     * Delete a day entity by ID
     */
    async deleteDayRaw(requestParameters: DeleteDayRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDay.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/days/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get day by ID
     * Delete a day entity by ID
     */
    async deleteDay(requestParameters: DeleteDayRequest): Promise<object> {
        const response = await this.deleteDayRaw(requestParameters);
        return await response.value();
    }

    /**
     * get discount by ID
     * Delete a discount entity by ID
     */
    async deleteDiscountRaw(requestParameters: DeleteDiscountRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDiscount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get discount by ID
     * Delete a discount entity by ID
     */
    async deleteDiscount(requestParameters: DeleteDiscountRequest): Promise<object> {
        const response = await this.deleteDiscountRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<object> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employeeworkinghours by ID
     * Delete a employeeworkinghours entity by ID
     */
    async deleteEmployeeworkinghoursRaw(requestParameters: DeleteEmployeeworkinghoursRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployeeworkinghours.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employeeworkinghourss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employeeworkinghours by ID
     * Delete a employeeworkinghours entity by ID
     */
    async deleteEmployeeworkinghours(requestParameters: DeleteEmployeeworkinghoursRequest): Promise<object> {
        const response = await this.deleteEmployeeworkinghoursRaw(requestParameters);
        return await response.value();
    }

    /**
     * get getoffwork by ID
     * Delete a getoffwork entity by ID
     */
    async deleteGetoffworkRaw(requestParameters: DeleteGetoffworkRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGetoffwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/getoffworks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get getoffwork by ID
     * Delete a getoffwork entity by ID
     */
    async deleteGetoffwork(requestParameters: DeleteGetoffworkRequest): Promise<object> {
        const response = await this.deleteGetoffworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * get giveaway by ID
     * Delete a giveaway entity by ID
     */
    async deleteGiveawayRaw(requestParameters: DeleteGiveawayRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGiveaway.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/giveaways/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get giveaway by ID
     * Delete a giveaway entity by ID
     */
    async deleteGiveaway(requestParameters: DeleteGiveawayRequest): Promise<object> {
        const response = await this.deleteGiveawayRaw(requestParameters);
        return await response.value();
    }

    /**
     * get manager by ID
     * Delete a manager entity by ID
     */
    async deleteManagerRaw(requestParameters: DeleteManagerRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteManager.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/managers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get manager by ID
     * Delete a manager entity by ID
     */
    async deleteManager(requestParameters: DeleteManagerRequest): Promise<object> {
        const response = await this.deleteManagerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get orderonline by ID
     * Delete a orderonline entity by ID
     */
    async deleteOrderonlineRaw(requestParameters: DeleteOrderonlineRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrderonline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orderonlines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get orderonline by ID
     * Delete a orderonline entity by ID
     */
    async deleteOrderonline(requestParameters: DeleteOrderonlineRequest): Promise<object> {
        const response = await this.deleteOrderonlineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get orderproduct by ID
     * Delete a orderproduct entity by ID
     */
    async deleteOrderproductRaw(requestParameters: DeleteOrderproductRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrderproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orderproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get orderproduct by ID
     * Delete a orderproduct entity by ID
     */
    async deleteOrderproduct(requestParameters: DeleteOrderproductRequest): Promise<object> {
        const response = await this.deleteOrderproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get position by ID
     * Delete a position entity by ID
     */
    async deletePositionRaw(requestParameters: DeletePositionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get position by ID
     * Delete a position entity by ID
     */
    async deletePosition(requestParameters: DeletePositionRequest): Promise<object> {
        const response = await this.deletePositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get product by ID
     * Delete a product entity by ID
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get product by ID
     * Delete a product entity by ID
     */
    async deleteProduct(requestParameters: DeleteProductRequest): Promise<object> {
        const response = await this.deleteProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get promotion by ID
     * Delete a promotion entity by ID
     */
    async deletePromotionRaw(requestParameters: DeletePromotionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get promotion by ID
     * Delete a promotion entity by ID
     */
    async deletePromotion(requestParameters: DeletePromotionRequest): Promise<object> {
        const response = await this.deletePromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get role by ID
     * Delete a role entity by ID
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get role by ID
     * Delete a role entity by ID
     */
    async deleteRole(requestParameters: DeleteRoleRequest): Promise<object> {
        const response = await this.deleteRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get salary by ID
     * Delete a salary entity by ID
     */
    async deleteSalaryRaw(requestParameters: DeleteSalaryRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSalary.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salarys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get salary by ID
     * Delete a salary entity by ID
     */
    async deleteSalary(requestParameters: DeleteSalaryRequest): Promise<object> {
        const response = await this.deleteSalaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get stock by ID
     * Delete a stock entity by ID
     */
    async deleteStockRaw(requestParameters: DeleteStockRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stocks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get stock by ID
     * Delete a stock entity by ID
     */
    async deleteStock(requestParameters: DeleteStockRequest): Promise<object> {
        const response = await this.deleteStockRaw(requestParameters);
        return await response.value();
    }

    /**
     * get typeproduct by ID
     * Delete a typeproduct entity by ID
     */
    async deleteTypeproductRaw(requestParameters: DeleteTypeproductRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTypeproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typeproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get typeproduct by ID
     * Delete a typeproduct entity by ID
     */
    async deleteTypeproduct(requestParameters: DeleteTypeproductRequest): Promise<object> {
        const response = await this.deleteTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get zoneproduct by ID
     * Delete a zoneproduct entity by ID
     */
    async deleteZoneproductRaw(requestParameters: DeleteZoneproductRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteZoneproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/zoneproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get zoneproduct by ID
     * Delete a zoneproduct entity by ID
     */
    async deleteZoneproduct(requestParameters: DeleteZoneproductRequest): Promise<object> {
        const response = await this.deleteZoneproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get assessment by ID
     * Get a assessment entity by ID
     */
    async getAssessmentRaw(requestParameters: GetAssessmentRequest): Promise<runtime.ApiResponse<EntAssessment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAssessment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assessments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAssessmentFromJSON(jsonValue));
    }

    /**
     * get assessment by ID
     * Get a assessment entity by ID
     */
    async getAssessment(requestParameters: GetAssessmentRequest): Promise<EntAssessment> {
        const response = await this.getAssessmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get beginwork by ID
     * Get a beginwork entity by ID
     */
    async getBeginworkRaw(requestParameters: GetBeginworkRequest): Promise<runtime.ApiResponse<EntBeginWork>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBeginwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beginworks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBeginWorkFromJSON(jsonValue));
    }

    /**
     * get beginwork by ID
     * Get a beginwork entity by ID
     */
    async getBeginwork(requestParameters: GetBeginworkRequest): Promise<EntBeginWork> {
        const response = await this.getBeginworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * get company by ID
     * Get a company entity by ID
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest): Promise<runtime.ApiResponse<EntCompany>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/companys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCompanyFromJSON(jsonValue));
    }

    /**
     * get company by ID
     * Get a company entity by ID
     */
    async getCompany(requestParameters: GetCompanyRequest): Promise<EntCompany> {
        const response = await this.getCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<EntCustomer> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get day by ID
     * Get a day entity by ID
     */
    async getDayRaw(requestParameters: GetDayRequest): Promise<runtime.ApiResponse<EntDay>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDay.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/days/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDayFromJSON(jsonValue));
    }

    /**
     * get day by ID
     * Get a day entity by ID
     */
    async getDay(requestParameters: GetDayRequest): Promise<EntDay> {
        const response = await this.getDayRaw(requestParameters);
        return await response.value();
    }

    /**
     * get discount by ID
     * Get a discount entity by ID
     */
    async getDiscountRaw(requestParameters: GetDiscountRequest): Promise<runtime.ApiResponse<EntDiscount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDiscount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiscountFromJSON(jsonValue));
    }

    /**
     * get discount by ID
     * Get a discount entity by ID
     */
    async getDiscount(requestParameters: GetDiscountRequest): Promise<EntDiscount> {
        const response = await this.getDiscountRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employeeworkinghours by ID
     * Get a employeeworkinghours entity by ID
     */
    async getEmployeeworkinghoursRaw(requestParameters: GetEmployeeworkinghoursRequest): Promise<runtime.ApiResponse<Array<EntEmployeeWorkingHours>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployeeworkinghours.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employeeworkinghourss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeWorkingHoursFromJSON));
    }

    /**
     * get employeeworkinghours by ID
     * Get a employeeworkinghours entity by ID
     */
    async getEmployeeworkinghours(requestParameters: GetEmployeeworkinghoursRequest): Promise<Array<EntEmployeeWorkingHours>> {
        const response = await this.getEmployeeworkinghoursRaw(requestParameters);
        return await response.value();
    }

    /**
     * get getoffwork by ID
     * Get a getoffwork entity by ID
     */
    async getGetoffworkRaw(requestParameters: GetGetoffworkRequest): Promise<runtime.ApiResponse<EntGetOffWork>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetoffwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/getoffworks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGetOffWorkFromJSON(jsonValue));
    }

    /**
     * get getoffwork by ID
     * Get a getoffwork entity by ID
     */
    async getGetoffwork(requestParameters: GetGetoffworkRequest): Promise<EntGetOffWork> {
        const response = await this.getGetoffworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * get giveaway by ID
     * Get a giveaway entity by ID
     */
    async getGiveawayRaw(requestParameters: GetGiveawayRequest): Promise<runtime.ApiResponse<EntGiveaway>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGiveaway.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/giveaways/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGiveawayFromJSON(jsonValue));
    }

    /**
     * get giveaway by ID
     * Get a giveaway entity by ID
     */
    async getGiveaway(requestParameters: GetGiveawayRequest): Promise<EntGiveaway> {
        const response = await this.getGiveawayRaw(requestParameters);
        return await response.value();
    }

    /**
     * get manager by ID
     * Get a manager entity by ID
     */
    async getManagerRaw(requestParameters: GetManagerRequest): Promise<runtime.ApiResponse<EntManager>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getManager.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/managers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntManagerFromJSON(jsonValue));
    }

    /**
     * get manager by ID
     * Get a manager entity by ID
     */
    async getManager(requestParameters: GetManagerRequest): Promise<EntManager> {
        const response = await this.getManagerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get orderonline by ID
     * Get a orderonline entity by ID
     */
    async getOrderonlineRaw(requestParameters: GetOrderonlineRequest): Promise<runtime.ApiResponse<Array<EntOrderonline>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrderonline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orderonlines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOrderonlineFromJSON));
    }

    /**
     * get orderonline by ID
     * Get a orderonline entity by ID
     */
    async getOrderonline(requestParameters: GetOrderonlineRequest): Promise<Array<EntOrderonline>> {
        const response = await this.getOrderonlineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get orderproduct by ID
     * Get a orderproduct entity by ID
     */
    async getOrderproductRaw(requestParameters: GetOrderproductRequest): Promise<runtime.ApiResponse<Array<EntOrderproduct>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrderproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orderproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOrderproductFromJSON));
    }

    /**
     * get orderproduct by ID
     * Get a orderproduct entity by ID
     */
    async getOrderproduct(requestParameters: GetOrderproductRequest): Promise<Array<EntOrderproduct>> {
        const response = await this.getOrderproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paymentchannel by ID
     * Get a paymentchannel entity by ID
     */
    async getPaymentchannelRaw(requestParameters: GetPaymentchannelRequest): Promise<runtime.ApiResponse<EntPaymentchannel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaymentchannel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymentchannels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentchannelFromJSON(jsonValue));
    }

    /**
     * get paymentchannel by ID
     * Get a paymentchannel entity by ID
     */
    async getPaymentchannel(requestParameters: GetPaymentchannelRequest): Promise<EntPaymentchannel> {
        const response = await this.getPaymentchannelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get position by ID
     * Get a position entity by ID
     */
    async getPositionRaw(requestParameters: GetPositionRequest): Promise<runtime.ApiResponse<EntPosition>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionFromJSON(jsonValue));
    }

    /**
     * get position by ID
     * Get a position entity by ID
     */
    async getPosition(requestParameters: GetPositionRequest): Promise<EntPosition> {
        const response = await this.getPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get product by ID
     * Get a product entity by ID
     */
    async getProductRaw(requestParameters: GetProductRequest): Promise<runtime.ApiResponse<EntProduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProductFromJSON(jsonValue));
    }

    /**
     * get product by ID
     * Get a product entity by ID
     */
    async getProduct(requestParameters: GetProductRequest): Promise<EntProduct> {
        const response = await this.getProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotionRaw(requestParameters: GetPromotionRequest): Promise<runtime.ApiResponse<Array<EntPromotion>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPromotionFromJSON));
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotion(requestParameters: GetPromotionRequest): Promise<Array<EntPromotion>> {
        const response = await this.getPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get role by ID
     * Get a role entity by ID
     */
    async getRoleRaw(requestParameters: GetRoleRequest): Promise<runtime.ApiResponse<EntRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoleFromJSON(jsonValue));
    }

    /**
     * get role by ID
     * Get a role entity by ID
     */
    async getRole(requestParameters: GetRoleRequest): Promise<EntRole> {
        const response = await this.getRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get salary by ID
     * Get a salary entity by ID
     */
    async getSalaryRaw(requestParameters: GetSalaryRequest): Promise<runtime.ApiResponse<Array<EntSalary>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSalary.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salarys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSalaryFromJSON));
    }

    /**
     * get salary by ID
     * Get a salary entity by ID
     */
    async getSalary(requestParameters: GetSalaryRequest): Promise<Array<EntSalary>> {
        const response = await this.getSalaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get stock by ID
     * Get a stock entity by ID
     */
    async getStockRaw(requestParameters: GetStockRequest): Promise<runtime.ApiResponse<Array<EntStock>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stocks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStockFromJSON));
    }

    /**
     * get stock by ID
     * Get a stock entity by ID
     */
    async getStock(requestParameters: GetStockRequest): Promise<Array<EntStock>> {
        const response = await this.getStockRaw(requestParameters);
        return await response.value();
    }

    /**
     * get typeproduct by ID
     * Get a typeproduct entity by ID
     */
    async getTypeproductRaw(requestParameters: GetTypeproductRequest): Promise<runtime.ApiResponse<EntTypeproduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTypeproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typeproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeproductFromJSON(jsonValue));
    }

    /**
     * get typeproduct by ID
     * Get a typeproduct entity by ID
     */
    async getTypeproduct(requestParameters: GetTypeproductRequest): Promise<EntTypeproduct> {
        const response = await this.getTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get zoneproduct by ID
     * Get a zoneproduct entity by ID
     */
    async getZoneproductRaw(requestParameters: GetZoneproductRequest): Promise<runtime.ApiResponse<EntZoneproduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getZoneproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/zoneproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntZoneproductFromJSON(jsonValue));
    }

    /**
     * get zoneproduct by ID
     * Get a zoneproduct entity by ID
     */
    async getZoneproduct(requestParameters: GetZoneproductRequest): Promise<EntZoneproduct> {
        const response = await this.getZoneproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list assessment entities
     * List assessment entities
     */
    async listAssessmentRaw(requestParameters: ListAssessmentRequest): Promise<runtime.ApiResponse<Array<EntAssessment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assessments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAssessmentFromJSON));
    }

    /**
     * list assessment entities
     * List assessment entities
     */
    async listAssessment(requestParameters: ListAssessmentRequest): Promise<Array<EntAssessment>> {
        const response = await this.listAssessmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list beginwork entities
     * List beginwork entities
     */
    async listBeginworkRaw(requestParameters: ListBeginworkRequest): Promise<runtime.ApiResponse<Array<EntBeginWork>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beginworks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBeginWorkFromJSON));
    }

    /**
     * list beginwork entities
     * List beginwork entities
     */
    async listBeginwork(requestParameters: ListBeginworkRequest): Promise<Array<EntBeginWork>> {
        const response = await this.listBeginworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * list company entities
     * List company entities
     */
    async listCompanyRaw(requestParameters: ListCompanyRequest): Promise<runtime.ApiResponse<Array<EntCompany>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/companys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCompanyFromJSON));
    }

    /**
     * list company entities
     * List company entities
     */
    async listCompany(requestParameters: ListCompanyRequest): Promise<Array<EntCompany>> {
        const response = await this.listCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomerRaw(requestParameters: ListCustomerRequest): Promise<runtime.ApiResponse<Array<EntCustomer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCustomerFromJSON));
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomer(requestParameters: ListCustomerRequest): Promise<Array<EntCustomer>> {
        const response = await this.listCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list day entities
     * List day entities
     */
    async listDayRaw(requestParameters: ListDayRequest): Promise<runtime.ApiResponse<Array<EntDay>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/days`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDayFromJSON));
    }

    /**
     * list day entities
     * List day entities
     */
    async listDay(requestParameters: ListDayRequest): Promise<Array<EntDay>> {
        const response = await this.listDayRaw(requestParameters);
        return await response.value();
    }

    /**
     * list discount entities
     * List discount entities
     */
    async listDiscountRaw(requestParameters: ListDiscountRequest): Promise<runtime.ApiResponse<Array<EntDiscount>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/discounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiscountFromJSON));
    }

    /**
     * list discount entities
     * List discount entities
     */
    async listDiscount(requestParameters: ListDiscountRequest): Promise<Array<EntDiscount>> {
        const response = await this.listDiscountRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employeeworkinghours entities
     * List employeeworkinghours entities
     */
    async listEmployeeworkinghoursRaw(requestParameters: ListEmployeeworkinghoursRequest): Promise<runtime.ApiResponse<Array<EntEmployeeWorkingHours>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employeeworkinghourss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeWorkingHoursFromJSON));
    }

    /**
     * list employeeworkinghours entities
     * List employeeworkinghours entities
     */
    async listEmployeeworkinghours(requestParameters: ListEmployeeworkinghoursRequest): Promise<Array<EntEmployeeWorkingHours>> {
        const response = await this.listEmployeeworkinghoursRaw(requestParameters);
        return await response.value();
    }

    /**
     * list getoffwork entities
     * List getoffwork entities
     */
    async listGetoffworkRaw(requestParameters: ListGetoffworkRequest): Promise<runtime.ApiResponse<Array<EntGetOffWork>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/getoffworks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGetOffWorkFromJSON));
    }

    /**
     * list getoffwork entities
     * List getoffwork entities
     */
    async listGetoffwork(requestParameters: ListGetoffworkRequest): Promise<Array<EntGetOffWork>> {
        const response = await this.listGetoffworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * list giveaway entities
     * List giveaway entities
     */
    async listGiveawayRaw(requestParameters: ListGiveawayRequest): Promise<runtime.ApiResponse<Array<EntGiveaway>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/giveaways`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGiveawayFromJSON));
    }

    /**
     * list giveaway entities
     * List giveaway entities
     */
    async listGiveaway(requestParameters: ListGiveawayRequest): Promise<Array<EntGiveaway>> {
        const response = await this.listGiveawayRaw(requestParameters);
        return await response.value();
    }

    /**
     * list manager entities
     * List manager entities
     */
    async listManagerRaw(requestParameters: ListManagerRequest): Promise<runtime.ApiResponse<Array<EntManager>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/managers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntManagerFromJSON));
    }

    /**
     * list manager entities
     * List manager entities
     */
    async listManager(requestParameters: ListManagerRequest): Promise<Array<EntManager>> {
        const response = await this.listManagerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list orderonline entities
     * List orderonline entities
     */
    async listOrderonlineRaw(requestParameters: ListOrderonlineRequest): Promise<runtime.ApiResponse<Array<EntOrderonline>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orderonlines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOrderonlineFromJSON));
    }

    /**
     * list orderonline entities
     * List orderonline entities
     */
    async listOrderonline(requestParameters: ListOrderonlineRequest): Promise<Array<EntOrderonline>> {
        const response = await this.listOrderonlineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list orderproduct entities
     * List orderproduct entities
     */
    async listOrderproductRaw(requestParameters: ListOrderproductRequest): Promise<runtime.ApiResponse<Array<EntOrderproduct>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orderproducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOrderproductFromJSON));
    }

    /**
     * list orderproduct entities
     * List orderproduct entities
     */
    async listOrderproduct(requestParameters: ListOrderproductRequest): Promise<Array<EntOrderproduct>> {
        const response = await this.listOrderproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list paymentchannel entities
     * List paymentchannel entities
     */
    async listPaymentchannelRaw(requestParameters: ListPaymentchannelRequest): Promise<runtime.ApiResponse<Array<EntPaymentchannel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymentchannels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentchannelFromJSON));
    }

    /**
     * list paymentchannel entities
     * List paymentchannel entities
     */
    async listPaymentchannel(requestParameters: ListPaymentchannelRequest): Promise<Array<EntPaymentchannel>> {
        const response = await this.listPaymentchannelRaw(requestParameters);
        return await response.value();
    }

    /**
     * list position entities
     * List position entities
     */
    async listPositionRaw(requestParameters: ListPositionRequest): Promise<runtime.ApiResponse<Array<EntPosition>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPositionFromJSON));
    }

    /**
     * list position entities
     * List position entities
     */
    async listPosition(requestParameters: ListPositionRequest): Promise<Array<EntPosition>> {
        const response = await this.listPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list product entities
     * List product entities
     */
    async listProductRaw(requestParameters: ListProductRequest): Promise<runtime.ApiResponse<Array<EntProduct>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProductFromJSON));
    }

    /**
     * list product entities
     * List product entities
     */
    async listProduct(requestParameters: ListProductRequest): Promise<Array<EntProduct>> {
        const response = await this.listProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotionRaw(requestParameters: ListPromotionRequest): Promise<runtime.ApiResponse<Array<EntPromotion>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPromotionFromJSON));
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotion(requestParameters: ListPromotionRequest): Promise<Array<EntPromotion>> {
        const response = await this.listPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list role entities
     * List role entities
     */
    async listRoleRaw(requestParameters: ListRoleRequest): Promise<runtime.ApiResponse<Array<EntRole>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoleFromJSON));
    }

    /**
     * list role entities
     * List role entities
     */
    async listRole(requestParameters: ListRoleRequest): Promise<Array<EntRole>> {
        const response = await this.listRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list salary entities
     * List salary entities
     */
    async listSalaryRaw(requestParameters: ListSalaryRequest): Promise<runtime.ApiResponse<Array<EntSalary>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salarys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSalaryFromJSON));
    }

    /**
     * list salary entities
     * List salary entities
     */
    async listSalary(requestParameters: ListSalaryRequest): Promise<Array<EntSalary>> {
        const response = await this.listSalaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * list stock entities
     * List stock entities
     */
    async listStockRaw(requestParameters: ListStockRequest): Promise<runtime.ApiResponse<Array<EntStock>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStockFromJSON));
    }

    /**
     * list stock entities
     * List stock entities
     */
    async listStock(requestParameters: ListStockRequest): Promise<Array<EntStock>> {
        const response = await this.listStockRaw(requestParameters);
        return await response.value();
    }

    /**
     * list typeproduct entities
     * List typeproduct entities
     */
    async listTypeproductRaw(requestParameters: ListTypeproductRequest): Promise<runtime.ApiResponse<Array<EntTypeproduct>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typeproducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTypeproductFromJSON));
    }

    /**
     * list typeproduct entities
     * List typeproduct entities
     */
    async listTypeproduct(requestParameters: ListTypeproductRequest): Promise<Array<EntTypeproduct>> {
        const response = await this.listTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list zoneproduct entities
     * List zoneproduct entities
     */
    async listZoneproductRaw(requestParameters: ListZoneproductRequest): Promise<runtime.ApiResponse<Array<EntZoneproduct>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/zoneproducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntZoneproductFromJSON));
    }

    /**
     * list zoneproduct entities
     * List zoneproduct entities
     */
    async listZoneproduct(requestParameters: ListZoneproductRequest): Promise<Array<EntZoneproduct>> {
        const response = await this.listZoneproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * update assessment by ID
     * Update a assessment entity by ID
     */
    async updateAssessmentRaw(requestParameters: UpdateAssessmentRequest): Promise<runtime.ApiResponse<EntAssessment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAssessment.');
        }

        if (requestParameters.assessment === null || requestParameters.assessment === undefined) {
            throw new runtime.RequiredError('assessment','Required parameter requestParameters.assessment was null or undefined when calling updateAssessment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/assessments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAssessmentToJSON(requestParameters.assessment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAssessmentFromJSON(jsonValue));
    }

    /**
     * update assessment by ID
     * Update a assessment entity by ID
     */
    async updateAssessment(requestParameters: UpdateAssessmentRequest): Promise<EntAssessment> {
        const response = await this.updateAssessmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update beginwork by ID
     * Update a beginwork entity by ID
     */
    async updateBeginworkRaw(requestParameters: UpdateBeginworkRequest): Promise<runtime.ApiResponse<EntBeginWork>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBeginwork.');
        }

        if (requestParameters.beginwork === null || requestParameters.beginwork === undefined) {
            throw new runtime.RequiredError('beginwork','Required parameter requestParameters.beginwork was null or undefined when calling updateBeginwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beginworks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBeginWorkToJSON(requestParameters.beginwork),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBeginWorkFromJSON(jsonValue));
    }

    /**
     * update beginwork by ID
     * Update a beginwork entity by ID
     */
    async updateBeginwork(requestParameters: UpdateBeginworkRequest): Promise<EntBeginWork> {
        const response = await this.updateBeginworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * update company by ID
     * Update a company entity by ID
     */
    async updateCompanyRaw(requestParameters: UpdateCompanyRequest): Promise<runtime.ApiResponse<EntCompany>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCompany.');
        }

        if (requestParameters.company === null || requestParameters.company === undefined) {
            throw new runtime.RequiredError('company','Required parameter requestParameters.company was null or undefined when calling updateCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/companys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCompanyToJSON(requestParameters.company),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCompanyFromJSON(jsonValue));
    }

    /**
     * update company by ID
     * Update a company entity by ID
     */
    async updateCompany(requestParameters: UpdateCompanyRequest): Promise<EntCompany> {
        const response = await this.updateCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * update day by ID
     * Update a day entity by ID
     */
    async updateDayRaw(requestParameters: UpdateDayRequest): Promise<runtime.ApiResponse<EntDay>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDay.');
        }

        if (requestParameters.day === null || requestParameters.day === undefined) {
            throw new runtime.RequiredError('day','Required parameter requestParameters.day was null or undefined when calling updateDay.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/days/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDayToJSON(requestParameters.day),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDayFromJSON(jsonValue));
    }

    /**
     * update day by ID
     * Update a day entity by ID
     */
    async updateDay(requestParameters: UpdateDayRequest): Promise<EntDay> {
        const response = await this.updateDayRaw(requestParameters);
        return await response.value();
    }

    /**
     * update discount by ID
     * Update a discount entity by ID
     */
    async updateDiscountRaw(requestParameters: UpdateDiscountRequest): Promise<runtime.ApiResponse<EntDiscount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDiscount.');
        }

        if (requestParameters.discount === null || requestParameters.discount === undefined) {
            throw new runtime.RequiredError('discount','Required parameter requestParameters.discount was null or undefined when calling updateDiscount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiscountToJSON(requestParameters.discount),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiscountFromJSON(jsonValue));
    }

    /**
     * update discount by ID
     * Update a discount entity by ID
     */
    async updateDiscount(requestParameters: UpdateDiscountRequest): Promise<EntDiscount> {
        const response = await this.updateDiscountRaw(requestParameters);
        return await response.value();
    }

    /**
     * update employee by ID
     * Update a employee entity by ID
     */
    async updateEmployeeRaw(requestParameters: UpdateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEmployee.');
        }

        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling updateEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * update employee by ID
     * Update a employee entity by ID
     */
    async updateEmployee(requestParameters: UpdateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.updateEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update employeeworkinghours by ID
     * Update a employeeworkinghours entity by ID
     */
    async updateEmployeeworkinghoursRaw(requestParameters: UpdateEmployeeworkinghoursRequest): Promise<runtime.ApiResponse<EntEmployeeWorkingHours>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEmployeeworkinghours.');
        }

        if (requestParameters.employeeworkinghours === null || requestParameters.employeeworkinghours === undefined) {
            throw new runtime.RequiredError('employeeworkinghours','Required parameter requestParameters.employeeworkinghours was null or undefined when calling updateEmployeeworkinghours.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employeeworkinghourss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeWorkingHoursToJSON(requestParameters.employeeworkinghours),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeWorkingHoursFromJSON(jsonValue));
    }

    /**
     * update employeeworkinghours by ID
     * Update a employeeworkinghours entity by ID
     */
    async updateEmployeeworkinghours(requestParameters: UpdateEmployeeworkinghoursRequest): Promise<EntEmployeeWorkingHours> {
        const response = await this.updateEmployeeworkinghoursRaw(requestParameters);
        return await response.value();
    }

    /**
     * update getoffwork by ID
     * Update a getoffwork entity by ID
     */
    async updateGetoffworkRaw(requestParameters: UpdateGetoffworkRequest): Promise<runtime.ApiResponse<EntGetOffWork>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGetoffwork.');
        }

        if (requestParameters.getoffwork === null || requestParameters.getoffwork === undefined) {
            throw new runtime.RequiredError('getoffwork','Required parameter requestParameters.getoffwork was null or undefined when calling updateGetoffwork.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getoffworks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntGetOffWorkToJSON(requestParameters.getoffwork),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGetOffWorkFromJSON(jsonValue));
    }

    /**
     * update getoffwork by ID
     * Update a getoffwork entity by ID
     */
    async updateGetoffwork(requestParameters: UpdateGetoffworkRequest): Promise<EntGetOffWork> {
        const response = await this.updateGetoffworkRaw(requestParameters);
        return await response.value();
    }

    /**
     * update giveaway by ID
     * Update a giveaway entity by ID
     */
    async updateGiveawayRaw(requestParameters: UpdateGiveawayRequest): Promise<runtime.ApiResponse<EntGiveaway>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGiveaway.');
        }

        if (requestParameters.giveaway === null || requestParameters.giveaway === undefined) {
            throw new runtime.RequiredError('giveaway','Required parameter requestParameters.giveaway was null or undefined when calling updateGiveaway.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/giveaways/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntGiveawayToJSON(requestParameters.giveaway),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGiveawayFromJSON(jsonValue));
    }

    /**
     * update giveaway by ID
     * Update a giveaway entity by ID
     */
    async updateGiveaway(requestParameters: UpdateGiveawayRequest): Promise<EntGiveaway> {
        const response = await this.updateGiveawayRaw(requestParameters);
        return await response.value();
    }

    /**
     * update manager by ID
     * Update a manager entity by ID
     */
    async updateManagerRaw(requestParameters: UpdateManagerRequest): Promise<runtime.ApiResponse<EntManager>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateManager.');
        }

        if (requestParameters.manager === null || requestParameters.manager === undefined) {
            throw new runtime.RequiredError('manager','Required parameter requestParameters.manager was null or undefined when calling updateManager.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/managers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntManagerToJSON(requestParameters.manager),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntManagerFromJSON(jsonValue));
    }

    /**
     * update manager by ID
     * Update a manager entity by ID
     */
    async updateManager(requestParameters: UpdateManagerRequest): Promise<EntManager> {
        const response = await this.updateManagerRaw(requestParameters);
        return await response.value();
    }

    /**
     * update orderproduct by ID
     * Update a orderproduct entity by ID
     */
    async updateOrderproductRaw(requestParameters: UpdateOrderproductRequest): Promise<runtime.ApiResponse<EntOrderproduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrderproduct.');
        }

        if (requestParameters.orderproduct === null || requestParameters.orderproduct === undefined) {
            throw new runtime.RequiredError('orderproduct','Required parameter requestParameters.orderproduct was null or undefined when calling updateOrderproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/orderproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntOrderproductToJSON(requestParameters.orderproduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOrderproductFromJSON(jsonValue));
    }

    /**
     * update orderproduct by ID
     * Update a orderproduct entity by ID
     */
    async updateOrderproduct(requestParameters: UpdateOrderproductRequest): Promise<EntOrderproduct> {
        const response = await this.updateOrderproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * update position by ID
     * Update a position entity by ID
     */
    async updatePositionRaw(requestParameters: UpdatePositionRequest): Promise<runtime.ApiResponse<EntPosition>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePosition.');
        }

        if (requestParameters.position === null || requestParameters.position === undefined) {
            throw new runtime.RequiredError('position','Required parameter requestParameters.position was null or undefined when calling updatePosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPositionToJSON(requestParameters.position),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionFromJSON(jsonValue));
    }

    /**
     * update position by ID
     * Update a position entity by ID
     */
    async updatePosition(requestParameters: UpdatePositionRequest): Promise<EntPosition> {
        const response = await this.updatePositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * update product by ID
     * Update a product entity by ID
     */
    async updateProductRaw(requestParameters: UpdateProductRequest): Promise<runtime.ApiResponse<EntProduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProduct.');
        }

        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling updateProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntProductToJSON(requestParameters.product),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProductFromJSON(jsonValue));
    }

    /**
     * update product by ID
     * Update a product entity by ID
     */
    async updateProduct(requestParameters: UpdateProductRequest): Promise<EntProduct> {
        const response = await this.updateProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * update role by ID
     * Update a role entity by ID
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest): Promise<runtime.ApiResponse<EntRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoleToJSON(requestParameters.role),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoleFromJSON(jsonValue));
    }

    /**
     * update role by ID
     * Update a role entity by ID
     */
    async updateRole(requestParameters: UpdateRoleRequest): Promise<EntRole> {
        const response = await this.updateRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * update stock by ID
     * Update a stock entity by ID
     */
    async updateStockRaw(requestParameters: UpdateStockRequest): Promise<runtime.ApiResponse<EntStock>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStock.');
        }

        if (requestParameters.stock === null || requestParameters.stock === undefined) {
            throw new runtime.RequiredError('stock','Required parameter requestParameters.stock was null or undefined when calling updateStock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stocks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntStockToJSON(requestParameters.stock),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStockFromJSON(jsonValue));
    }

    /**
     * update stock by ID
     * Update a stock entity by ID
     */
    async updateStock(requestParameters: UpdateStockRequest): Promise<EntStock> {
        const response = await this.updateStockRaw(requestParameters);
        return await response.value();
    }

    /**
     * update typeproduct by ID
     * Update a typeproduct entity by ID
     */
    async updateTypeproductRaw(requestParameters: UpdateTypeproductRequest): Promise<runtime.ApiResponse<EntTypeproduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTypeproduct.');
        }

        if (requestParameters.typeproduct === null || requestParameters.typeproduct === undefined) {
            throw new runtime.RequiredError('typeproduct','Required parameter requestParameters.typeproduct was null or undefined when calling updateTypeproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/typeproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypeproductToJSON(requestParameters.typeproduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeproductFromJSON(jsonValue));
    }

    /**
     * update typeproduct by ID
     * Update a typeproduct entity by ID
     */
    async updateTypeproduct(requestParameters: UpdateTypeproductRequest): Promise<EntTypeproduct> {
        const response = await this.updateTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * update zoneproduct by ID
     * Update a zoneproduct entity by ID
     */
    async updateZoneproductRaw(requestParameters: UpdateZoneproductRequest): Promise<runtime.ApiResponse<EntZoneproduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateZoneproduct.');
        }

        if (requestParameters.zoneproduct === null || requestParameters.zoneproduct === undefined) {
            throw new runtime.RequiredError('zoneproduct','Required parameter requestParameters.zoneproduct was null or undefined when calling updateZoneproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/zoneproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntZoneproductToJSON(requestParameters.zoneproduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntZoneproductFromJSON(jsonValue));
    }

    /**
     * update zoneproduct by ID
     * Update a zoneproduct entity by ID
     */
    async updateZoneproduct(requestParameters: UpdateZoneproductRequest): Promise<EntZoneproduct> {
        const response = await this.updateZoneproductRaw(requestParameters);
        return await response.value();
    }

}
